interactions:
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- get_weather: Get weather in
      the next days at given location.\n    Takes inputs: {''location'': {''type'':
      ''string'', ''description'': ''the location''}, ''celsius'': {''type'': ''boolean'',
      ''nullable'': True, ''description'': ''whether to use Celsius for temperature''}}\n    Returns
      an output of type: string\n- final_answer: Provides a final answer to the given
      problem.\n    Takes inputs: {''answer'': {''type'': ''any'', ''description'':
      ''The final answer to the problem''}}\n    Returns an output of type: any\n\nHere
      are the rules you should always follow to solve your task:\n1. ALWAYS provide
      a tool call, else you will fail.\n2. Always use the right arguments for the
      tools. Never use variable names as the action arguments, use the value instead.\n3.
      Call a tool only when needed: do not call the search agent if you do not need
      information, try to solve the task yourself.\nIf no tool call is needed, use
      final_answer tool to return your answer.\n4. Never re-do a tool call that you
      previously did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nWhat is the weather in Tokyo?"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"get_weather","description":"Get
      weather in the next days at given location.","parameters":{"type":"object","properties":{"location":{"type":"string","description":"the
      location"},"celsius":{"type":"boolean","nullable":true,"description":"whether
      to use Celsius for temperature"}},"required":["location"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '4519'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.75.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.75.0
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFNdb5swFH3nV1j3OVRJSkbhsVu7h1XbVO1h01Ihx1zAibGZfdkaRfnv
        EyYB0nbSeEDWPT7nnvvhQ8AYyBxSBqLiJOpGhbfft9d5+8Djj/xR3z/+SKpP7+8p2RDeRO9g1jHM
        ZouCzqwrYepGIUmje1hY5ISd6iKO4us4jpcrD9QmR9XRyobC6GoR1lLLcDlfrsJ5FC6iE70yUqCD
        lP0MGGPs4P+dUZ3jM6RsPjtHanSOlwjpcIkxsEZ1EeDOSUdcE8xGUBhNqDvvulVqApAxKhNcqTFx
        /x0m57FbXKlMP7e3uy/K3H3F5MOvpSrd7vPN9u5hkq+X3jfeUNFqMXRpgg/x9EUyxkDz2nNLpOwP
        cqrQvqAzBtyWbY2aOutwWIMygneCa0jX8M3s9mYNszUIVE62bg0p2RaPcCFzDN46P006ZLFoHVev
        W8e1NuQT+t49nZDjMCZlysaajXtBhUJq6arMIne++ukQgrMRbwHaizlDY03dUEZmhz5psop6VRiX
        cUSXp40BMsTVhBWfWRd6WY7EpV+EYfcEFxXmI3XcQd7m0kyAYFL7azdvaff1S13+j/wICIENYZ41
        FnMpLiser1ns3uq/rg1d9obBof0tBWYk0XbzyLHgreofELi9I6yzQuoSbWOlf0VQNFmcbOJkg9Gi
        gOAY/AUAAP//AwCiJ6ogVAQAAA==
    headers:
      CF-RAY:
      - 9408e49c3e909147-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 16 May 2025 06:42:05 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=yCPcaQs4Auw0gov3Fhkd0DrHNHXHU.nUkI8rtdEPS_A-1747377725-1.0.1.1-FIjfyJx3byyNor67UU0k1sqPnzHNbLpNNCIet4b3lfPgPLS6KOS8uIJ8ZYbaOjuGELEdPOtAJ36xVcN0ZM9MVGTKasfaxkozIj5aFToi7ig;
        path=/; expires=Fri, 16-May-25 07:12:05 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=hwDSeNN8tusTrVRu69GvynaEfQauN013co1CQpWBIIU-1747377725829-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '719'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '725'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999129'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_831508d05f63b49e339d89ef7a21e639
    status:
      code: 200
      message: OK
- request:
    body: "{\"messages\":[{\"role\":\"system\",\"content\":[{\"type\":\"text\",\"text\":\"You
      are an expert assistant who can solve any task using tool calls. You will be
      given a task to solve as best you can.\\nTo do so, you have been given access
      to some tools.\\n\\nThe tool call you write is an action: after the tool is
      executed, you will get the result of the tool call as an \\\"observation\\\".\\nThis
      Action/Observation can repeat N times, you should take several steps when needed.\\n\\nYou
      can use the result of the previous action as input for the next action.\\nThe
      observation will always be a string: it can represent a file, like \\\"image_1.jpg\\\".\\nThen
      you can use it as input for the next action. You can do it for instance as follows:\\n\\nObservation:
      \\\"image_1.jpg\\\"\\n\\nAction:\\n{\\n  \\\"name\\\": \\\"image_transformer\\\",\\n
      \ \\\"arguments\\\": {\\\"image\\\": \\\"image_1.jpg\\\"}\\n}\\n\\nTo provide
      the final answer to the task, use an action blob with \\\"name\\\": \\\"final_answer\\\"
      tool. It is the only way to complete the task, else you will be stuck on a loop.
      So your final output should look like this:\\nAction:\\n{\\n  \\\"name\\\":
      \\\"final_answer\\\",\\n  \\\"arguments\\\": {\\\"answer\\\": \\\"insert your
      final answer here\\\"}\\n}\\n\\n\\nHere are a few examples using notional tools:\\n---\\nTask:
      \\\"Generate an image of the oldest person in this document.\\\"\\n\\nAction:\\n{\\n
      \ \\\"name\\\": \\\"document_qa\\\",\\n  \\\"arguments\\\": {\\\"document\\\":
      \\\"document.pdf\\\", \\\"question\\\": \\\"Who is the oldest person mentioned?\\\"}\\n}\\nObservation:
      \\\"The oldest person in the document is John Doe, a 55 year old lumberjack
      living in Newfoundland.\\\"\\n\\nAction:\\n{\\n  \\\"name\\\": \\\"image_generator\\\",\\n
      \ \\\"arguments\\\": {\\\"prompt\\\": \\\"A portrait of John Doe, a 55-year-old
      man living in Canada.\\\"}\\n}\\nObservation: \\\"image.png\\\"\\n\\nAction:\\n{\\n
      \ \\\"name\\\": \\\"final_answer\\\",\\n  \\\"arguments\\\": \\\"image.png\\\"\\n}\\n\\n---\\nTask:
      \\\"What is the result of the following operation: 5 + 3 + 1294.678?\\\"\\n\\nAction:\\n{\\n
      \   \\\"name\\\": \\\"python_interpreter\\\",\\n    \\\"arguments\\\": {\\\"code\\\":
      \\\"5 + 3 + 1294.678\\\"}\\n}\\nObservation: 1302.678\\n\\nAction:\\n{\\n  \\\"name\\\":
      \\\"final_answer\\\",\\n  \\\"arguments\\\": \\\"1302.678\\\"\\n}\\n\\n---\\nTask:
      \\\"Which city has the highest population , Guangzhou or Shanghai?\\\"\\n\\nAction:\\n{\\n
      \   \\\"name\\\": \\\"search\\\",\\n    \\\"arguments\\\": \\\"Population Guangzhou\\\"\\n}\\nObservation:
      ['Guangzhou has a population of 15 million inhabitants as of 2021.']\\n\\n\\nAction:\\n{\\n
      \   \\\"name\\\": \\\"search\\\",\\n    \\\"arguments\\\": \\\"Population Shanghai\\\"\\n}\\nObservation:
      '26 million (2019)'\\n\\nAction:\\n{\\n  \\\"name\\\": \\\"final_answer\\\",\\n
      \ \\\"arguments\\\": \\\"Shanghai\\\"\\n}\\n\\nAbove example were using notional
      tools that might not exist for you. You only have access to these tools:\\n-
      get_weather: Get weather in the next days at given location.\\n    Takes inputs:
      {'location': {'type': 'string', 'description': 'the location'}, 'celsius': {'type':
      'boolean', 'nullable': True, 'description': 'whether to use Celsius for temperature'}}\\n
      \   Returns an output of type: string\\n- final_answer: Provides a final answer
      to the given problem.\\n    Takes inputs: {'answer': {'type': 'any', 'description':
      'The final answer to the problem'}}\\n    Returns an output of type: any\\n\\nHere
      are the rules you should always follow to solve your task:\\n1. ALWAYS provide
      a tool call, else you will fail.\\n2. Always use the right arguments for the
      tools. Never use variable names as the action arguments, use the value instead.\\n3.
      Call a tool only when needed: do not call the search agent if you do not need
      information, try to solve the task yourself.\\nIf no tool call is needed, use
      final_answer tool to return your answer.\\n4. Never re-do a tool call that you
      previously did with the exact same parameters.\\n\\nNow Begin!\"}]},{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"New
      task:\\nWhat is the weather in Tokyo?\"}]},{\"role\":\"assistant\",\"content\":[{\"type\":\"text\",\"text\":\"Called
      Tool: 'get_weather' with arguments: {'location': 'Tokyo', 'celsius': True}\\nCalling
      tools:\\n[{'id': 'call_nxuBkOloEPe9Dq2lgskN8jEL', 'type': 'function', 'function':
      {'name': 'get_weather', 'arguments': {'location': 'Tokyo', 'celsius': True}}}]\"}]},{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Observation:\\nThe
      weather in Tokyo is sunny with temperatures around 7\xB0C.\"}]}],\"model\":\"gpt-4.1-mini\",\"stop\":[\"Observation:\",\"Calling
      tools:\"],\"tool_choice\":\"required\",\"tools\":[{\"type\":\"function\",\"function\":{\"name\":\"get_weather\",\"description\":\"Get
      weather in the next days at given location.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\",\"description\":\"the
      location\"},\"celsius\":{\"type\":\"boolean\",\"nullable\":true,\"description\":\"whether
      to use Celsius for temperature\"}},\"required\":[\"location\"]}}},{\"type\":\"function\",\"function\":{\"name\":\"final_answer\",\"description\":\"Provides
      a final answer to the given problem.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"answer\":{\"type\":\"string\",\"description\":\"The
      final answer to the problem\"}},\"required\":[\"answer\"]}}}]}"
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '4956'
      content-type:
      - application/json
      cookie:
      - __cf_bm=yCPcaQs4Auw0gov3Fhkd0DrHNHXHU.nUkI8rtdEPS_A-1747377725-1.0.1.1-FIjfyJx3byyNor67UU0k1sqPnzHNbLpNNCIet4b3lfPgPLS6KOS8uIJ8ZYbaOjuGELEdPOtAJ36xVcN0ZM9MVGTKasfaxkozIj5aFToi7ig;
        _cfuvid=hwDSeNN8tusTrVRu69GvynaEfQauN013co1CQpWBIIU-1747377725829-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.75.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.75.0
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFNBbtswELzrFcSeLcNy5CjRsU0OLdAACdzWQR0INLWSaFMkS1J1BcN/
        yhv6skJSbMmOC1QHgdjZ2Z0dLnceIcBTiAmwgjpWauF/WKyvULKroNxk189fv9l57Sa1+f5UPi6e
        YdQw1GqNzB1YY6ZKLdBxJTuYGaQOm6pBFEZXURRNr1ugVCmKhpZr54fjwC+55P50Mp35k9APwjd6
        oThDCzH54RFCyK79N0Jlir8hJpPRIVKitTRHiI9JhIBRookAtZZbR6WDUQ8yJR3KRrushBgATimR
        MCpE37j7doNz7xYVIhH1/c/Fl4fPj0/BWt/PxN0nLu7oQzbo15WudSsoqyQ7ujTAj/H4rBkhIGnZ
        cbmkIqHSbtGc8QkBavKqROka7bBbQpe3hHgJ8wLJFqkr0BAuyVxtakW4JbaSsiZb7grisNRoqKsM
        WkKNqmRKoj+vH8dL2MNJq7136fwysNFgVlkq3vtLpVSONmO2Br+8IfvjXQqVa6NW9ozaTM5tkRik
        trVoeFPeQUgrAaqTZQBtVKld4tQG26bBZHbTlYV+ZXu4W9J2FRwVQ9pNOLpQMUnRUd7uy3FFGWUF
        pj23X1VapVwNAG8w/Xs5l2p3DnCZ/0/5HmAMtcM00QZTzk5H7tMMNk/6X2lHn1vBYNH84gwTx9E0
        N5JiRivRvTOwtXVYJhmXORptePvYINNJdLuKblcYBhl4e+8vAAAA//8DAHRCfEt7BAAA
    headers:
      CF-RAY:
      - 9408e4a2fcd19147-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 16 May 2025 06:42:07 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '1594'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '1611'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999046'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2219e09a041fa4b6d4a4ce9bb7f765b8
    status:
      code: 200
      message: OK
version: 1

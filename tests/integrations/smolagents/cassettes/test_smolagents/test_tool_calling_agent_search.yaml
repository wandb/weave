interactions:
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- web_search: Performs a google
      web search for your query then returns a string of the top search results.\n    Takes
      inputs: {''query'': {''type'': ''string'', ''description'': ''The search query
      to perform.''}, ''filter_year'': {''type'': ''integer'', ''description'': ''Optionally
      restrict results to a certain year'', ''nullable'': True}}\n    Returns an output
      of type: string\n- final_answer: Provides a final answer to the given problem.\n    Takes
      inputs: {''answer'': {''type'': ''any'', ''description'': ''The final answer
      to the problem''}}\n    Returns an output of type: any\n\nHere are the rules
      you should always follow to solve your task:\n1. ALWAYS provide a tool call,
      else you will fail.\n2. Always use the right arguments for the tools. Never
      use variable names as the action arguments, use the value instead.\n3. Call
      a tool only when needed: do not call the search agent if you do not need information,
      try to solve the task yourself.\nIf no tool call is needed, use final_answer
      tool to return your answer.\n4. Never re-do a tool call that you previously
      did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nUse the provided tool to answer this question. Get the following page
      - ''https://weave-docs.wandb.ai/''?"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"web_search","description":"Performs
      a google web search for your query then returns a string of the top search results.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The
      search query to perform."},"filter_year":{"type":"integer","description":"Optionally
      restrict results to a certain year","nullable":true}},"required":["query"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '4726'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.78.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.78.1
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xTXY/aMBB8z6+w9pkgQkHR5ZF+6KpS6VRatWo5RY69Sdw6ts924BDiv1cxHAkc
        lZqHyPJ4Zsez631ECAgOGQFWU88aI+PFz8UX+lB/0Kv0uRHJ+9XOuM9L/mPB54mBUcfQxW9k/oU1
        ZroxEr3Q6ggzi9Rjp5qkszSdzpN0EoBGc5QdrTI+no2TuBFKxNPJdB5PZnEyO9FrLRg6yMiviBBC
        9uHfGVUcnyEjQSzsNOgcrRCy8yFCwGrZ7QB1TjhPlYdRDzKtPKrOu2qlHABea5kzKmVf+PjtB+s+
        LSpljh+n9+2GPn1aFquvzdsHXnxb3ot33wf1jtI7EwyVrWLnlAb4eT+7KkYIKNoE7haL3CG1rL5i
        EwLUVm2DynfOYb+Gpxbtbg3ZGpzwmG2RbjDmmrnxlipejKlYwwEuVA7RrfXjIB+LZeuofB0cVUp7
        2vkPyT2ekMO5SVJXxurCXVGhFEq4OrdIXbj7sAXRi5FgAdqLLoOxujE+9/oPhqLJZJIcZaGfxR6e
        vjmBXnsqh7TpbHRDMefoqQiDcJ49RlmNvOf2M0hbLvQAiAa3f23nlvYxAaGq/5HvAcbQeOS5scgF
        u7xyf8xi91b/deycczAMDu1GMMy9QNt1hGNJW3l8QOB2zmOTl0JVaI0V4RVBafL0rkjvCpwlJUSH
        6C8AAAD//wMApwNE+lQEAAA=
    headers:
      CF-RAY:
      - 942a072a78027f8f-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 May 2025 07:12:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=lZUY7b3GYVroRLf0V59tybrqWkx3ErTbGqcDoNa41oM-1747725171-1.0.1.1-6gN9r1LLDLC04Ii7BAYjOTr_sFWBtHyMkpA_mVrhpE3k8aDwnqNBqW8vPnzfOJUwi2qSdI2ZEG07R5ygiHqOF1XbhSBdTZT19LNKyQ79kGs;
        path=/; expires=Tue, 20-May-25 07:42:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=XQqXSGebXR5XwE7QJWGnn3WBfAM1ZH7CTPHY8pTEre4-1747725171353-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '711'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '716'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999094'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_122e68f9096213e1b31ffa056b9e97b4
    status:
      code: 200
      message: OK
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- web_search: Performs a google
      web search for your query then returns a string of the top search results.\n    Takes
      inputs: {''query'': {''type'': ''string'', ''description'': ''The search query
      to perform.''}, ''filter_year'': {''type'': ''integer'', ''description'': ''Optionally
      restrict results to a certain year'', ''nullable'': True}}\n    Returns an output
      of type: string\n- final_answer: Provides a final answer to the given problem.\n    Takes
      inputs: {''answer'': {''type'': ''any'', ''description'': ''The final answer
      to the problem''}}\n    Returns an output of type: any\n\nHere are the rules
      you should always follow to solve your task:\n1. ALWAYS provide a tool call,
      else you will fail.\n2. Always use the right arguments for the tools. Never
      use variable names as the action arguments, use the value instead.\n3. Call
      a tool only when needed: do not call the search agent if you do not need information,
      try to solve the task yourself.\nIf no tool call is needed, use final_answer
      tool to return your answer.\n4. Never re-do a tool call that you previously
      did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nUse the provided tool to answer this question. Get the following page
      - ''https://weave-docs.wandb.ai/''?"}]},{"role":"assistant","content":[{"type":"text","text":"Called
      Tool: ''web_search'' with arguments: {''query'': ''site:weave-docs.wandb.ai''}\nCalling
      tools:\n[{''id'': ''call_eI2HuvaqKLbSTmCPdbULHiDW'', ''type'': ''function'',
      ''function'': {''name'': ''web_search'', ''arguments'': {''query'': ''site:weave-docs.wandb.ai''}}}]"}]},{"role":"user","content":[{"type":"text","text":"Call
      id: call_eI2HuvaqKLbSTmCPdbULHiDW\nError:\nError executing tool ''web_search''
      with arguments {\"query\": \"site:weave-docs.wandb.ai\"}: AttributeError: ''Request''
      object has no attribute ''_replace''\nPlease try again or use another tool\nNow
      let''s retry: take care not to repeat previous errors! If you have retried several
      times, try a completely different approach.\n"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"web_search","description":"Performs
      a google web search for your query then returns a string of the top search results.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The
      search query to perform."},"filter_year":{"type":"integer","description":"Optionally
      restrict results to a certain year","nullable":true}},"required":["query"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '5456'
      content-type:
      - application/json
      cookie:
      - __cf_bm=lZUY7b3GYVroRLf0V59tybrqWkx3ErTbGqcDoNa41oM-1747725171-1.0.1.1-6gN9r1LLDLC04Ii7BAYjOTr_sFWBtHyMkpA_mVrhpE3k8aDwnqNBqW8vPnzfOJUwi2qSdI2ZEG07R5ygiHqOF1XbhSBdTZT19LNKyQ79kGs;
        _cfuvid=XQqXSGebXR5XwE7QJWGnn3WBfAM1ZH7CTPHY8pTEre4-1747725171353-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.78.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.78.1
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFPvb5swEP3OX2Hd51CFLC0N31Zp0lRpXdVt3a9UyNgHeDW2Z5ukWZT/
        fQISIGkmjQ/Iuud39+7deRsQAoJDQoCV1LPKyPDmx81DdvX86e3myv55d/um+vileLx/mX67s+Y7
        TBqGzn4h8wfWBdOVkeiFVh3MLFKPTdYonsfx7DKKoxaoNEfZ0Arjw/lFFFZCiXA2nV2G03kYzff0
        UguGDhLyMyCEkG37b4Qqji+QkOnkEKnQOVogJP0lQsBq2USAOiecp8rDZACZVh5Vo13VUo4Ar7VM
        GZVyKNx929F5cItKmT58zWv/PvJ39+UHs9B6xR7LWx59HtXrUm9MKyivFetdGuF9PDkpRggoWrXc
        NWapQ2pZecImBKgt6gqVb5TDdgm/a7SbJSRLWCNdYcg1c2RNFc+WsIMj9i44d34a+WIxrx2Vrw2j
        SmlPG92tY097ZNcPR+rCWJ25EyrkQglXphapa3seWx8chLQSoD6aLhirK+NTr5+xLRpF19ddWhh2
        cAQv9qDXnspRfDaNJ2cyphw9Fe0C9DvHKCuRD9xh92jNhR4Bwaj713LO5e4cEKr4n/QDwBgajzw1
        Frlgxy0P1yw2b/Rf13qfW8Hg0K4Ew9QLtM1EOOa0lt3DAbdxHqs0F6pAa6xoXw/kJo0XWbzIcB7l
        EOyCvwAAAP//AwA9zizgTAQAAA==
    headers:
      CF-RAY:
      - 942a073269957f8f-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 May 2025 07:12:52 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '721'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '727'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998939'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_d49f9210f1299a5cc05f3bcc38a1c2de
    status:
      code: 200
      message: OK
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- web_search: Performs a google
      web search for your query then returns a string of the top search results.\n    Takes
      inputs: {''query'': {''type'': ''string'', ''description'': ''The search query
      to perform.''}, ''filter_year'': {''type'': ''integer'', ''description'': ''Optionally
      restrict results to a certain year'', ''nullable'': True}}\n    Returns an output
      of type: string\n- final_answer: Provides a final answer to the given problem.\n    Takes
      inputs: {''answer'': {''type'': ''any'', ''description'': ''The final answer
      to the problem''}}\n    Returns an output of type: any\n\nHere are the rules
      you should always follow to solve your task:\n1. ALWAYS provide a tool call,
      else you will fail.\n2. Always use the right arguments for the tools. Never
      use variable names as the action arguments, use the value instead.\n3. Call
      a tool only when needed: do not call the search agent if you do not need information,
      try to solve the task yourself.\nIf no tool call is needed, use final_answer
      tool to return your answer.\n4. Never re-do a tool call that you previously
      did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nUse the provided tool to answer this question. Get the following page
      - ''https://weave-docs.wandb.ai/''?"}]},{"role":"assistant","content":[{"type":"text","text":"Called
      Tool: ''web_search'' with arguments: {''query'': ''site:weave-docs.wandb.ai''}\nCalling
      tools:\n[{''id'': ''call_eI2HuvaqKLbSTmCPdbULHiDW'', ''type'': ''function'',
      ''function'': {''name'': ''web_search'', ''arguments'': {''query'': ''site:weave-docs.wandb.ai''}}}]"}]},{"role":"user","content":[{"type":"text","text":"Call
      id: call_eI2HuvaqKLbSTmCPdbULHiDW\nError:\nError executing tool ''web_search''
      with arguments {\"query\": \"site:weave-docs.wandb.ai\"}: AttributeError: ''Request''
      object has no attribute ''_replace''\nPlease try again or use another tool\nNow
      let''s retry: take care not to repeat previous errors! If you have retried several
      times, try a completely different approach.\n"}]},{"role":"assistant","content":[{"type":"text","text":"Called
      Tool: ''web_search'' with arguments: {''query'': ''weave-docs wandb''}\nCalling
      tools:\n[{''id'': ''call_RWfutH1tNPhMp9oovcVhJd1T'', ''type'': ''function'',
      ''function'': {''name'': ''web_search'', ''arguments'': {''query'': ''weave-docs
      wandb''}}}]"}]},{"role":"user","content":[{"type":"text","text":"Call id: call_RWfutH1tNPhMp9oovcVhJd1T\nError:\nError
      executing tool ''web_search'' with arguments {\"query\": \"weave-docs wandb\"}:
      AttributeError: ''Request'' object has no attribute ''_replace''\nPlease try
      again or use another tool\nNow let''s retry: take care not to repeat previous
      errors! If you have retried several times, try a completely different approach.\n"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"web_search","description":"Performs
      a google web search for your query then returns a string of the top search results.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The
      search query to perform."},"filter_year":{"type":"integer","description":"Optionally
      restrict results to a certain year","nullable":true}},"required":["query"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '6162'
      content-type:
      - application/json
      cookie:
      - __cf_bm=lZUY7b3GYVroRLf0V59tybrqWkx3ErTbGqcDoNa41oM-1747725171-1.0.1.1-6gN9r1LLDLC04Ii7BAYjOTr_sFWBtHyMkpA_mVrhpE3k8aDwnqNBqW8vPnzfOJUwi2qSdI2ZEG07R5ygiHqOF1XbhSBdTZT19LNKyQ79kGs;
        _cfuvid=XQqXSGebXR5XwE7QJWGnn3WBfAM1ZH7CTPHY8pTEre4-1747725171353-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.78.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.78.1
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFRNT9wwEL3vrxj5wmV3IbAosLdSCXURh7ZqRdWCook92Zj6I7InhC3i
        v1dOYDd85RBZfvPevBmP/TABEFqJJQhZI0vbmNnZ77PvqvMXp6vbTSttzPjLj7z7dqlCdSnFNDF8
        eUuSn1lz6W1jiLV3AywDIVNSzfJFnh8eZ/lRD1ivyCTauuHZYp7NrHZ6dnhweDw7WMyyxRO99lpS
        FEv4MwEAeOj/yahTdC+WcDB93rEUI65JLLdBACJ4k3YExqgjo2Mx3YHSOyaXvLvWmBHA3ptCojG7
        xMP3MFrvuoXGFPL8+OSidPHnurvKzr25WuG/z78Wn0b5BulN0xuqWie3XRrh2/3lq2QAwqEduNqh
        KdDFjsIrPoDAsG4tOU7excO1GOKuxfJarAAttA5LQ8AeUEqKEbgm6KiMmgn2auYmLvf3O8I7mikv
        47xDp8o56v09UDqQZLMBH6ChUPlgExUiYZA1RUAGrnUE1pZAtX2apC/bEMgxGG01Yyowgq96KDU7
        zuGrIYwETfB3WhFYHwj6A7rnlC02JHW16RnapcS9Cmx8Cx06hip4C1wjQ4NrmgI6BSvotDGgPNgN
        lBS5r7ofhYGouX6juIIa72h+LR7Fi9Y+Tt5b34zGJlDVRjRv5wmd809Vp4G6eUIet7Nr/LoJvoyv
        qOmkdayLQBj7kRhP5uTZSG9BtC+GXzTB24YL9n+pT5od5dkgK3ZXdAfnJ08ge0Yzoi0Wp9N3FAtF
        jLq/H9srKVHWpEbc7PhwWwm2SvsddjAZNeCto/fkhyZotx6pfCi/A6SkhkkVTSCl5cuqd2GB0iv2
        Udi21b1hESncaUkFawrpUBRV2JrhaRFxE5lsUWm3ptAE3b8vomqK/LTMT0taZJWYPE7+AwAA//8D
        ACqspFVuBQAA
    headers:
      CF-RAY:
      - 942a073a3bb87f8f-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 May 2025 07:12:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '1736'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '2407'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998792'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_67d61c24714a1830dad239334e58d037
    status:
      code: 200
      message: OK
version: 1

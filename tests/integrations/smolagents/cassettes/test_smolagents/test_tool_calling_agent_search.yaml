interactions:
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- web_search: Performs a google
      web search for your query then returns a string of the top search results.\n    Takes
      inputs: {''query'': {''type'': ''string'', ''description'': ''The search query
      to perform.''}, ''filter_year'': {''type'': ''integer'', ''description'': ''Optionally
      restrict results to a certain year'', ''nullable'': True}}\n    Returns an output
      of type: string\n- final_answer: Provides a final answer to the given problem.\n    Takes
      inputs: {''answer'': {''type'': ''any'', ''description'': ''The final answer
      to the problem''}}\n    Returns an output of type: any\n\nHere are the rules
      you should always follow to solve your task:\n1. ALWAYS provide a tool call,
      else you will fail.\n2. Always use the right arguments for the tools. Never
      use variable names as the action arguments, use the value instead.\n3. Call
      a tool only when needed: do not call the search agent if you do not need information,
      try to solve the task yourself.\nIf no tool call is needed, use final_answer
      tool to return your answer.\n4. Never re-do a tool call that you previously
      did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nUse the provided tool to answer this question. Get the following page
      - ''https://weave-docs.wandb.ai/''?"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"web_search","description":"Performs
      a google web search for your query then returns a string of the top search results.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The
      search query to perform."},"filter_year":{"type":"integer","description":"Optionally
      restrict results to a certain year","nullable":true}},"required":["query"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '4726'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.78.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.78.1
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFNNj9owFLznV1jvTIBk+Si5lR66cFhV7B6qllXkOC+JW8f22s5ShPjv
        VQIkgaVSc4gsj2feeN7zwSMEeAoRAVZQx0ot/OWPZciqzdPSLMSa7p825kU9f/n6sNEv1XcY1AyV
        /ELmLqwhU6UW6LiSJ5gZpA5r1WA+mc/Dh1kYNkCpUhQ1LdfOnwwDv+SS++E4nPrjiR9MzvRCcYYW
        IvLTI4SQQ/OvjcoU/0BExoPLTonW0hwhag8RAkaJegeotdw6Kh0MOpAp6VDW3mUlRA9wSomYUSG6
        wqfv0Ft3aVEh4pV8XH9S69V0OXte6dnjGwu/2eLzvlfvJL3XjaGskqxNqYe3+9FNMUJA0rLh7jCJ
        LVLDihs2IUBNXpUoXe0cDlt4q9DstxBtwXKHUeGcttFotEP6jn6qmB3uqEyTIeWjLRzhSu7o3Vu/
        9oIymFWWio8JUimVo/VFmghfz8ix7ZZQuTYqsTdUyLjktogNUtuE0O+FdzHSWIDqqt2gjSq1i536
        jU3RYDwOTrLQDWUHh9Mz6JSjok8LZ4M7inGKjvJmItohZJQVmHbcbhhplXLVA7ze7T/auad9SoDL
        /H/kO4Ax1A7TWBtMObu+cnfMYP1o/3WszbkxDBbNO2cYO46m7kiKGa3E6SWB3VuHZZxxmaPRhjfP
        CTIdzxfJfJHgJMjAO3p/AQAA//8DAAZfTSJdBAAA
    headers:
      CF-RAY:
      - 9429e1616c777f4c-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 May 2025 06:47:03 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Khs9daXX7O_r2wW1OQvWwr2aaOWpgvC2DMube0wnwOY-1747723623-1.0.1.1-2xk52jQTQCDq1fO5dTUvV1kCgtHHUqGdUJcoo9eMgRcqKDZyuvGHJ90K7Ja4iJcPaMq5SoU0myu1oelcBKoPAGi7bx7mZ.YY32aOWj2JOzs;
        path=/; expires=Tue, 20-May-25 07:17:03 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=cf7xr7VMosRaocHr4o2fmn4lzYDTZQFCg7v0HXc0Jmc-1747723623684-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '732'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '739'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999094'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_351a4ebc4f4f1eabeb920bef880b43f9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- web_search: Performs a google
      web search for your query then returns a string of the top search results.\n    Takes
      inputs: {''query'': {''type'': ''string'', ''description'': ''The search query
      to perform.''}, ''filter_year'': {''type'': ''integer'', ''description'': ''Optionally
      restrict results to a certain year'', ''nullable'': True}}\n    Returns an output
      of type: string\n- final_answer: Provides a final answer to the given problem.\n    Takes
      inputs: {''answer'': {''type'': ''any'', ''description'': ''The final answer
      to the problem''}}\n    Returns an output of type: any\n\nHere are the rules
      you should always follow to solve your task:\n1. ALWAYS provide a tool call,
      else you will fail.\n2. Always use the right arguments for the tools. Never
      use variable names as the action arguments, use the value instead.\n3. Call
      a tool only when needed: do not call the search agent if you do not need information,
      try to solve the task yourself.\nIf no tool call is needed, use final_answer
      tool to return your answer.\n4. Never re-do a tool call that you previously
      did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nUse the provided tool to answer this question. Get the following page
      - ''https://weave-docs.wandb.ai/''?"}]},{"role":"assistant","content":[{"type":"text","text":"Called
      Tool: ''web_search'' with arguments: {''query'': ''site:https://weave-docs.wandb.ai/''}\nCalling
      tools:\n[{''id'': ''call_InHJ8oJI5B6SIp6Hqc2PshAy'', ''type'': ''function'',
      ''function'': {''name'': ''web_search'', ''arguments'': {''query'': ''site:https://weave-docs.wandb.ai/''}}}]"}]},{"role":"user","content":[{"type":"text","text":"Call
      id: call_InHJ8oJI5B6SIp6Hqc2PshAy\nError:\nError executing tool ''web_search''
      with arguments {\"query\": \"site:https://weave-docs.wandb.ai/\"}: AttributeError:
      ''Request'' object has no attribute ''_replace''\nPlease try again or use another
      tool\nNow let''s retry: take care not to repeat previous errors! If you have
      retried several times, try a completely different approach.\n"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"web_search","description":"Performs
      a google web search for your query then returns a string of the top search results.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The
      search query to perform."},"filter_year":{"type":"integer","description":"Optionally
      restrict results to a certain year","nullable":true}},"required":["query"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '5483'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Khs9daXX7O_r2wW1OQvWwr2aaOWpgvC2DMube0wnwOY-1747723623-1.0.1.1-2xk52jQTQCDq1fO5dTUvV1kCgtHHUqGdUJcoo9eMgRcqKDZyuvGHJ90K7Ja4iJcPaMq5SoU0myu1oelcBKoPAGi7bx7mZ.YY32aOWj2JOzs;
        _cfuvid=cf7xr7VMosRaocHr4o2fmn4lzYDTZQFCg7v0HXc0Jmc-1747723623684-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.78.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.78.1
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFNNc5swEL3zKzR7No6hpNQc3UMOTdrxoW0mdYYRYgHZQiKSiOt4/N8z
        gA3YcWfKgdHs03v79kN7hxDgKUQEWEEtKyvhLp4Wfvbz3se3oNysH5Zf795ekrt5vvl+/9vCpGGo
        ZI3MnlhTpspKoOVKdjDTSC02ql4YhKH/6bN/2wKlSlE0tLyybjD13JJL7voz/9adBa4XHOmF4gwN
        ROSPQwgh+/bfGJUp/oWIzCanSInG0Bwh6i8RAlqJJgLUGG4slZ3pI8iUtCgb77IWYgRYpUTMqBBD
        4u7bj85Dt6gQ8XK2zJE+PvzahQs+Xxfbx+LpR62/jfJ10ruqNZTVkvVdGuF9PLpIRghIWrbcLSax
        QapZccEmBKjO6xKlbZzDfgUvNerdCqIVFNZWJrq52SJ9RTdVzEy3VKbJlPKbFRzgTOngXDs/j3qk
        MasNFR+bR6VUljY1tN17PiKHflBC5ZVWibmgQsYlN0WskZq2/vEYnJOR1gLUZ5OGSquysrFVG2yT
        et78SycLwz4OsB8cQassFSOa7/uTK4pxipbydhn6/WOUFZgO3GEPaZ1yNQKcUfUf7VzT7jrAZf4/
        8gPAGFYW07jSmHJ2XvJwTWPzXv91re9zaxgM6lfOMLYcdTORFDNai+PLNztjsYwzLnPUlebtS4Ks
        isN5Es4TDLwMnIPzDgAA//8DAPMfCnRYBAAA
    headers:
      CF-RAY:
      - 9429e16f2d527f4c-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 May 2025 06:47:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '742'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '746'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998933'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_138dec8fae9033d76eedcd6d57fb2074
    status:
      code: 200
      message: OK
- request:
    body: '{"messages":[{"role":"system","content":[{"type":"text","text":"You are
      an expert assistant who can solve any task using tool calls. You will be given
      a task to solve as best you can.\nTo do so, you have been given access to some
      tools.\n\nThe tool call you write is an action: after the tool is executed,
      you will get the result of the tool call as an \"observation\".\nThis Action/Observation
      can repeat N times, you should take several steps when needed.\n\nYou can use
      the result of the previous action as input for the next action.\nThe observation
      will always be a string: it can represent a file, like \"image_1.jpg\".\nThen
      you can use it as input for the next action. You can do it for instance as follows:\n\nObservation:
      \"image_1.jpg\"\n\nAction:\n{\n  \"name\": \"image_transformer\",\n  \"arguments\":
      {\"image\": \"image_1.jpg\"}\n}\n\nTo provide the final answer to the task,
      use an action blob with \"name\": \"final_answer\" tool. It is the only way
      to complete the task, else you will be stuck on a loop. So your final output
      should look like this:\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      {\"answer\": \"insert your final answer here\"}\n}\n\n\nHere are a few examples
      using notional tools:\n---\nTask: \"Generate an image of the oldest person in
      this document.\"\n\nAction:\n{\n  \"name\": \"document_qa\",\n  \"arguments\":
      {\"document\": \"document.pdf\", \"question\": \"Who is the oldest person mentioned?\"}\n}\nObservation:
      \"The oldest person in the document is John Doe, a 55 year old lumberjack living
      in Newfoundland.\"\n\nAction:\n{\n  \"name\": \"image_generator\",\n  \"arguments\":
      {\"prompt\": \"A portrait of John Doe, a 55-year-old man living in Canada.\"}\n}\nObservation:
      \"image.png\"\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"image.png\"\n}\n\n---\nTask: \"What is the result of the following operation:
      5 + 3 + 1294.678?\"\n\nAction:\n{\n    \"name\": \"python_interpreter\",\n    \"arguments\":
      {\"code\": \"5 + 3 + 1294.678\"}\n}\nObservation: 1302.678\n\nAction:\n{\n  \"name\":
      \"final_answer\",\n  \"arguments\": \"1302.678\"\n}\n\n---\nTask: \"Which city
      has the highest population , Guangzhou or Shanghai?\"\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Guangzhou\"\n}\nObservation: [''Guangzhou
      has a population of 15 million inhabitants as of 2021.'']\n\n\nAction:\n{\n    \"name\":
      \"search\",\n    \"arguments\": \"Population Shanghai\"\n}\nObservation: ''26
      million (2019)''\n\nAction:\n{\n  \"name\": \"final_answer\",\n  \"arguments\":
      \"Shanghai\"\n}\n\nAbove example were using notional tools that might not exist
      for you. You only have access to these tools:\n- web_search: Performs a google
      web search for your query then returns a string of the top search results.\n    Takes
      inputs: {''query'': {''type'': ''string'', ''description'': ''The search query
      to perform.''}, ''filter_year'': {''type'': ''integer'', ''description'': ''Optionally
      restrict results to a certain year'', ''nullable'': True}}\n    Returns an output
      of type: string\n- final_answer: Provides a final answer to the given problem.\n    Takes
      inputs: {''answer'': {''type'': ''any'', ''description'': ''The final answer
      to the problem''}}\n    Returns an output of type: any\n\nHere are the rules
      you should always follow to solve your task:\n1. ALWAYS provide a tool call,
      else you will fail.\n2. Always use the right arguments for the tools. Never
      use variable names as the action arguments, use the value instead.\n3. Call
      a tool only when needed: do not call the search agent if you do not need information,
      try to solve the task yourself.\nIf no tool call is needed, use final_answer
      tool to return your answer.\n4. Never re-do a tool call that you previously
      did with the exact same parameters.\n\nNow Begin!"}]},{"role":"user","content":[{"type":"text","text":"New
      task:\nUse the provided tool to answer this question. Get the following page
      - ''https://weave-docs.wandb.ai/''?"}]},{"role":"assistant","content":[{"type":"text","text":"Called
      Tool: ''web_search'' with arguments: {''query'': ''site:https://weave-docs.wandb.ai/''}\nCalling
      tools:\n[{''id'': ''call_InHJ8oJI5B6SIp6Hqc2PshAy'', ''type'': ''function'',
      ''function'': {''name'': ''web_search'', ''arguments'': {''query'': ''site:https://weave-docs.wandb.ai/''}}}]"}]},{"role":"user","content":[{"type":"text","text":"Call
      id: call_InHJ8oJI5B6SIp6Hqc2PshAy\nError:\nError executing tool ''web_search''
      with arguments {\"query\": \"site:https://weave-docs.wandb.ai/\"}: AttributeError:
      ''Request'' object has no attribute ''_replace''\nPlease try again or use another
      tool\nNow let''s retry: take care not to repeat previous errors! If you have
      retried several times, try a completely different approach.\n"}]},{"role":"assistant","content":[{"type":"text","text":"Called
      Tool: ''web_search'' with arguments: {''query'': ''https://weave-docs.wandb.ai/''}\nCalling
      tools:\n[{''id'': ''call_Q0QgeaXMVy7Bi9jhwXhZOurK'', ''type'': ''function'',
      ''function'': {''name'': ''web_search'', ''arguments'': {''query'': ''https://weave-docs.wandb.ai/''}}}]"}]},{"role":"user","content":[{"type":"text","text":"Call
      id: call_Q0QgeaXMVy7Bi9jhwXhZOurK\nError:\nError executing tool ''web_search''
      with arguments {\"query\": \"https://weave-docs.wandb.ai/\"}: AttributeError:
      ''Request'' object has no attribute ''_replace''\nPlease try again or use another
      tool\nNow let''s retry: take care not to repeat previous errors! If you have
      retried several times, try a completely different approach.\n"}]}],"model":"gpt-4.1-mini","stop":["Observation:","Calling
      tools:"],"tool_choice":"required","tools":[{"type":"function","function":{"name":"web_search","description":"Performs
      a google web search for your query then returns a string of the top search results.","parameters":{"type":"object","properties":{"query":{"type":"string","description":"The
      search query to perform."},"filter_year":{"type":"integer","description":"Optionally
      restrict results to a certain year","nullable":true}},"required":["query"]}}},{"type":"function","function":{"name":"final_answer","description":"Provides
      a final answer to the given problem.","parameters":{"type":"object","properties":{"answer":{"type":"string","description":"The
      final answer to the problem"}},"required":["answer"]}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '6225'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Khs9daXX7O_r2wW1OQvWwr2aaOWpgvC2DMube0wnwOY-1747723623-1.0.1.1-2xk52jQTQCDq1fO5dTUvV1kCgtHHUqGdUJcoo9eMgRcqKDZyuvGHJ90K7Ja4iJcPaMq5SoU0myu1oelcBKoPAGi7bx7mZ.YY32aOWj2JOzs;
        _cfuvid=cf7xr7VMosRaocHr4o2fmn4lzYDTZQFCg7v0HXc0Jmc-1747723623684-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.78.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.78.1
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFTLbtswELz7Kxa85GI7lmLHsI9pmxf6Qg9FkzoQVuRKYkORCknZcQz/
        eyHJkZSXDgKxszM73CW5GwAwKdgSGM/Q87xQo7PbszD9nRbXs6834en9zdMvdbV5CHxwnm8f2LBi
        mPgfcf/MGnOTF4q8NLqBuSX0VKkG8+l8Hp6chqc1kBtBqqKlhR9Nx8Eol1qOwkk4G02mo2B6oGdG
        cnJsCX8HAAC7+l8Z1YIe2RImw+dITs5hSmzZJgEwa1QVYeicdB61Z8MO5EZ70pV3XSrVA7wxKuKo
        VFe4+Xa9ddctVCpKvjydXFx+uv1RFvHF58Xlt6fv15T9Oe/Va6S3RW0oKTVvu9TD2/jyVTEApjFv
        uFKjilC7DdlXfACGNi1z0r7yznYr1uSt2HLFrgBzKDXGisAbENIS92oLlryVtCbwGcGhK5BYk9eB
        AlOCo8z7wi2PjzeEaxoJw914g1rEY5THR1A6qdMm25q1FCSgaqIDUdalPPFMS44KlMylx2qLbgw/
        FaEjQM7Jua5Ya2wtERA2FENszcaRhcRYkDoxNq81xiu2Zy86sB+8t77rTddSUjpUb8eOWpuDtWru
        dwdk3x4xZdLCmti9olYDkS6LLKGrJ9c/QINnI7UFVr44o6ywJi985M091UWDk0XYyLLuJnXwbH4A
        vfGoerTpdDF8RzES5FHWx7i9ORx5RqLHDWZhuxMshTQdNhn0GvDW0XvyTROkTnsqH8p3AOdUeBJR
        YUlI/nLXXZql6rH5KK1tdW2YObJrySnykmw1FEEJlqp5AZjbOk95lEidki2srJ8BlhTRfBHPFzFN
        g4QN9oP/AAAA//8DAHlYKZYVBQAA
    headers:
      CF-RAY:
      - 9429e177d8b07f4c-MAA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 May 2025 06:47:08 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - wandb
      openai-processing-ms:
      - '1560'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '1565'
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998776'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_ec3c1e3d2fef28b0961d57b5f1345482
    status:
      code: 200
      message: OK
version: 1

"""
Async version of the TraceServerInterface.

This interface defines async versions of all trace server operations.
Implementations should handle operations asynchronously to avoid blocking
the event loop in async contexts like FastAPI.
"""

import typing
from typing import AsyncIterator, Protocol

if typing.TYPE_CHECKING:
    pass

from . import trace_server_interface as tsi


class AsyncTraceServerInterface(Protocol):
    """
    Async version of TraceServerInterface protocol.

    All methods are async versions of their sync counterparts.
    """

    def ensure_project_exists(
        self, entity: str, project: str
    ) -> tsi.EnsureProjectExistsRes:
        """Non-async method since it's typically fast and doesn't need async handling."""
        return tsi.EnsureProjectExistsRes(project_name=project)

    # OTEL API
    async def otel_export(self, req: tsi.OtelExportReq) -> tsi.OtelExportRes: ...

    # Call API
    async def call_start(self, req: tsi.CallStartReq) -> tsi.CallStartRes: ...
    async def call_end(self, req: tsi.CallEndReq) -> tsi.CallEndRes: ...
    async def call_read(self, req: tsi.CallReadReq) -> tsi.CallReadRes: ...
    async def calls_query(self, req: tsi.CallsQueryReq) -> tsi.CallsQueryRes: ...
    def calls_query_stream(self, req: tsi.CallsQueryReq) -> AsyncIterator[tsi.CallSchema]: ...
    async def calls_delete(self, req: tsi.CallsDeleteReq) -> tsi.CallsDeleteRes: ...
    async def calls_query_stats(self, req: tsi.CallsQueryStatsReq) -> tsi.CallsQueryStatsRes: ...
    async def call_update(self, req: tsi.CallUpdateReq) -> tsi.CallUpdateRes: ...
    async def call_start_batch(self, req: tsi.CallCreateBatchReq) -> tsi.CallCreateBatchRes: ...

    # Op API
    async def op_create(self, req: tsi.OpCreateReq) -> tsi.OpCreateRes: ...
    async def op_read(self, req: tsi.OpReadReq) -> tsi.OpReadRes: ...
    async def ops_query(self, req: tsi.OpQueryReq) -> tsi.OpQueryRes: ...

    # Cost API
    async def cost_create(self, req: tsi.CostCreateReq) -> tsi.CostCreateRes: ...
    async def cost_query(self, req: tsi.CostQueryReq) -> tsi.CostQueryRes: ...
    async def cost_purge(self, req: tsi.CostPurgeReq) -> tsi.CostPurgeRes: ...

    # Obj API
    async def obj_create(self, req: tsi.ObjCreateReq) -> tsi.ObjCreateRes: ...
    async def obj_read(self, req: tsi.ObjReadReq) -> tsi.ObjReadRes: ...
    async def objs_query(self, req: tsi.ObjQueryReq) -> tsi.ObjQueryRes: ...
    async def obj_delete(self, req: tsi.ObjDeleteReq) -> tsi.ObjDeleteRes: ...

    # Table API
    async def table_create(self, req: tsi.TableCreateReq) -> tsi.TableCreateRes: ...
    async def table_update(self, req: tsi.TableUpdateReq) -> tsi.TableUpdateRes: ...
    async def table_query(self, req: tsi.TableQueryReq) -> tsi.TableQueryRes: ...
    def table_query_stream(self, req: tsi.TableQueryReq) -> AsyncIterator[tsi.TableRowSchema]: ...
    async def table_query_stats(self, req: tsi.TableQueryStatsReq) -> tsi.TableQueryStatsRes: ...
    async def table_query_stats_batch(
        self, req: tsi.TableQueryStatsBatchReq
    ) -> tsi.TableQueryStatsBatchRes: ...

    # Ref API
    async def refs_read_batch(self, req: tsi.RefsReadBatchReq) -> tsi.RefsReadBatchRes: ...

    # File API
    async def file_create(self, req: tsi.FileCreateReq) -> tsi.FileCreateRes: ...
    async def file_content_read(self, req: tsi.FileContentReadReq) -> tsi.FileContentReadRes: ...
    async def files_stats(self, req: tsi.FilesStatsReq) -> tsi.FilesStatsRes: ...

    # Feedback API
    async def feedback_create(self, req: tsi.FeedbackCreateReq) -> tsi.FeedbackCreateRes: ...
    async def feedback_query(self, req: tsi.FeedbackQueryReq) -> tsi.FeedbackQueryRes: ...
    async def feedback_purge(self, req: tsi.FeedbackPurgeReq) -> tsi.FeedbackPurgeRes: ...
    async def feedback_replace(self, req: tsi.FeedbackReplaceReq) -> tsi.FeedbackReplaceRes: ...

    # Action API
    async def actions_execute_batch(
        self, req: tsi.ActionsExecuteBatchReq
    ) -> tsi.ActionsExecuteBatchRes: ...

    # Execute LLM API
    async def completions_create(self, req: tsi.CompletionsCreateReq) -> tsi.CompletionsCreateRes: ...

    # Execute LLM API (Streaming)
    def completions_create_stream(
        self, req: tsi.CompletionsCreateReq
    ) -> AsyncIterator[dict[str, typing.Any]]: ...

    # Project statistics API
    async def project_stats(self, req: tsi.ProjectStatsReq) -> tsi.ProjectStatsRes: ...

    # Thread API
    def threads_query_stream(self, req: tsi.ThreadsQueryReq) -> AsyncIterator[tsi.ThreadSchema]: ...

    # Evaluation API
    async def evaluate_model(self, req: tsi.EvaluateModelReq) -> tsi.EvaluateModelRes: ...
    async def evaluation_status(self, req: tsi.EvaluationStatusReq) -> tsi.EvaluationStatusRes: ...

    # Context manager for batching
    def call_batch(self):
        """Context manager for batching operations - implementation can be sync."""
        return self
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        return None 
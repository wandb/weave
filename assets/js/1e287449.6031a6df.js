"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5172],{77336:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(85893),r=t(11151),s=t(65488),i=t(85162);const o={},c="Tutorial: Track Application Logic",l={id:"tutorial-tracing_2",title:"Tutorial: Track Application Logic",description:"In the Track LLM inputs & outputs tutorial, the basics of tracking the inputs and outputs of your LLMs was covered.",source:"@site/docs/tutorial-tracing_2.md",sourceDirName:".",slug:"/tutorial-tracing_2",permalink:"/tutorial-tracing_2",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/tutorial-tracing_2.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Quickstart: Track LLM Calls",permalink:"/quickstart"},next:{title:"Tracing Overview",permalink:"/guides/tracking/tracing"}},u={},d=[{value:"Tracking nested function calls",id:"tracking-nested-function-calls",level:2},{value:"Tracking metadata",id:"tracking-metadata",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"tutorial-track-application-logic",children:"Tutorial: Track Application Logic"}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.a,{href:"/quickstart",children:"Track LLM inputs & outputs"})," tutorial, the basics of tracking the inputs and outputs of your LLMs was covered."]}),"\n",(0,a.jsx)(n.p,{children:"In this tutorial you will learn how to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Track data"})," as it flows through your application"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Track metadata"})," at call time"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"tracking-nested-function-calls",children:"Tracking nested function calls"}),"\n",(0,a.jsxs)(n.p,{children:["LLM-powered applications can contain multiple LLMs calls and additional data processing and validation logic that is important to monitor. Even deep nested call structures common in many apps, Weave will keep track of the parent-child relationships in nested functions as long as ",(0,a.jsx)(n.code,{children:"weave.op()"})," is added to every function you'd like to track."]}),"\n",(0,a.jsxs)(n.p,{children:["Building on our ",(0,a.jsx)(n.a,{href:"/quickstart",children:"basic tracing example"}),", we will now add additional logic to count the returned items from our LLM and wrap them all in a higher level function. We'll then add ",(0,a.jsx)(n.code,{children:"weave.op()"})," to trace every function, its call order and its parent-child relationship:"]}),"\n",(0,a.jsxs)(s.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsxs)(i.default,{value:"python",label:"Python",default:!0,children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nimport json\nfrom openai import OpenAI\n\nclient = OpenAI()\n\n# highlight-next-line\n@weave.op()\ndef extract_dinos(sentence: str) -> dict:\n    response = client.chat.completions.create(\n        model="gpt-4o",\n        messages=[\n            {\n                "role": "system",\n                "content": """Extract any dinosaur `name`, their `common_name`, \\\nnames and whether its `diet` is a herbivore or carnivore, in JSON format."""\n            },\n            {\n                "role": "user",\n                "content": sentence\n            }\n            ],\n            response_format={ "type": "json_object" }\n        )\n    return response.choices[0].message.content\n\n# highlight-next-line\n@weave.op()\ndef count_dinos(dino_data: dict) -> int:\n    # count the number of items in the returned list\n    k = list(dino_data.keys())[0]\n    return len(dino_data[k])\n\n# highlight-next-line\n@weave.op()\ndef dino_tracker(sentence: str) -> dict:\n    # extract dinosaurs using a LLM\n    dino_data = extract_dinos(sentence)\n\n    # count the number of dinosaurs returned\n    dino_data = json.loads(dino_data)\n    n_dinos = count_dinos(dino_data)\n    return {"n_dinosaurs": n_dinos, "dinosaurs": dino_data}\n\n# highlight-next-line\nweave.init(\'jurassic-park\')\n\nsentence = """I watched as a Tyrannosaurus rex (T. rex) chased after a Triceratops (Trike), \\\nboth carnivore and herbivore locked in an ancient dance. Meanwhile, a gentle giant \\\nBrachiosaurus (Brachi) calmly munched on treetops, blissfully unaware of the chaos below."""\n\nresult = dino_tracker(sentence)\nprint(result)\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Nested functions"})}),(0,a.jsxs)(n.p,{children:["When you run the above code you will see the the inputs and outputs from the two nested functions (",(0,a.jsx)(n.code,{children:"extract_dinos"})," and ",(0,a.jsx)(n.code,{children:"count_dinos"}),"), as well as the automatically-logged OpenAI trace."]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Nested Weave Trace",src:t(11627).Z+"",width:"1354",height:"1334"})})]}),(0,a.jsxs)(i.default,{value:"typescript",label:"TypeScript",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import OpenAI from 'openai';\nimport * as weave from 'weave';\n\nconst openai = new OpenAI();\n\nconst extractDinos = weave.op(async (sentence: string) => {\n  const response = await openai.chat.completions.create({\n    model: 'gpt-4o',\n    messages: [\n      {\n        role: 'system',\n        content:\n          'Extract any dinosaur `name`, their `common_name`, names and whether its `diet` is a herbivore or carnivore, in JSON format.',\n      },\n      {role: 'user', content: sentence},\n    ],\n    response_format: {type: 'json_object'},\n  });\n  return response.choices[0].message.content;\n});\n\nconst countDinos = weave.op(async (dinoData: string) => {\n  const parsed = JSON.parse(dinoData);\n  return Object.keys(parsed).length;\n});\n\nconst dinoTracker = weave.op(async (sentence: string) => {\n  const dinoData = await extractDinos(sentence);\n  const nDinos = await countDinos(dinoData);\n  return {nDinos, dinoData};\n});\n\nasync function main() {\n  await weave.init('jurassic-park');\n\n  const sentence = `I watched as a Tyrannosaurus rex (T. rex) chased after a Triceratops (Trike),\n        both carnivore and herbivore locked in an ancient dance. Meanwhile, a gentle giant\n        Brachiosaurus (Brachi) calmly munched on treetops, blissfully unaware of the chaos below.`;\n\n  const result = await dinoTracker(sentence);\n  console.log(result);\n}\n\nmain();\n\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Nested functions"})}),(0,a.jsxs)(n.p,{children:["When you run the above code you will see the the inputs and outputs from the two nested functions (",(0,a.jsx)(n.code,{children:"extractDinos"})," and ",(0,a.jsx)(n.code,{children:"countDinos"}),"), as well as the automatically-logged OpenAI trace."]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Nested Weave Trace",src:t(11627).Z+"",width:"1354",height:"1334"})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"tracking-metadata",children:"Tracking metadata"}),"\n",(0,a.jsxs)(n.p,{children:["Tracking metadata can be done easily by using the ",(0,a.jsx)(n.code,{children:"weave.attributes"})," context manager and passing it a dictionary of the metadata to track at call time."]}),"\n",(0,a.jsx)(n.p,{children:"Continuing our example from above:"}),"\n",(0,a.jsxs)(s.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsx)(i.default,{value:"python",label:"Python",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\n\nweave.init('jurassic-park')\n\nsentence = \"\"\"I watched as a Tyrannosaurus rex (T. rex) chased after a Triceratops (Trike), \\\nboth carnivore and herbivore locked in an ancient dance. Meanwhile, a gentle giant \\\nBrachiosaurus (Brachi) calmly munched on treetops, blissfully unaware of the chaos below.\"\"\"\n\n# track metadata alongside our previously defined function\n# highlight-next-line\nwith weave.attributes({'user_id': 'lukas', 'env': 'production'}):\n    result = dino_tracker(sentence)\n"})})}),(0,a.jsx)(i.default,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"It's recommended to use metadata tracking to track metadata at run time, e.g. user ids or whether or not the call is part of the development process or is in production etc."}),(0,a.jsxs)(n.p,{children:["To track system settings, such as a System Prompt, we recommend using ",(0,a.jsx)(n.a,{href:"guides/core-types/models",children:"weave Models"})]})]}),"\n",(0,a.jsx)(n.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Follow the ",(0,a.jsx)(n.a,{href:"/tutorial-weave_models",children:"App Versioning tutorial"})," to capture, version and organize ad-hoc prompt, model, and application changes."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});t(67294);var a=t(90512);const r={tabItem:"tabItem_Ymn6"};var s=t(85893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,i),hidden:t,children:n})}},65488:(e,n,t)=>{t.d(n,{Z:()=>p});var a=t(67294),r=t(90512),s=t(12466),i=t(70989),o=t(72389);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var l=t(85893);function u(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),h=e=>{const n=e.currentTarget,t=u.indexOf(n),r=o[t].value;r!==a&&(d(n),i(r))},p=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return(0,l.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,l.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>u.push(e),onKeyDown:p,onClick:h,...s,className:(0,r.Z)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function d(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,l.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function h(e){const n=(0,i.Y)(e);return(0,l.jsxs)("div",{className:(0,r.Z)("tabs-container",c.tabList),children:[(0,l.jsx)(u,{...n,...e}),(0,l.jsx)(d,{...n,...e})]})}function p(e){const n=(0,o.default)();return(0,l.jsx)(h,{...e,children:(0,i.h)(e.children)},String(n))}},70989:(e,n,t)=>{t.d(n,{Y:()=>p,h:()=>l});var a=t(67294),r=t(16550),s=t(20469),i=t(91980),o=t(67392),c=t(20812);function l(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return l(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(s.location.search);n.set(o,e),s.replace({...s.location,search:n.toString()})}),[o,s])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=u(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[p,m]=h({queryString:t,groupId:r}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),v=(()=>{const e=p??g;return d({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{v&&l(v)}),[v]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),f(e)}),[m,f,i]),tabValues:i}}},11627:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/tutorial_tracing_2_nested_dinos-5adf698c338eb5e0496fab5599c4bd37.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var a=t(67294);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);
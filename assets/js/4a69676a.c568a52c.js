"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5969],{96621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=t(85893),r=t(11151);const s={},i="Weave with TypeScript Quickstart Guide",o={id:"reference/generated_typescript_docs/intro-notebook",title:"Weave with TypeScript Quickstart Guide",description:"You can use W&B Weave with Typescript to:",source:"@site/docs/reference/generated_typescript_docs/intro-notebook.md",sourceDirName:"reference/generated_typescript_docs",slug:"/reference/generated_typescript_docs/intro-notebook",permalink:"/reference/generated_typescript_docs/intro-notebook",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/reference/generated_typescript_docs/intro-notebook.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{},sidebar:"notebookSidebar",previous:{title:"Service API",permalink:"/reference/gen_notebooks/weave_via_service_api"}},c={},l=[{value:"Function tracking",id:"function-tracking",level:2},{value:"OpenAI integration",id:"openai-integration",level:2},{value:"Nested function tracking",id:"nested-function-tracking",level:2},{value:"Dataset management",id:"dataset-management",level:2},{value:"Evaluation framework",id:"evaluation-framework",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"weave-with-typescript-quickstart-guide",children:"Weave with TypeScript Quickstart Guide"}),"\n",(0,a.jsx)(n.p,{children:"You can use W&B Weave with Typescript to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Log and debug language model inputs, outputs, and traces"}),"\n",(0,a.jsx)(n.li,{children:"Build rigorous, apples-to-apples evaluations for language model use cases"}),"\n",(0,a.jsx)(n.li,{children:"Organize all the information generated across the LLM workflow, from experimentation to evaluations to production"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For more information, see the ",(0,a.jsx)(n.a,{href:"/",children:"Weave documentation"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"function-tracking",children:"Function tracking"}),"\n",(0,a.jsxs)(n.p,{children:["To use Weave in your Typescript code, initialize a new Weave project and add the ",(0,a.jsx)(n.code,{children:"weave.op"})," wrapper to the functions you want to track."]}),"\n",(0,a.jsxs)(n.p,{children:["After adding ",(0,a.jsx)(n.code,{children:"weave.op"})," and calling the function, visit the W&B dashboard to see it tracked within your project."]}),"\n",(0,a.jsx)(n.p,{children:"We automatically track your code - check the code tab in the UI!"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function initializeWeaveProject() {\n    const PROJECT = 'weave-examples';\n    await weave.init(PROJECT);\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const stripUserInput = weave.op(function stripUserInput(userInput: string): string {\n    return userInput.trim();\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following example shows how basic function tracking works."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function demonstrateBasicTracking() {\n    const result = await stripUserInput(\"    hello    \");\n    console.log('Basic tracking result:', result);\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"openai-integration",children:"OpenAI integration"}),"\n",(0,a.jsx)(n.p,{children:"Weave automatically tracks all OpenAI calls, including:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Token usage"}),"\n",(0,a.jsx)(n.li,{children:"API costs"}),"\n",(0,a.jsx)(n.li,{children:"Request/response pairs"}),"\n",(0,a.jsx)(n.li,{children:"Model configurations"}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In addition to OpenAI, Weave supports automatic logging of other LLM providers, such as Anthropic and Mistral. For the full list, see ",(0,a.jsx)(n.a,{href:"/guides/integrations/#llm-providers",children:"LLM Providers in the Integrations documentation"}),"."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"function initializeOpenAIClient() {\n    return weave.wrapOpenAI(new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY\n    }));\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'async function demonstrateOpenAITracking() {\n    const client = initializeOpenAIClient();\n    const result = await client.chat.completions.create({\n        model: "gpt-4-turbo",\n        messages: [{ role: "user", content: "Hello, how are you?" }],\n    });\n    console.log(\'OpenAI tracking result:\', result);\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"nested-function-tracking",children:"Nested function tracking"}),"\n",(0,a.jsx)(n.p,{children:"Weave allows you to track complex workflows by combining multiple tracked functions\nand LLM calls while preserving the entire execution trace. The benefits of this include:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Full visibility into your application's logic flow"}),"\n",(0,a.jsx)(n.li,{children:"Easy debugging of complex chains of operations"}),"\n",(0,a.jsx)(n.li,{children:"Performance optimization opportunities"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'async function demonstrateNestedTracking() {\n    const client = initializeOpenAIClient();\n    \n    const correctGrammar = weave.op(async function correctGrammar(userInput: string): Promise<string> {\n        const stripped = await stripUserInput(userInput);\n        const response = await client.chat.completions.create({\n            model: "gpt-4-turbo",\n            messages: [\n                {\n                    role: "system",\n                    content: "You are a grammar checker, correct the following user input."\n                },\n                { role: "user", content: stripped }\n            ],\n            temperature: 0,\n        });\n        return response.choices[0].message.content ?? \'\';\n    });\n\n    const grammarResult = await correctGrammar("That was so easy, it was a piece of pie!");\n    console.log(\'Nested tracking result:\', grammarResult);\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"dataset-management",children:"Dataset management"}),"\n",(0,a.jsxs)(n.p,{children:["You can create and manage datasets with Weave using the ",(0,a.jsx)(n.a,{href:"/guides/core-types/datasets",children:(0,a.jsx)(n.code,{children:"weave.Dataset"})})," class. Similar to ",(0,a.jsxs)(n.a,{href:"/guides/core-types/models",children:["Weave ",(0,a.jsx)(n.code,{children:"Models"})]}),", ",(0,a.jsx)(n.code,{children:"weave.Dataset"})," helps:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Track and version your data"}),"\n",(0,a.jsx)(n.li,{children:"Organize test cases"}),"\n",(0,a.jsx)(n.li,{children:"Share datasets between team members"}),"\n",(0,a.jsx)(n.li,{children:"Power systematic evaluations"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface GrammarExample {\n    userInput: string;\n    expected: string;\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'function createGrammarDataset(): weave.Dataset<GrammarExample> {\n    return new weave.Dataset<GrammarExample>({\n        id: \'grammar-correction\',\n        rows: [\n            {\n                userInput: "That was so easy, it was a piece of pie!",\n                expected: "That was so easy, it was a piece of cake!"\n            },\n            {\n                userInput: "I write good",\n                expected: "I write well"\n            },\n            {\n                userInput: "LLM\'s are best",\n                expected: "LLM\'s are the best"\n            }\n        ]\n    });\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"evaluation-framework",children:"Evaluation framework"}),"\n",(0,a.jsxs)(n.p,{children:["Weave supports evaluation-driven development with the ",(0,a.jsxs)(n.a,{href:"/guides/core-types/evaluations",children:[(0,a.jsx)(n.code,{children:"Evaluation"})," class"]}),". Evaluations help you reliably iterate on your GenAI application. The ",(0,a.jsx)(n.code,{children:"Evaluation"})," class does the following:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Assesses ",(0,a.jsx)(n.code,{children:"Model"})," performance on a ",(0,a.jsx)(n.code,{children:"Dataset"})]}),"\n",(0,a.jsx)(n.li,{children:"Applies custom scoring functions"}),"\n",(0,a.jsx)(n.li,{children:"Generates detailed performance reports"}),"\n",(0,a.jsx)(n.li,{children:"Enables comparison between model versions"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can find a complete evaluation tutorial at ",(0,a.jsx)(n.a,{href:"http://wandb.me/weave_eval_tut",children:"http://wandb.me/weave_eval_tut"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'class OpenAIGrammarCorrector {\n    private oaiClient: ReturnType<typeof weave.wrapOpenAI>;\n    \n    constructor() {\n        this.oaiClient = weave.wrapOpenAI(new OpenAI({\n            apiKey: process.env.OPENAI_API_KEY\n        }));\n        this.predict = weave.op(this, this.predict);\n    }\n\n    async predict(userInput: string): Promise<string> {\n        const response = await this.oaiClient.chat.completions.create({\n            model: \'gpt-4-turbo\',\n            messages: [\n                { \n                    role: "system", \n                    content: "You are a grammar checker, correct the following user input." \n                },\n                { role: "user", content: userInput }\n            ],\n            temperature: 0\n        });\n        return response.choices[0].message.content ?? \'\';\n    }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function runEvaluation() {\n    const corrector = new OpenAIGrammarCorrector();\n    const dataset = createGrammarDataset();\n    \n    const exactMatch = weave.op(\n        function exactMatch({ modelOutput, datasetRow }: { \n            modelOutput: string; \n            datasetRow: GrammarExample \n        }): { match: boolean } {\n            return { match: datasetRow.expected === modelOutput };\n        },\n        { name: 'exactMatch' }\n    );\n\n    const evaluation = new weave.Evaluation({\n        dataset,\n        scorers: [exactMatch],\n    });\n\n    const summary = await evaluation.evaluate({\n        model: weave.op((args: { datasetRow: GrammarExample }) => \n            corrector.predict(args.datasetRow.userInput)\n        )\n    });\n    console.log('Evaluation summary:', summary);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The following ",(0,a.jsx)(n.code,{children:"main"})," function runs all demonstrations:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function main() {\n    try {\n        await initializeWeaveProject();\n        await demonstrateBasicTracking();\n        await demonstrateOpenAITracking();\n        await demonstrateNestedTracking();\n        await runEvaluation();\n    } catch (error) {\n        console.error('Error running demonstrations:', error);\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var a=t(67294);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);
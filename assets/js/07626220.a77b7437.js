"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2196],{56836:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>T,contentTitle:()=>b,default:()=>N,frontMatter:()=>w,metadata:()=>_,toc:()=>k});var t=a(85893),l=a(11151),i=a(65488),s=a(85162),r=a(67294);const c="window-content_wMkM",o="carousel_ivBY",d="carousel-inner_Kp_Z",h="carousel-item_ZkMm",u="carousel-image_BeQl",p="carousel-footer_PmSO",m="indicator-dot_joJu",x="active_bLKf";var j=a(90512);const g=e=>{let{images:n,alt:a}=e;const[l,i]=(0,r.useState)(0),s=(0,r.useRef)(null),g=()=>{if(s.current){const e=s.current.scrollLeft,n=s.current.offsetWidth,a=Math.round(e/n);i(a)}};(0,r.useEffect)((()=>{const e=s.current;if(e)return e.addEventListener("scroll",g),()=>e.removeEventListener("scroll",g)}),[]);return Array.isArray(n)&&0!==n.length?(0,t.jsxs)("div",{className:c,children:[(0,t.jsx)("div",{ref:s,className:o,children:(0,t.jsx)("div",{className:d,children:n.map(((e,n)=>(0,t.jsx)("div",{className:h,children:(0,t.jsx)("img",{src:e,alt:`${a} ${n+1}`,className:u+" zoomable"})},n)))})}),n.length>1&&(0,t.jsx)("div",{className:p,children:n.map(((e,n)=>(0,t.jsx)("button",{className:(0,j.Z)(m,n===l&&x),onClick:()=>(e=>{if(s.current){const n=s.current.offsetWidth;s.current.scrollTo({left:e*n,behavior:"smooth"})}})(n),"aria-label":`Go to image ${n+1}`},n)))})]}):null},f=a.p+"assets/images/calls_macro-eeb1415280974b897b10031c1a146b09.png",y=a.p+"assets/images/calls_filter-e669c423b7f0ee56f6c215733f21485f.png",v=a.p+"assets/images/basic_call-bc1a430056991b62cfb8946b4b121929.png",w={},b="Tracing Basics",_={id:"guides/tracking/tracing",title:"Tracing Basics",description:"<DesktopWindow",source:"@site/docs/guides/tracking/tracing.mdx",sourceDirName:"guides/tracking",slug:"/guides/tracking/tracing",permalink:"/guides/tracking/tracing",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/tracking/tracing.mdx",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Track Application Logic",permalink:"/tutorial-tracing_2"},next:{title:"Costs",permalink:"/guides/tracking/costs"}},T={},k=[{value:"Creating Calls",id:"creating-calls",level:2},{value:"1. Automatic tracking of LLM libraries",id:"1-automatic-tracking-of-llm-libraries",level:3},{value:"Summary",id:"summary",level:4},{value:"2. Decorating and wrapping functions",id:"2-decorating-and-wrapping-functions",level:3},{value:"Trace sync &amp; async generator functions",id:"trace-sync--async-generator-functions",level:4},{value:"Getting a handle to the call object during execution",id:"getting-a-handle-to-the-call-object-during-execution",level:4},{value:"Call display name",id:"call-display-name",level:4},{value:"Attributes",id:"attributes",level:4},{value:"Trace parallel (multi-threaded) function calls",id:"trace-parallel-multi-threaded-function-calls",level:4},{value:"3. Manual Call tracking",id:"3-manual-call-tracking",level:3},{value:"4. Track class and object methods",id:"4-track-class-and-object-methods",level:3},{value:"Decorate a class method",id:"decorate-a-class-method",level:4},{value:"Decorate a static class method",id:"decorate-a-static-class-method",level:4},{value:"Viewing Calls",id:"viewing-calls",level:2},{value:"Customize rendered traces with <code>weave.Markdown</code>",id:"customize-rendered-traces-with-weavemarkdown",level:3},{value:"Updating Calls",id:"updating-calls",level:2},{value:"Set display name",id:"set-display-name",level:3},{value:"Add feedback",id:"add-feedback",level:3},{value:"Delete a Call",id:"delete-a-call",level:3},{value:"Delete multiple Calls",id:"delete-multiple-calls",level:3},{value:"Querying and exporting Calls",id:"querying-and-exporting-calls",level:2},{value:"Call schema",id:"call-schema",level:3},{value:"Saved views",id:"saved-views",level:2},{value:"View a W&amp;B run in the Traces table",id:"view-a-wb-run-in-the-traces-table",level:2},{value:"Python example",id:"python-example",level:3},{value:"Configure autopatching",id:"configure-autopatching",level:2},{value:"Disable all autopatching",id:"disable-all-autopatching",level:3},{value:"Disable a specific integration",id:"disable-a-specific-integration",level:3},{value:"Post-process inputs and outputs",id:"post-process-inputs-and-outputs",level:3},{value:"FAQs",id:"faqs",level:2},{value:"How do I stop large traces from being truncated?",id:"how-do-i-stop-large-traces-from-being-truncated",level:3},{value:"How do I disable tracing?",id:"how-do-i-disable-tracing",level:3},{value:"Environment variable",id:"environment-variable",level:4},{value:"Client initialization",id:"client-initialization",level:4},{value:"Context manager",id:"context-manager",level:4},{value:"How do I capture information about a Call?",id:"how-do-i-capture-information-about-a-call",level:3}];function I(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tracing-basics",children:"Tracing Basics"}),"\n",(0,t.jsx)(g,{images:[f,v,y],alt:"Screenshot of Weave Calls",title:"Weave Calls"}),"\n",(0,t.jsxs)(n.admonition,{title:"Calls",type:"info",children:[(0,t.jsx)(n.p,{children:"Calls are the fundamental building block in Weave. They represent a single execution of a function, including:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Inputs (arguments)"}),"\n",(0,t.jsx)(n.li,{children:"Outputs (return value)"}),"\n",(0,t.jsx)(n.li,{children:"Metadata (duration, exceptions, LLM usage, etc.)"}),"\n"]}),(0,t.jsxs)(n.p,{children:["Calls are similar to spans in the ",(0,t.jsx)(n.a,{href:"https://opentelemetry.io",children:"OpenTelemetry"})," data model. A Call can:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Belong to a Trace (a collection of calls in the same execution context)"}),"\n",(0,t.jsx)(n.li,{children:"Have parent and child Calls, forming a tree structure"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"creating-calls",children:"Creating Calls"}),"\n",(0,t.jsx)(n.p,{children:"There are three main ways to create Calls in Weave:"}),"\n",(0,t.jsx)(n.h3,{id:"1-automatic-tracking-of-llm-libraries",children:"1. Automatic tracking of LLM libraries"}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsxs)(n.p,{children:["Weave automatically tracks ",(0,t.jsx)(n.a,{href:"/guides/integrations/",children:"calls to common LLM libraries"})," like ",(0,t.jsx)(n.code,{children:"openai"}),", ",(0,t.jsx)(n.code,{children:"anthropic"}),", ",(0,t.jsx)(n.code,{children:"cohere"}),", and ",(0,t.jsx)(n.code,{children:"mistral"}),". Simply call ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/#function-init",children:(0,t.jsx)(n.code,{children:"weave.init('project_name')"})})," at the start of your program:"]}),(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsxs)(n.p,{children:["You can control Weave's default tracking behavior ",(0,t.jsxs)(n.a,{href:"#configure-autopatching",children:["using the ",(0,t.jsx)(n.code,{children:"autopatch_settings"})," argument in ",(0,t.jsx)(n.code,{children:"weave.init"})]}),"."]})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\nfrom openai import OpenAI\nclient = OpenAI()\n\n# Initialize Weave Tracing\nweave.init(\'intro-example\')\n\nresponse = client.chat.completions.create(\n    model="gpt-4",\n    messages=[\n        {\n            "role": "user",\n            "content": "How are you?"\n        }\n    ],\n    temperature=0.8,\n    max_tokens=64,\n    top_p=1,\n)\n'})})]}),(0,t.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,t.jsxs)(n.p,{children:["Weave automatically tracks ",(0,t.jsx)(n.a,{href:"/guides/integrations/",children:"calls to common LLM libraries"}),", such as ",(0,t.jsx)(n.code,{children:"openai"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"import OpenAI from 'openai'\nimport * as weave from 'weave'\n\nconst client = new OpenAI()\n\n// Initialize Weave Tracing\nawait weave.init('intro-example')\n\nconst response = await client.chat.completions.create({\n  model: 'gpt-4',\n  messages: [\n    {\n      role: 'user',\n      content: 'How are you?',\n    },\n  ],\n  temperature: 0.8,\n  max_tokens: 64,\n  top_p: 1,\n});\n"})}),(0,t.jsxs)(n.p,{children:["For a complete setup guide for JS / TS projects, see the ",(0,t.jsx)(n.a,{href:"/guides/integrations/js",children:"TypeScript SDK: Third-Party Integration Guide"}),"."]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.p,{children:["You can store metrics or other post-call values in the ",(0,t.jsx)(n.code,{children:"summary"}),"\ndictionary of a Call. Modify ",(0,t.jsx)(n.code,{children:"call.summary"})," during execution and any\nvalues you add will be merged with Weave's computed summary data when\nthe call finishes."]}),"\n",(0,t.jsx)(n.h3,{id:"2-decorating-and-wrapping-functions",children:"2. Decorating and wrapping functions"}),"\n",(0,t.jsx)(n.p,{children:"However, often LLM applications have additional logic (such as pre/post processing, prompts, etc.) that you want to track."}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsxs)(n.p,{children:["Weave allows you to manually track these calls using the ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/#function-op",children:(0,t.jsx)(n.code,{children:"@weave.op"})})," decorator. For example:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize Weave Tracing\nweave.init(\'intro-example\')\n\n# Decorate your function\n@weave.op\ndef my_function(name: str):\n    return f"Hello, {name}!"\n\n# Call your function -- Weave will automatically track inputs and outputs\nprint(my_function("World"))\n'})}),(0,t.jsxs)(n.p,{children:["You can also track ",(0,t.jsx)(n.a,{href:"#4-track-class-and-object-methods",children:"methods on classes"}),"."]}),(0,t.jsx)(n.h4,{id:"trace-sync--async-generator-functions",children:"Trace sync & async generator functions"}),(0,t.jsx)(n.p,{children:"Weave supports tracing both sync and async generator functions, including deeply nested patterns."}),(0,t.jsx)(n.admonition,{type:"important",children:(0,t.jsxs)(n.p,{children:["Since generators yield values lazily, the outputs are only logged when the generator is fully consumed (e.g., by converting it to a list).\nTo ensure outputs are captured in the trace, fully consume the generator (e.g., by using ",(0,t.jsx)(n.code,{children:"list()"}),")."]})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from typing import Generator\nimport weave\n\nweave.init("my-project")\n\n# This function uses a simple sync generator.\n# Weave will trace the call and its input (`x`), \n# but output values are only captured once the generator is consumed (e.g., via `list()`).\n@weave.op\ndef basic_gen(x: int) -> Generator[int, None, None]:\n    yield from range(x)\n\n# A normal sync function used within the generator pipeline.\n# Its calls are also traced independently by Weave.\n@weave.op\ndef inner(x: int) -> int:\n    return x + 1\n\n# A sync generator that calls another traced function (`inner`).\n# Each yielded value comes from a separate traced call to `inner`.\n@weave.op\ndef nested_generator(x: int) -> Generator[int, None, None]:\n    for i in range(x):\n        yield inner(i)\n\n# A more complex generator that composes the above generator.\n# Tracing here produces a hierarchical call tree:\n# - `deeply_nested_generator` (parent)\n#   - `nested_generator` (child)\n#     - `inner` (grandchild)\n@weave.op\ndef deeply_nested_generator(x: int) -> Generator[int, None, None]:\n    for i in range(x):\n        for j in nested_generator(i):\n            yield j\n\n# The generator must be *consumed* for Weave to capture outputs.\n# This is true for both sync and async generators.\nres = deeply_nested_generator(4)\nlist(res)  # Triggers tracing of all nested calls and yields\n'})}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Tracing generator functions in Weave.",src:a(1883).Z+"",width:"2078",height:"1134"})})]}),(0,t.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,t.jsxs)(n.p,{children:["Weave allows you to manually track these calls by wrapping your function with ",(0,t.jsx)(n.a,{href:"/reference/typescript-sdk/weave/functions/op",children:(0,t.jsx)(n.code,{children:"weave.op"})}),". For example:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"import * as weave from 'weave'\n\nawait weave.init('intro-example')\n\nfunction myFunction(name: string) {\n    return `Hello, ${name}!`\n}\n\nconst myFunctionOp = weave.op(myFunction)\n"})}),(0,t.jsx)(n.p,{children:"You can also define the wrapping inline:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const myFunctionOp = weave.op((name: string) => `Hello, ${name}!`)\n"})}),(0,t.jsx)(n.p,{children:"This works for both functions as well as methods on classes:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class MyClass {\n    constructor() {\n        this.myMethod = weave.op(this.myMethod)\n    }\n\n    myMethod(name: string) {\n        return `Hello, ${name}!`\n    }\n}\n"})})]})]}),"\n",(0,t.jsx)(n.h4,{id:"getting-a-handle-to-the-call-object-during-execution",children:"Getting a handle to the call object during execution"}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsxs)(n.p,{children:["Sometimes it is useful to get a handle to the ",(0,t.jsx)(n.code,{children:"Call"})," object itself. You can do this by calling the ",(0,t.jsx)(n.code,{children:"op.call"})," method, which returns both the result and the ",(0,t.jsx)(n.code,{children:"Call"})," object. For example:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'result, call = my_function.call("World")\n'})}),(0,t.jsxs)(n.p,{children:["Then, ",(0,t.jsx)(n.code,{children:"call"})," can be used to set / update / fetch additional properties (most commonly used to get the ID of the call to be used for feedback)."]}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"If your op is a method on a class, you need to pass the instance as the first argument to the op (see example below)."})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'# Notice that we pass the `instance` as the first argument.\nprint(instance.my_method.call(instance, "World"))\n'})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize Weave Tracing\nweave.init("intro-example")\n\nclass MyClass:\n    # Decorate your method\n    @weave.op\n    def my_method(self, name: str):\n        return f"Hello, {name}!"\n\ninstance = MyClass()\n\n# Call your method -- Weave will automatically track inputs and outputs\ninstance.my_method.call(instance, "World")\n'})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]}),"\n",(0,t.jsx)(n.h4,{id:"call-display-name",children:"Call display name"}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsx)(n.p,{children:"Sometimes you may want to override the display name of a call. You can achieve this in one of four ways:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Change the display name at the time of calling the op:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'result = my_function("World", __weave={"display_name": "My Custom Display Name"})\n'})}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"__weave"})," dictionary sets the call display name which will take precedence over the Op display name."]})}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Change the display name on a per-call basis. This uses the ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/trace/weave.trace.op#function-call",children:(0,t.jsx)(n.code,{children:"Op.call"})})," method to return a ",(0,t.jsx)(n.code,{children:"Call"})," object, which you can then use to set the display name using ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/trace/weave.trace.weave_client#method-set_display_name",children:(0,t.jsx)(n.code,{children:"Call.set_display_name"})}),"."]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'result, call = my_function.call("World")\ncall.set_display_name("My Custom Display Name")\n'})}),(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Change the display name for all Calls of a given Op:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'@weave.op(call_display_name="My Custom Display Name")\ndef my_function(name: str):\n    return f"Hello, {name}!"\n'})}),(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"call_display_name"})," can also be a function that takes in a ",(0,t.jsx)(n.code,{children:"Call"})," object and returns a string.  The ",(0,t.jsx)(n.code,{children:"Call"})," object will be passed automatically when the function is called, so you can use it to dynamically generate names based on the function's name, call inputs, fields, etc."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"One common use case is just appending a timestamp to the function's name."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'from datetime import datetime\n\n@weave.op(call_display_name=lambda call: f"{call.func_name}__{datetime.now()}")\ndef func():\n    return ...\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You can also log custom metadata using ",(0,t.jsx)(n.code,{children:".attributes"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'def custom_attribute_name(call):\n    model = call.attributes["model"]\n    revision = call.attributes["revision"]\n    now = call.attributes["date"]\n\n    return f"{model}__{revision}__{now}"\n\n@weave.op(call_display_name=custom_attribute_name)\ndef func():\n    return ...\n\nwith weave.attributes(\n    {\n        "model": "finetuned-llama-3.1-8b",\n        "revision": "v0.1.2",\n        "date": "2024-08-01",\n    }\n):\n    func()  # the display name will be "finetuned-llama-3.1-8b__v0.1.2__2024-08-01"\n\n\n    with weave.attributes(\n        {\n            "model": "finetuned-gpt-4o",\n            "revision": "v0.1.3",\n            "date": "2024-08-02",\n        }\n    ):\n        func()  # the display name will be "finetuned-gpt-4o__v0.1.3__2024-08-02"\n'})}),"\n"]}),"\n"]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Technical Note:"}),' "Calls" are produced by "Ops". An Op is a function or method that is decorated with ',(0,t.jsx)(n.code,{children:"@weave.op"}),".\nBy default, the Op's name is the function name, and the associated calls will have the same display name. The above example shows how to override the display name for all Calls of a given Op.  Sometimes, users wish to override the name of the Op itself. This can be achieved in one of two ways:"]}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Set the ",(0,t.jsx)(n.code,{children:"name"})," property of the Op before any calls are logged"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'my_function.name = "My Custom Op Name"\n'})}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Set the ",(0,t.jsx)(n.code,{children:"name"})," option on the op decorator"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'@weave.op(name="My Custom Op Name)\n'})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]}),"\n",(0,t.jsx)(n.h4,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsxs)(n.p,{children:["When calling tracked functions, you can add additional metadata to the call by using ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/#function-attributes",children:(0,t.jsx)(n.code,{children:"weave.attributes"})})," context manager. In the example below, we add an ",(0,t.jsx)(n.code,{children:"env"})," attribute to the call specified as ",(0,t.jsx)(n.code,{children:"'production'"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"# ... continued from above ...\n\n# Add additional attributes to the call\nwith weave.attributes({'env': 'production'}):\n    print(my_function.call(\"World\"))\n"})}),(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"call.attributes"})," cannot be modified once the call starts. Use this\ncontext manager to set any metadata before invoking the op."]})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]}),"\n",(0,t.jsx)(n.h4,{id:"trace-parallel-multi-threaded-function-calls",children:"Trace parallel (multi-threaded) function calls"}),"\n",(0,t.jsx)(i.Z,{groupId:"programming-language",children:(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsxs)(n.p,{children:["By default, parallel calls all show up in Weave as separate root calls. To get correct nesting under the same parent ",(0,t.jsx)(n.code,{children:"op"}),", use ",(0,t.jsx)(n.a,{href:"../../reference/python-sdk/weave/trace/weave.trace.util/#class-contextawarethreadpoolexecutor",children:(0,t.jsx)(n.code,{children:"ThreadPoolExecutor"})}),"."]}),(0,t.jsxs)(n.p,{children:["The following code sample demonstrates the use of ",(0,t.jsx)(n.code,{children:"ThreadPoolExecutor"}),".\nThe first function, ",(0,t.jsx)(n.code,{children:"func"}),", is a simple ",(0,t.jsx)(n.code,{children:"op"})," that takes ",(0,t.jsx)(n.code,{children:"x"})," and returns ",(0,t.jsx)(n.code,{children:"x+1"}),". The second function, ",(0,t.jsx)(n.code,{children:"outer"}),", is another ",(0,t.jsx)(n.code,{children:"op"})," that accepts a list of inputs.\nInside ",(0,t.jsx)(n.code,{children:"outer"}),", the use of ",(0,t.jsx)(n.code,{children:"ThreadPoolExecutor"})," and ",(0,t.jsx)(n.code,{children:"exc.map(func, inputs)"})," means that each call to ",(0,t.jsx)(n.code,{children:"func"})," still carries the same parent trace context."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import weave\n\n@weave.op\ndef func(x):\n    return x+1\n\n@weave.op\ndef outer(inputs):\n    with weave.ThreadPoolExecutor() as exc:\n        exc.map(func, inputs)\n\n# Update your Weave project name  \nclient = weave.init('my-weave-project')\nouter([1,2,3,4,5])\n"})}),(0,t.jsx)(n.p,{children:"In the Weave UI, this produces a single parent call with five nested child calls, so that you get a fully hierarchical trace even though the increments run in parallel."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"The Trace UI, showing a single parent call for outer, with five nested child calls.",src:a(15425).Z+"",width:"720",height:"418"})})]})}),"\n",(0,t.jsx)(n.h3,{id:"3-manual-call-tracking",children:"3. Manual Call tracking"}),"\n",(0,t.jsx)(n.p,{children:"You can also manually create Calls using the API directly."}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsx)(s.default,{value:"python",label:"Python",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize Weave Tracing\nclient = weave.init(\'intro-example\')\n\ndef my_function(name: str):\n    # Start a call\n    call = client.create_call(op="my_function", inputs={"name": name})\n\n    # ... your function code ...\n\n    # End a call\n    client.finish_call(call, output="Hello, World!")\n\n# Call your function\nprint(my_function("World"))\n'})})}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})}),(0,t.jsxs)(s.default,{value:"service_api",label:"HTTP API",children:[(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Start a call: ",(0,t.jsxs)(n.a,{href:"/reference/service-api/call-start-call-start-post",children:["POST ",(0,t.jsx)(n.code,{children:"/call/start"})]})]}),"\n",(0,t.jsxs)(n.li,{children:["End a call: ",(0,t.jsxs)(n.a,{href:"/reference/service-api/call-end-call-end-post",children:["POST ",(0,t.jsx)(n.code,{children:"/call/end"})]})]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -L \'https://trace.wandb.ai/call/start\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: application/json\' \\\n-d \'{\n    "start": {\n        "project_id": "string",\n        "id": "string",\n        "op_name": "string",\n        "display_name": "string",\n        "trace_id": "string",\n        "parent_id": "string",\n        "started_at": "2024-09-08T20:07:34.849Z",\n        "attributes": {},\n        "inputs": {},\n        "wb_run_id": "string"\n    }\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"4-track-class-and-object-methods",children:"4. Track class and object methods"}),"\n",(0,t.jsx)(n.p,{children:"You can also track class and object methods."}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,t.jsxs)(n.p,{children:["Track any method on a class using ",(0,t.jsx)(n.code,{children:"weave.op"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize Weave Tracing\nweave.init("intro-example")\n\nclass MyClass:\n    # Decorate your method\n    @weave.op\n    def my_method(self, name: str):\n        return f"Hello, {name}!"\n\ninstance = MyClass()\n\n# Call your method -- Weave will automatically track inputs and outputs\nprint(instance.my_method("World"))\n'})})]}),(0,t.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,t.jsxs)(n.admonition,{type:"important",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Using decorators in TypeScript"})}),(0,t.jsxs)(n.p,{children:["To use the ",(0,t.jsx)(n.code,{children:"@weave.op"})," decorator with your TypeScript code, make sure your environment is properly configured:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TypeScript v5.0 or newer"}),": Decorators are supported out of the box and no additional configuration is required."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TypeScript older than v5.0"}),": Enable experimental support for decorators. For more details, see the ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/decorators.html",children:"official TypeScript documentation on decorators"}),"."]}),"\n"]})]}),(0,t.jsx)(n.h4,{id:"decorate-a-class-method",children:"Decorate a class method"}),(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"@weave.op"})," to trace instance methods."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Foo {\n    @weave.op\n    async predict(prompt: string) {\n        return "bar"\n    }\n}\n'})}),(0,t.jsx)(n.h4,{id:"decorate-a-static-class-method",children:"Decorate a static class method"}),(0,t.jsxs)(n.p,{children:["Apply ",(0,t.jsx)(n.code,{children:"@weave.op"})," to static methods to monitor utility functions within a class."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class MathOps {\n    @weave.op\n    static square(n: number): number {\n        return n * n;\n    }\n}\n"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"viewing-calls",children:"Viewing Calls"}),"\n",(0,t.jsxs)(i.Z,{groupId:"programming-language",children:[(0,t.jsxs)(s.default,{value:"web_app",label:"Web App",children:[(0,t.jsx)(n.p,{children:"To view a call in the web app:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'Navigate to your project\'s "Traces" tab'}),"\n",(0,t.jsx)(n.li,{children:"Find the call you want to view in the list"}),"\n",(0,t.jsx)(n.li,{children:"Click on the call to open its details page"}),"\n"]}),(0,t.jsx)(n.p,{children:"The details page will show the call's inputs, outputs, runtime, and any additional metadata."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"View Call in Web App",src:a(61276).Z+"",width:"1920",height:"1080"})})]}),(0,t.jsxs)(s.default,{value:"python_sdk",label:"Python",children:[(0,t.jsxs)(n.p,{children:["To view a call using the Python API, you can use the ",(0,t.jsx)(n.a,{href:"../../reference/python-sdk/weave/trace/weave.trace.weave_client#method-get_call",children:(0,t.jsx)(n.code,{children:"get_call"})})," method:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import weave\n\n# Initialize the client\nclient = weave.init("your-project-name")\n\n# Get a specific call by its ID\ncall = client.get_call("call-uuid-here")\n\nprint(call)\n'})}),(0,t.jsxs)(n.h3,{id:"customize-rendered-traces-with-weavemarkdown",children:["Customize rendered traces with ",(0,t.jsx)(n.code,{children:"weave.Markdown"})]}),(0,t.jsxs)(n.p,{children:["Weave makes it easy to tailor how your traced operations are displayed without losing the original data.\nWith ",(0,t.jsx)(n.code,{children:"weave.Markdown"}),", you can render inputs and outputs as clean, readable blocks of formatted content while preserving the underlying structured data for programmatic access.\nUse ",(0,t.jsx)(n.code,{children:"postprocess_inputs"})," and ",(0,t.jsx)(n.code,{children:"postprocess_output"})," in your ",(0,t.jsx)(n.code,{children:"@weave.op"})," decorator to enhance trace readability."]}),(0,t.jsx)(n.p,{children:"The following code sample uses postprocessors to render a call in Weave to with emojis and nicer formatting:"}),(0,t.jsx)("pre",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import weave\n\ndef postprocess_inputs(query) -> weave.Markdown:\n    search_box = f"""\n\ud83d\udd0d **Search Query:**\n``+`\n{query}\n``+`\n"""\n    return {"search_box": weave.Markdown(search_box),\n            "query": query}\n\n\ndef postprocess_output(docs) -> weave.Markdown:\n    formatted_docs = f"""\n# \ud83d\udcf0 {docs[0]["title"]}\n\n{docs[0]["content"]}\n\n\ud83d\udd17 [Read more]({docs[0]["url"]})\n\n---\n\n# \ud83d\udcf0 {docs[1]["title"]}\n\n{docs[1]["content"]}\n\n\ud83d\udd17 [Read more]({docs[1]["url"]})\n"""\n    return weave.Markdown(formatted_docs)\n\n@weave.op(\n    postprocess_inputs=postprocess_inputs,\n    postprocess_output=postprocess_output,\n)\ndef rag_step(query):\n    # example newspaper articles of the companies on the S&P 500 \n    docs = [\n        {\n            "title": "OpenAI",\n            "content": "OpenAI is a company that makes AI models.",\n            "url": "https://www.openai.com",\n        },\n        {\n            "title": "Google",\n            "content": "Google is a company that makes search engines.",\n            "url": "https://www.google.com",\n        },\n    ]\n    return docs\n\nif __name__ == "__main__":\n    weave.init(\'markdown_renderers\')\n    rag_step("Tell me about OpenAI")\n'})})}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"A call rendered in the Weave UI using the code sample.",src:a(94409).Z+"",width:"720",height:"352"})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"import * as weave from 'weave'\n\n// Initialize the client\nconst client = await weave.init('intro-example')\n\n// Get a specific call by its ID\nconst call = await client.getCall('call-uuid-here')\n\nconsole.log(call)\n"})})}),(0,t.jsxs)(s.default,{value:"service_api",label:"HTTP API",children:[(0,t.jsxs)(n.p,{children:["To view a call using the Service API, you can make a request to the ",(0,t.jsx)(n.a,{href:"/reference/service-api/call-read-call-read-post",children:(0,t.jsx)(n.code,{children:"/call/read"})})," endpoint."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -L 'https://trace.wandb.ai/call/read' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-d '{\n    \"project_id\": \"string\",\n    \"id\": \"string\",\n}'\n"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"updating-calls",children:"Updating Calls"}),"\n",(0,t.jsx)(n.p,{children:"Calls are mostly immutable once created, however, there are a few mutations which are supported:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#set-display-name",children:"Set Display Name"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#add-feedback",children:"Add Feedback"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#delete-a-call",children:"Delete a Call"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"All of these mutations can be performed from the UI by navigating to the call detail page:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Update Call in Web App",src:a(42658).Z+"",width:"2078",height:"1124"})}),"\n",(0,t.jsx)(n.h3,{id:"set-display-name",children:"Set display name"}),"\n",(0,t.jsxs)(i.Z,{groupId:"client-layer",children:[(0,t.jsxs)(s.default,{value:"python_sdk",label:"Python",children:[(0,t.jsxs)(n.p,{children:["In order to set the display name of a call, you can use the ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/trace/weave.trace.weave_client#method-set_display_name",children:(0,t.jsx)(n.code,{children:"Call.set_display_name"})})," method."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize the client\nclient = weave.init("your-project-name")\n\n# Get a specific call by its ID\ncall = client.get_call("call-uuid-here")\n\n# Set the display name of the call\ncall.set_display_name("My Custom Display Name")\n'})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})}),(0,t.jsxs)(s.default,{value:"service_api",label:"HTTP API",children:[(0,t.jsxs)(n.p,{children:["To set the display name of a call using the Service API, you can make a request to the ",(0,t.jsx)(n.a,{href:"/reference/service-api/call-update-call-update-post",children:(0,t.jsx)(n.code,{children:"/call/update"})})," endpoint."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -L \'https://trace.wandb.ai/call/update\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: application/json\' \\\n-d \'{\n    "project_id": "string",\n    "call_id": "string",\n    "display_name": "string",\n}\'\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"add-feedback",children:"Add feedback"}),"\n",(0,t.jsxs)(n.p,{children:["Please see the ",(0,t.jsx)(n.a,{href:"/guides/tracking/feedback",children:"Feedback Documentation"})," for more details."]}),"\n",(0,t.jsx)(n.h3,{id:"delete-a-call",children:"Delete a Call"}),"\n",(0,t.jsxs)(i.Z,{groupId:"client-layer",children:[(0,t.jsxs)(s.default,{value:"python_sdk",label:"Python",children:[(0,t.jsxs)(n.p,{children:["To delete a Call using the Python API, you can use the ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/trace/weave.trace.weave_client#method-delete",children:(0,t.jsx)(n.code,{children:"Call.delete"})})," method."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize the client\nclient = weave.init("your-project-name")\n\n# Get a specific call by its ID\ncall = client.get_call("call-uuid-here")\n\n# Delete the call\ncall.delete()\n'})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})}),(0,t.jsxs)(s.default,{value:"service_api",label:"HTTP API",children:[(0,t.jsxs)(n.p,{children:["To delete a call using the Service API, you can make a request to the ",(0,t.jsx)(n.a,{href:"/reference/service-api/calls-delete-calls-delete-post",children:(0,t.jsx)(n.code,{children:"/calls/delete"})})," endpoint."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -L 'https://trace.wandb.ai/calls/delete' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-d '{\n    \"project_id\": \"string\",\n    \"call_ids\": [\n        \"string\"\n    ],\n}'\n"})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"delete-multiple-calls",children:"Delete multiple Calls"}),"\n",(0,t.jsxs)(i.Z,{groupId:"client-layer",children:[(0,t.jsxs)(s.default,{value:"python_sdk",label:"Python",children:[(0,t.jsxs)(n.p,{children:["To delete batches of Calls using the Python API, pass a list of Call IDs to ",(0,t.jsx)(n.code,{children:"delete_calls()"}),"."]}),(0,t.jsx)(n.admonition,{type:"important",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The maximum amount of Calls that can be deleted is ",(0,t.jsx)(n.code,{children:"1000"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Deleting a Call also deletes all of its children."}),"\n"]})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import weave\n\n# Initialize the client\nclient = weave.init("my-project")\n\n# Get all calls from client \nall_calls = client.get_calls()\n\n# Get list of first 1000 Call objects\nfirst_1000_calls = all_calls[:1000]\n\n# Get list of first 1000 Call IDs\nfirst_1000_calls_ids = [c.id for c in first_1000_calls]\n\n# Delete first 1000 Call objects by ID\nclient.delete_calls(call_ids=first_1000_calls_ids)\n'})})]}),(0,t.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"querying-and-exporting-calls",children:"Querying and exporting Calls"}),"\n",(0,t.jsx)(g,{images:[y],alt:"Screenshot of many calls",title:"Weave Calls"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"/calls"}),' page of your project ("Traces" tab) contains a table view of all the Calls in your project. From there, you can:']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sort"}),"\n",(0,t.jsx)(n.li,{children:"Filter"}),"\n",(0,t.jsx)(n.li,{children:"Export"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Calls Table View",src:a(64850).Z+"",width:"1704",height:"1564"})}),"\n",(0,t.jsx)(n.p,{children:"The Export Modal (shown above) allows you to export your data in a number of formats, as well as shows the Python & CURL equivalents for the selected calls!\nThe easiest way to get started is to construct a view in the UI, then learn more about the export API via the generated code snippets."}),"\n",(0,t.jsxs)(i.Z,{groupId:"client-layer",children:[(0,t.jsxs)(s.default,{value:"python_sdk",label:"Python",children:[(0,t.jsxs)(n.p,{children:["To fetch calls using the Python API, you can use the ",(0,t.jsx)(n.a,{href:"/reference/python-sdk/weave/trace/weave.trace.weave_client#method-get_calls",children:(0,t.jsx)(n.code,{children:"client.get_calls"})})," method:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import weave\n\n# Initialize the client\nclient = weave.init("your-project-name")\n\n# Fetch calls\ncalls = client.get_calls(filter=...)\n'})})]}),(0,t.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,t.jsxs)(n.p,{children:["To fetch calls using the TypeScript API, you can use the ",(0,t.jsx)(n.a,{href:"../../reference/typescript-sdk/weave/classes/WeaveClient#getcalls",children:(0,t.jsx)(n.code,{children:"client.getCalls"})})," method."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import * as weave from 'weave'\n\n// Initialize the client\nconst client = await weave.init('intro-example')\n\n// Fetch calls\nconst calls = await client.getCalls(filter=...)\n"})})]}),(0,t.jsxs)(s.default,{value:"service_api",label:"HTTP API",children:[(0,t.jsxs)(n.p,{children:["The most powerful query layer is at the Service API. To fetch calls using the Service API, you can make a request to the ",(0,t.jsx)(n.a,{href:"/reference/service-api/calls-query-stream-calls-stream-query-post",children:(0,t.jsx)(n.code,{children:"/calls/stream_query"})})," endpoint."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -L \'https://trace.wandb.ai/calls/stream_query\' \\\n-H \'Content-Type: application/json\' \\\n-H \'Accept: application/json\' \\\n-d \'{\n"project_id": "string",\n"filter": {\n    "op_names": [\n        "string"\n    ],\n    "input_refs": [\n        "string"\n    ],\n    "output_refs": [\n        "string"\n    ],\n    "parent_ids": [\n        "string"\n    ],\n    "trace_ids": [\n        "string"\n    ],\n    "call_ids": [\n        "string"\n    ],\n    "trace_roots_only": true,\n    "wb_user_ids": [\n        "string"\n    ],\n    "wb_run_ids": [\n        "string"\n    ]\n},\n"limit": 100,\n"offset": 0,\n"sort_by": [\n    {\n    "field": "string",\n    "direction": "asc"\n    }\n],\n"query": {\n    "$expr": {}\n},\n"include_costs": true,\n"include_feedback": true,\n"columns": [\n    "string"\n],\n"expand_columns": [\n    "string"\n]\n}\'\n'})})]})]}),"\n","\n",(0,t.jsx)(n.h3,{id:"call-schema",children:"Call schema"}),"\n",(0,t.jsxs)(n.p,{children:["Please see the ",(0,t.jsx)(n.a,{href:"../../reference/python-sdk/weave/trace_server/weave.trace_server.trace_server_interface#class-callschema",children:"schema"})," for a complete list of fields."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"id"}),(0,t.jsx)(n.td,{children:"string (uuid)"}),(0,t.jsx)(n.td,{children:"Unique identifier for the call"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"project_id"}),(0,t.jsx)(n.td,{children:"string (optional)"}),(0,t.jsx)(n.td,{children:"Associated project identifier"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"op_name"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Name of the operation (can be a reference)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"display_name"}),(0,t.jsx)(n.td,{children:"string (optional)"}),(0,t.jsx)(n.td,{children:"User-friendly name for the call"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"trace_id"}),(0,t.jsx)(n.td,{children:"string (uuid)"}),(0,t.jsx)(n.td,{children:"Identifier for the trace this call belongs to"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"parent_id"}),(0,t.jsx)(n.td,{children:"string (uuid)"}),(0,t.jsx)(n.td,{children:"Identifier of the parent call"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"started_at"}),(0,t.jsx)(n.td,{children:"datetime"}),(0,t.jsx)(n.td,{children:"Timestamp when the call started"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"attributes"}),(0,t.jsx)(n.td,{children:"Dict[str, Any]"}),(0,t.jsxs)(n.td,{children:["User-defined metadata about the call ",(0,t.jsx)(n.em,{children:"(read-only during execution)"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"inputs"}),(0,t.jsx)(n.td,{children:"Dict[str, Any]"}),(0,t.jsx)(n.td,{children:"Input parameters for the call"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ended_at"}),(0,t.jsx)(n.td,{children:"datetime (optional)"}),(0,t.jsx)(n.td,{children:"Timestamp when the call ended"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"exception"}),(0,t.jsx)(n.td,{children:"string (optional)"}),(0,t.jsx)(n.td,{children:"Error message if the call failed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"output"}),(0,t.jsx)(n.td,{children:"Any (optional)"}),(0,t.jsx)(n.td,{children:"Result of the call"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"summary"}),(0,t.jsx)(n.td,{children:"Optional[SummaryMap]"}),(0,t.jsx)(n.td,{children:"Post-execution summary information. You can modify this during execution to record custom metrics."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"wb_user_id"}),(0,t.jsx)(n.td,{children:"Optional[str]"}),(0,t.jsx)(n.td,{children:"Associated Weights & Biases user ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"wb_run_id"}),(0,t.jsx)(n.td,{children:"Optional[str]"}),(0,t.jsx)(n.td,{children:"Associated Weights & Biases run ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"deleted_at"}),(0,t.jsx)(n.td,{children:"datetime (optional)"}),(0,t.jsx)(n.td,{children:"Timestamp of call deletion, if applicable"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"The table above outlines the key properties of a Call in Weave. Each property plays a crucial role in tracking and managing function calls:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"id"}),", ",(0,t.jsx)(n.code,{children:"trace_id"}),", and ",(0,t.jsx)(n.code,{children:"parent_id"})," fields help in organizing and relating calls within the system."]}),"\n",(0,t.jsxs)(n.li,{children:["Timing information (",(0,t.jsx)(n.code,{children:"started_at"}),", ",(0,t.jsx)(n.code,{children:"ended_at"}),") allows for performance analysis."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"attributes"})," and ",(0,t.jsx)(n.code,{children:"inputs"})," fields provide context for the call. Attributes are frozen once the call starts, so set them before invocation with ",(0,t.jsx)(n.code,{children:"weave.attributes"}),". ",(0,t.jsx)(n.code,{children:"output"})," and ",(0,t.jsx)(n.code,{children:"summary"})," capture the results, and you can update ",(0,t.jsx)(n.code,{children:"summary"})," during execution to log additional metrics."]}),"\n",(0,t.jsxs)(n.li,{children:["Integration with Weights & Biases is facilitated through ",(0,t.jsx)(n.code,{children:"wb_user_id"})," and ",(0,t.jsx)(n.code,{children:"wb_run_id"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This comprehensive set of properties enables detailed tracking and analysis of function calls throughout your project."}),"\n",(0,t.jsx)(n.p,{children:"Calculated Fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cost"}),"\n",(0,t.jsx)(n.li,{children:"Duration"}),"\n",(0,t.jsx)(n.li,{children:"Status"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"saved-views",children:"Saved views"}),"\n",(0,t.jsxs)(n.p,{children:["You can save your Trace table configurations, filters, and sorts as ",(0,t.jsx)(n.em,{children:"saved views"})," for quick access to your preferred setup. You can configure and access saved views via the UI and the Python SDK. For more information, see ",(0,t.jsx)(n.a,{href:"/guides/tools/saved-views",children:"Saved Views"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"view-a-wb-run-in-the-traces-table",children:"View a W&B run in the Traces table"}),"\n",(0,t.jsxs)(n.p,{children:["With Weave, you can trace function calls in your code and link them directly to the ",(0,t.jsx)(n.a,{href:"https://docs.wandb.ai/guides/runs/",children:"W&B runs"})," in which they were executed.\nWhen you trace a function with @weave.op() and call it inside a wandb.init() context, Weave automatically associates the trace with the W&B run.\nLinks to any associated runs are shown in the Traces table."]}),"\n",(0,t.jsx)(n.h3,{id:"python-example",children:"Python example"}),"\n",(0,t.jsxs)(n.p,{children:["The following Python code shows how traced operations are linked to W&B\nruns when executed inside a ",(0,t.jsx)(n.code,{children:"wandb.init()"})," context. These traces appear in the\nWeave UI and are associated with the corresponding run."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import wandb\nimport weave\n\ndef example_wandb(projname):\n    # Split projname into entity and project\n    entity, project = projname.split("/", 1)\n\n    # Initialize Weave context for tracing\n    weave.init(projname)\n\n    # Define a traceable operation\n    @weave.op()\n    def say(message: str) -> str:\n        return f"I said: {message}"\n\n    # First W&B run\n    with wandb.init(\n        entity=entity,\n        project=project,\n        notes="Experiment 1",\n        tags=["baseline", "paper1"],\n    ) as run:\n        say("Hello, world!")\n        say("How are you!")\n        run.log({"messages": 2})\n\n    # Second W&B run\n    with wandb.init(\n        entity=entity,\n        project=project,\n        notes="Experiment 2",\n        tags=["baseline", "paper1"],\n    ) as run:\n        say("Hello, world from experiment 2!")\n        say("How are you!")\n        run.log({"messages": 2})\n\n\nif __name__ == "__main__":\n    # Replace this with your actual W&B username/project\n    example_wandb("your-username/your-project")\n'})}),"\n",(0,t.jsx)(n.p,{children:"To use the code sample:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"In the terminal, install dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install wandb weave\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to W&B:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"wandb login\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the script, replace ",(0,t.jsx)(n.code,{children:"your-username/your-project"})," with your actual W&B entity/project."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python weave_trace_with_wandb.py\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Visit ",(0,t.jsx)(n.a,{href:"https://weave.wandb.ai",children:"https://weave.wandb.ai"})," and select your project."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.strong,{children:"Traces"})," tab, view the trace output. Links to any associated runs are shown in the Traces table."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configure-autopatching",children:"Configure autopatching"}),"\n",(0,t.jsxs)(n.p,{children:["By default, Weave automatically patches and tracks calls to common LLM libraries like ",(0,t.jsx)(n.code,{children:"openai"}),", ",(0,t.jsx)(n.code,{children:"anthropic"}),", ",(0,t.jsx)(n.code,{children:"cohere"}),", and ",(0,t.jsx)(n.code,{children:"mistral"}),".\nYou can control this behavior using the ",(0,t.jsx)(n.code,{children:"autopatch_settings"})," argument in ",(0,t.jsx)(n.code,{children:"weave.init"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"disable-all-autopatching",children:"Disable all autopatching"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'weave.init(..., autopatch_settings={"disable_autopatch": True})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"disable-a-specific-integration",children:"Disable a specific integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'weave.init(..., autopatch_settings={"openai": {"enabled": False}})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"post-process-inputs-and-outputs",children:"Post-process inputs and outputs"}),"\n",(0,t.jsx)(n.p,{children:"You can also customize how post-process inputs and outputs (e.g. for PII data) are handled during autopatching:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'def redact_inputs(inputs: dict) -> dict:\n    if "email" in inputs:\n        inputs["email"] = "[REDACTED]"\n    return inputs\n\nweave.init(\n    ...,\n    autopatch_settings={\n        "openai": {\n            "op_settings": {\n                "postprocess_inputs": redact_inputs,\n            }\n        }\n    }\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"/reference/gen_notebooks/pii",children:"How to use Weave with PII data"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"faqs",children:"FAQs"}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-stop-large-traces-from-being-truncated",children:"How do I stop large traces from being truncated?"}),"\n",(0,t.jsxs)(n.p,{children:["For more information, see ",(0,t.jsx)(n.a,{href:"/guides/troubleshooting#trace-data-is-truncated",children:"Trace data is truncated"})," in the ",(0,t.jsx)(n.a,{href:"/guides/troubleshooting",children:"Troubleshooting guide"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-disable-tracing",children:"How do I disable tracing?"}),"\n",(0,t.jsx)(n.h4,{id:"environment-variable",children:"Environment variable"}),"\n",(0,t.jsxs)(n.p,{children:["In situations where you want to unconditionally disable tracing for the entire program, you can set the environment variable ",(0,t.jsx)(n.code,{children:"WEAVE_DISABLED=true"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"client-initialization",children:"Client initialization"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, you may want to conditionally enable tracing for a specific initialization based on some condition. In this case, you can initialize the client with the ",(0,t.jsx)(n.code,{children:"disabled"})," flag in init settings."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import weave\n\n# Initialize the client\nclient = weave.init(..., settings={"disabled": True})\n'})}),"\n",(0,t.jsx)(n.h4,{id:"context-manager",children:"Context manager"}),"\n",(0,t.jsxs)(n.p,{children:["Finally, you may want to conditionally disable tracing for a single function based on some application logic. In this case, you can use the context manager ",(0,t.jsx)(n.code,{children:"with set_tracing_enabled(False)"})," which can be imported from ",(0,t.jsx)(n.code,{children:"weave.trace.context.call_context"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave.trace.context.call_context import set_tracing_enabled\n\nclient = weave.init(...)\n\n@weave.op\ndef my_op():\n    ...\n\nwith set_tracing_enabled(False):\n    my_op()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-capture-information-about-a-call",children:"How do I capture information about a Call?"}),"\n",(0,t.jsx)(n.p,{children:"Typically you would call an op directly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@weave.op\ndef my_op():\n    ...\n\nmy_op()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, you can also get access to the call object directly by invoking the ",(0,t.jsx)(n.code,{children:"call"})," method on the op:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@weave.op\ndef my_op():\n    ...\n\noutput, call = my_op.call()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["From here, the ",(0,t.jsx)(n.code,{children:"call"})," object will have all the information about the call, including the inputs, outputs, and other metadata."]})]})}function N(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(I,{...e})}):I(e)}},85162:(e,n,a)=>{a.r(n),a.d(n,{default:()=>s});a(67294);var t=a(90512);const l={tabItem:"tabItem_Ymn6"};var i=a(85893);function s(e){let{children:n,hidden:a,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.Z)(l.tabItem,s),hidden:a,children:n})}},65488:(e,n,a)=>{a.d(n,{Z:()=>p});var t=a(67294),l=a(90512),i=a(12466),s=a(70989),r=a(72389);const c={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var o=a(85893);function d(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:r}=e;const d=[],{blockElementScrollPositionUntilNextRender:h}=(0,i.o5)(),u=e=>{const n=e.currentTarget,a=d.indexOf(n),l=r[a].value;l!==t&&(h(n),s(l))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;n=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;n=d[a]??d[d.length-1];break}}n?.focus()};return(0,o.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},n),children:r.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,o.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>d.push(e),onKeyDown:p,onClick:u,...i,className:(0,l.Z)("tabs__item",c.tabItem,i?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function h(e){let{lazy:n,children:a,selectedValue:l}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,o.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function u(e){const n=(0,s.Y)(e);return(0,o.jsxs)("div",{className:(0,l.Z)("tabs-container",c.tabList),children:[(0,o.jsx)(d,{...n,...e}),(0,o.jsx)(h,{...n,...e})]})}function p(e){const n=(0,r.default)();return(0,o.jsx)(u,{...e,children:(0,s.h)(e.children)},String(n))}},70989:(e,n,a)=>{a.d(n,{Y:()=>p,h:()=>o});var t=a(67294),l=a(16550),i=a(20469),s=a(91980),r=a(67392),c=a(20812);function o(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return o(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:l}}=e;return{value:n,label:a,attributes:t,default:l}}))}(a);return function(e){const n=(0,r.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function h(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:a}=e;const i=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,s._X)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function p(e){const{defaultValue:n,queryString:a=!1,groupId:l}=e,s=d(e),[r,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[p,m]=u({queryString:a,groupId:l}),[x,j]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,i]=(0,c.Nk)(a);return[l,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:l}),g=(()=>{const e=p??x;return h({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{g&&o(g)}),[g]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),j(e)}),[m,j,s]),tabValues:s}}},1883:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/generators-cb815d893d8a950e4381ef85da31d0c6.png"},94409:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/md-call-render-2a650cd5bd3a98476288935b8da266aa.png"},15425:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/threadpoolexecutor-6217cc7469acb7a32dc110381f50e327.png"},42658:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/call_edit_screenshot-25b3fd31442a05c01d4353e34691c54f.png"},64850:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/export_modal-384848a4ad889fe98e1f64566c792d76.png"},61276:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/basic_call-bc1a430056991b62cfb8946b4b121929.png"},11151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>s});var t=a(67294);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
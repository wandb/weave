"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3374],{33106:(e,t,n)=>{n.d(t,{ZP:()=>c,d$:()=>r});var o=n(85893);const i="[User Settings](https://docs.wandb.ai/guides/models/app/settings-page/user-settings/#default-team)",a="To find or update your default entity, refer to";const s=function({variant:e="full"}){return"inline"===e?(0,o.jsxs)(o.Fragment,{children:["If not specified, your default entity is used. ",a," ",i," in the W&B Models documentation."]}):(0,o.jsxs)(o.Fragment,{children:["If you don't specify a W&B team when you call `weave.init()`, your default entity is used. ",a," ",i," in the W&B Models documentation."]})},r=[];function l(e){return(0,o.jsx)(o.Fragment,{})}function c(e={}){return(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})})}},23612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var o=n(85893),i=n(11151),a=n(33106);const s={},r="Google",l={id:"guides/integrations/google",title:"Google",description:"For the latest tutorials, visit Weights & Biases on Google Cloud.",source:"@site/docs/guides/integrations/google.md",sourceDirName:"guides/integrations",slug:"/guides/integrations/google",permalink:"/guides/integrations/google",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/integrations/google.md",tags:[],version:"current",lastUpdatedAt:1759434814e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Cohere",permalink:"/guides/integrations/cohere"},next:{title:"Groq",permalink:"/guides/integrations/groq"}},c={},d=[{value:"Get started",id:"get-started",level:2},{value:"Track your own ops",id:"track-your-own-ops",level:2},{value:"Create a <code>Model</code> for easier experimentation",id:"create-a-model-for-easier-experimentation",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"google",children:"Google"}),"\n","\n",(0,o.jsx)("a",{target:"_blank",href:"https://github.com/wandb/examples/blob/master/weave/docs/quickstart_google.ipynb",children:(0,o.jsx)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["For the latest tutorials, visit ",(0,o.jsx)(t.a,{href:"https://wandb.ai/site/partners/googlecloud/",children:"Weights & Biases on Google Cloud"}),"."]})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["Do you want to experiment with Google AI models on Weave without any set up? Try the ",(0,o.jsx)(t.a,{href:"/guides/tools/playground",children:"LLM Playground"}),"."]})}),"\n",(0,o.jsx)(t.p,{children:"This page describes how to use W&B Weave with the Google Vertex AI API and the Google Gemini API."}),"\n",(0,o.jsx)(t.p,{children:"You can use Weave to evaluate, monitor, and iterate on your Google GenAI applications. Weave automatically captures traces for the:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://github.com/googleapis/python-genai",children:"Google GenAI SDK"}),", which is accessible via Python SDK, Node.js SDK, Go SDK, and REST."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://cloud.google.com/vertex-ai/docs",children:"Google Vertex AI API"}),", which provides access to Google\u2019s Gemini models and ",(0,o.jsx)(t.a,{href:"https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models/use-partner-models",children:"various partner models"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["We also have support for the deprecated ",(0,o.jsx)(t.a,{href:"https://github.com/google-gemini/deprecated-generative-ai-python",children:"Google AI Python SDK for the Gemini API"}),". Note that this support is deprecated as well and will be removed in a future version."]})}),"\n",(0,o.jsx)(t.h2,{id:"get-started",children:"Get started"}),"\n",(0,o.jsxs)(t.p,{children:["Weave will automatically capture traces for ",(0,o.jsx)(t.a,{href:"https://github.com/googleapis/python-genai",children:"Google GenAI SDK"}),". To start tracking, call ",(0,o.jsx)(t.code,{children:'weave.init(project_name="<YOUR-WANDB-PROJECT-NAME>")'})," and use the library as normal. ",(0,o.jsx)(a.ZP,{}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import os\nfrom google import genai\nimport weave\n\nweave.init(project_name="google-genai")\n\ngoogle_client = genai.Client(api_key=os.getenv("GOOGLE_GENAI_KEY"))\nresponse = google_client.models.generate_content(\n    model="gemini-2.0-flash",\n    contents="What\'s the capital of France?",\n)\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://wandb.ai/geekyrakshit/google-genai/weave/traces",children:(0,o.jsx)(t.img,{alt:"dspy_trace.png",src:n(92307).Z+"",width:"3452",height:"1866"})})}),"\n",(0,o.jsxs)(t.p,{children:["Weave will also automatically capture traces for ",(0,o.jsx)(t.a,{href:"https://github.com/googleapis/python-aiplatform/tree/main/vertexai/generative_models",children:"Vertex APIs"}),". To start tracking, call ",(0,o.jsx)(t.code,{children:'weave.init(project_name="<YOUR-WANDB-PROJECT-NAME>")'})," and use the library as normal."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import vertexai\nimport weave\nfrom vertexai.generative_models import GenerativeModel\n\nweave.init(project_name="vertex-ai-test")\nvertexai.init(project="<YOUR-VERTEXAIPROJECT-NAME>", location="<YOUR-VERTEXAI-PROJECT-LOCATION>")\nmodel = GenerativeModel("gemini-1.5-flash-002")\nresponse = model.generate_content(\n    "What\'s a good name for a flower shop specialising in selling dried flower bouquets?"\n)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"track-your-own-ops",children:"Track your own ops"}),"\n",(0,o.jsxs)(t.p,{children:["Wrapping a function with ",(0,o.jsx)(t.code,{children:"@weave.op"})," starts capturing inputs, outputs and app logic so you can debug how data flows through your app. You can deeply nest ops and build a tree of functions that you want to track. This also starts automatically versioning code as you experiment to capture ad-hoc details that haven't been committed to git."]}),"\n",(0,o.jsxs)(t.p,{children:["Simply create a function decorated with ",(0,o.jsx)(t.a,{href:"/guides/tracking/ops",children:(0,o.jsx)(t.code,{children:"@weave.op"})}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["In the example below, we have the function ",(0,o.jsx)(t.code,{children:"recommend_places_to_visit"})," which is a function wrapped with ",(0,o.jsx)(t.code,{children:"@weave.op"})," that recommends places to visit in a city."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import os\nfrom google import genai\nimport weave\n\nweave.init(project_name="google-genai")\ngoogle_client = genai.Client(api_key=os.getenv("GOOGLE_GENAI_KEY"))\n\n\n@weave.op()\ndef recommend_places_to_visit(city: str, model: str = "gemini-1.5-flash"):\n    response = google_client.models.generate_content(\n        model=model,\n        contents="You are a helpful assistant meant to suggest all budget-friendly places to visit in a city",\n    )\n    return response.text\n\n\nrecommend_places_to_visit("New York")\nrecommend_places_to_visit("Paris")\nrecommend_places_to_visit("Kolkata")\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://wandb.ai/geekyrakshit/google-genai/weave/traces",children:(0,o.jsx)(t.img,{alt:"dspy_trace.png",src:n(55885).Z+"",width:"3452",height:"1866"})})}),"\n",(0,o.jsxs)(t.h2,{id:"create-a-model-for-easier-experimentation",children:["Create a ",(0,o.jsx)(t.code,{children:"Model"})," for easier experimentation"]}),"\n",(0,o.jsxs)(t.p,{children:["Organizing experimentation is difficult when there are many moving pieces. By using the ",(0,o.jsx)(t.a,{href:"../core-types/models",children:(0,o.jsx)(t.code,{children:"Model"})})," class, you can capture and organize the experimental details of your app like your system prompt or the model you're using. This helps organize and compare different iterations of your app."]}),"\n",(0,o.jsxs)(t.p,{children:["In addition to versioning code and capturing inputs/outputs, ",(0,o.jsx)(t.a,{href:"../core-types/models",children:(0,o.jsx)(t.code,{children:"Model"})}),"s capture structured parameters that control your application\u2019s behavior, making it easy to find what parameters worked best. You can also use Weave Models with ",(0,o.jsx)(t.code,{children:"serve"}),", and ",(0,o.jsx)(t.a,{href:"/guides/core-types/evaluations",children:(0,o.jsx)(t.code,{children:"Evaluation"})}),"s."]}),"\n",(0,o.jsxs)(t.p,{children:["In the example below, you can experiment with ",(0,o.jsx)(t.code,{children:"CityVisitRecommender"}),". Every time you change one of these, you'll get a new ",(0,o.jsx)(t.em,{children:"version"})," of ",(0,o.jsx)(t.code,{children:"CityVisitRecommender"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import os\nfrom google import genai\nimport weave\n\nweave.init(project_name="google-genai")\ngoogle_client = genai.Client(api_key=os.getenv("GOOGLE_GENAI_KEY"))\n\n\nclass CityVisitRecommender(weave.Model):\n    model: str\n\n    @weave.op()\n    def predict(self, city: str) -> str:\n        response = google_client.models.generate_content(\n            model=self.model,\n            contents="You are a helpful assistant meant to suggest all budget-friendly places to visit in a city",\n        )\n        return response.text\n\n\ncity_recommender = CityVisitRecommender(model="gemini-1.5-flash")\nprint(city_recommender.predict("New York"))\nprint(city_recommender.predict("San Francisco"))\nprint(city_recommender.predict("Los Angeles"))\n'})})]})}function g(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},55885:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/google-genai-ops-a3d698db3978c91cf92d6523257ed813.png"},92307:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/google-genai-trace-8c80c17b61030cf02c7ea3d16ff1c79c.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var o=n(67294);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);
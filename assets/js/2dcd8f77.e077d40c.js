"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6408],{84342:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var n=a(85893),i=a(11151);const r={},s="Navigate the Trace View",c={id:"guides/tracking/trace-tree",title:"Navigate the Trace View",description:"The Weave Trace view is designed to help you make sense of complex execution paths in your LLM and agentic apps. Whether you're debugging an agentic app with dozens of nested calls, or tracking the flow of a single model prediction, the Trace view provides a clear breakdown, while also providing alternate ways to view and understand your application flow.",source:"@site/docs/guides/tracking/trace-tree.md",sourceDirName:"guides/tracking",slug:"/guides/tracking/trace-tree",permalink:"/guides/tracking/trace-tree",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/tracking/trace-tree.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Compare Traces",permalink:"/guides/tools/comparison"},next:{title:"Send OpenTelemetry Traces",permalink:"/guides/tracking/otel"}},l={},o=[{value:"Get started",id:"get-started",level:2},{value:"Traces page overview",id:"traces-page-overview",level:2},{value:"Trace view navigation",id:"trace-view-navigation",level:2},{value:"Filter and search",id:"filter-and-search",level:3},{value:"Scrubbers and contextual navigation",id:"scrubbers-and-contextual-navigation",level:3},{value:"Alternate trace tree views",id:"alternate-trace-tree-views",level:3},{value:"Traces (default)",id:"traces-default",level:4},{value:"Code view",id:"code-view",level:4},{value:"Flame graph",id:"flame-graph",level:4},{value:"Graph view",id:"graph-view",level:4},{value:"Usage tips and tricks",id:"usage-tips-and-tricks",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"navigate-the-trace-view",children:"Navigate the Trace View"}),"\n",(0,n.jsx)(t.p,{children:"The Weave Trace view is designed to help you make sense of complex execution paths in your LLM and agentic apps. Whether you're debugging an agentic app with dozens of nested calls, or tracking the flow of a single model prediction, the Trace view provides a clear breakdown, while also providing alternate ways to view and understand your application flow."}),"\n",(0,n.jsx)(t.p,{children:"This guide describes how to move through the trace stack, filter and search for ops, switch between visual representations, and more."}),"\n",(0,n.jsx)(t.h2,{id:"get-started",children:"Get started"}),"\n",(0,n.jsx)(t.p,{children:"To enter the Trace view:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Navigate to the ",(0,n.jsx)(t.strong,{children:"Traces"})," tab."]}),"\n",(0,n.jsx)(t.li,{children:"Click on any trace to open the Trace view. The Trace view pops out and displays a hierarchical breakdown of the trace execution."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"traces-page-overview",children:"Traces page overview"}),"\n",(0,n.jsx)(t.p,{children:"The Traces page is composed of three core panels:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Left sidebar"}),": A sortable, paginated list of all trace runs for the project."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Center panel"}),": Interactive ",(0,n.jsx)(t.a,{href:"#trace-view-navigation",children:"trace view"})," showing the stack and ops hierarchy for a selected trace."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Right panel"}),": Detailed view for a selected op (Call, Code, Feedback, Scores, Summary, Use)."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Trace page panels",src:a(9163).Z+"",width:"2998",height:"1320"})}),"\n",(0,n.jsx)(t.h2,{id:"trace-view-navigation",children:"Trace view navigation"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Breadcrumbs"}),": At the top of the center panel, navigate up and down the trace stack via the breadcrumb trail."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Stack arrows"}),": Use the ",(0,n.jsx)(t.code,{children:"\u2191"})," and ",(0,n.jsx)(t.code,{children:"\u2193"})," buttons to move up and down the stack."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Double-click"}),": Double-click on an op to focus the view exclusively on that substack."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:'"Jump to Top" Button'}),": Return to the root of the trace stack."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"filter-and-search",children:"Filter and search"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Filter an op by name"}),": Use the input bar above the trace tree to search for ops of a specific type (e.g., ",(0,n.jsx)(t.code,{children:"tool"}),", ",(0,n.jsx)(t.code,{children:"openai.response.create"}),")."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Filter persistence"}),": Selecting ops across traces retains the sub-path context for easier comparison."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Filter an op by name",src:a(18244).Z+"",width:"796",height:"822"})}),"\n",(0,n.jsx)(t.h3,{id:"scrubbers-and-contextual-navigation",children:"Scrubbers and contextual navigation"}),"\n",(0,n.jsx)(t.p,{children:"The panel below the tree includes multiple scrubbers for navigating across calls:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Timeline"}),": Chronological order of events."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Peers"}),": Ops sharing the same type."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Siblings"}),": Ops with the same parent."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Stack"}),": Traverse up/down the call stack."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["To view the available scrubbers, click the ",(0,n.jsx)(t.strong,{children:"^"})," button at the bottom of the panel."]}),"\n",(0,n.jsxs)(t.p,{children:["Each scrubber has a slider and ",(0,n.jsx)(t.strong,{children:">"})," jump buttons to move step-by-step."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Trace panel scrubbers",src:a(36006).Z+"",width:"796",height:"1342"})}),"\n",(0,n.jsx)(t.h3,{id:"alternate-trace-tree-views",children:"Alternate trace tree views"}),"\n",(0,n.jsx)(t.p,{children:"You can switch between multiple visual representations of the trace tree depending on your needs. To switch to an alternate trace view, click one of available options (default trace view, code composition, flame graph, graph view) in the upper right corner"}),"\n",(0,n.jsx)(t.h4,{id:"traces-default",children:"Traces (default)"}),"\n",(0,n.jsx)(t.p,{children:"The default view showing, stack hierarchy, cost per op, execution time, and status indicators."}),"\n",(0,n.jsx)(t.h4,{id:"code-view",children:"Code view"}),"\n",(0,n.jsx)(t.p,{children:"In the code view, boxes represent ops and their nested calls. This is helpful for visualizing flow of function calls. In this view, you can click on a box to drill into that op and filter the call path."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Trace panel code view",src:a(69549).Z+"",width:"1050",height:"1342"})}),"\n",(0,n.jsx)(t.h4,{id:"flame-graph",children:"Flame graph"}),"\n",(0,n.jsx)(t.p,{children:"The flame graph view provides a timeline-based visualization of execution depth and duration. This is helpful for when trying to understand performance diagnostics over time. You can click into frames to isolate sub-traces."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Trace panel flame graph",src:a(94531).Z+"",width:"1236",height:"486"})}),"\n",(0,n.jsx)(t.h4,{id:"graph-view",children:"Graph view"}),"\n",(0,n.jsx)(t.p,{children:"The graph view shows hierarchical relationships between ops. This is useful for understanding parent/child relationships."}),"\n",(0,n.jsx)(t.h2,{id:"usage-tips-and-tricks",children:"Usage tips and tricks"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Use the ",(0,n.jsx)(t.strong,{children:'"Filter by op name\u201d'})," search bar at the top of the trace tree view to quickly isolate relevant tool or LLM calls."]}),"\n",(0,n.jsxs)(t.li,{children:["Switch between views based on your debugging need. Use ",(0,n.jsx)(t.strong,{children:"Code View"})," for call logic, ",(0,n.jsx)(t.strong,{children:"Flame Graph"})," for to understand performance over time, and ",(0,n.jsx)(t.strong,{children:"Graph View"})," to understand structure."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},69549:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/trace-tree-code-view-bb6275f2da170e5dcac24972d6a2910a.png"},18244:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/trace-tree-filter-16e65c1316ee32ebadf04d15398ce09f.png"},94531:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/trace-tree-flame-view-345fcaecab124b1c7eb28b79e32105af.png"},9163:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/trace-tree-full-290509f4157525a3ac23ff8d7b0a90a6.png"},36006:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/trace-tree-scrubbers-d9e0d6068cc157c4d79bca49faf496ae.png"},11151:(e,t,a)=>{a.d(t,{Z:()=>c,a:()=>s});var n=a(67294);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);
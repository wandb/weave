"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2413],{102:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=t(85893),s=t(11151);const a={},o="DSPy",r={id:"guides/integrations/dspy",title:"DSPy",description:"DSPy is a framework for algorithmically optimizing LM prompts and weights, especially when LMs are used one or more times within a pipeline. Weave automatically tracks and logs calls made using DSPy modules and functions.",source:"@site/docs/guides/integrations/dspy.md",sourceDirName:"guides/integrations",slug:"/guides/integrations/dspy",permalink:"/guides/integrations/dspy",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/integrations/dspy.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"LlamaIndex",permalink:"/guides/integrations/llamaindex"},next:{title:"Instructor",permalink:"/guides/integrations/instructor"}},d={},c=[{value:"Tracing",id:"tracing",level:2},{value:"Track your own DSPy Modules and Signatures",id:"track-your-own-dspy-modules-and-signatures",level:2},{value:"Optimization and Evaluation of your DSPy Program",id:"optimization-and-evaluation-of-your-dspy-program",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dspy",children:"DSPy"}),"\n",(0,i.jsx)("a",{target:"_blank",href:"https://github.com/wandb/examples/blob/master/weave/docs/quickstart_dspy.ipynb",children:(0,i.jsx)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://dspy-docs.vercel.app/",children:"DSPy"})," is a framework for algorithmically optimizing LM prompts and weights, especially when LMs are used one or more times within a pipeline. Weave automatically tracks and logs calls made using DSPy modules and functions."]}),"\n",(0,i.jsx)(n.h2,{id:"tracing",children:"Tracing"}),"\n",(0,i.jsx)(n.p,{children:"It\u2019s important to store traces of language model applications in a central location, both during development and in production. These traces can be useful for debugging, and as a dataset that will help you improve your application."}),"\n",(0,i.jsxs)(n.p,{children:["Weave will automatically capture traces for ",(0,i.jsx)(n.a,{href:"https://dspy-docs.vercel.app/",children:"DSPy"}),". To start tracking, calling ",(0,i.jsx)(n.code,{children:'weave.init(project_name="<YOUR-WANDB-PROJECT-NAME>")'})," and use the library as normal."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nimport dspy\nimport weave\n\nos.environ["OPENAI_API_KEY"] = "<YOUR-OPENAI-API-KEY>"\n\nweave.init(project_name="<YOUR-WANDB-PROJECT-NAME>")\n\nlm = dspy.LM(\'openai/gpt-4o-mini\')\ndspy.configure(lm=lm)\nclassify = dspy.Predict("sentence -> sentiment")\nclassify(sentence="it\'s a charming and often affecting journey.")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://wandb.ai/geekyrakshit/dspy-project/weave/calls",children:(0,i.jsx)(n.img,{alt:"dspy_trace.png",src:t(67124).Z+"",width:"2880",height:"1800"})})}),"\n",(0,i.jsx)(n.p,{children:"Weave logs all LM calls in your DSPy program, providing details about inputs, outputs, and metadata."}),"\n",(0,i.jsx)(n.h2,{id:"track-your-own-dspy-modules-and-signatures",children:"Track your own DSPy Modules and Signatures"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Module"})," is the building block with learnable parameters for DSPy programs that abstracts a prompting technique. A ",(0,i.jsx)(n.code,{children:"Signature"})," is a declarative specification of input/output behavior of a DSPy Module. Weave automatically tracks all in-built and cutom Signatures and Modules in your DSPy programs."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nimport dspy\nimport weave\n\nos.environ["OPENAI_API_KEY"] = "<YOUR-OPENAI-API-KEY>"\n\nweave.init(project_name="<YOUR-WANDB-PROJECT-NAME>")\n\nclass Outline(dspy.Signature):\n    """Outline a thorough overview of a topic."""\n\n    topic: str = dspy.InputField()\n    title: str = dspy.OutputField()\n    sections: list[str] = dspy.OutputField()\n    section_subheadings: dict[str, list[str]] = dspy.OutputField(\n        desc="mapping from section headings to subheadings"\n    )\n\n\nclass DraftSection(dspy.Signature):\n    """Draft a top-level section of an article."""\n\n    topic: str = dspy.InputField()\n    section_heading: str = dspy.InputField()\n    section_subheadings: list[str] = dspy.InputField()\n    content: str = dspy.OutputField(desc="markdown-formatted section")\n\n\nclass DraftArticle(dspy.Module):\n    def __init__(self):\n        self.build_outline = dspy.ChainOfThought(Outline)\n        self.draft_section = dspy.ChainOfThought(DraftSection)\n\n    def forward(self, topic):\n        outline = self.build_outline(topic=topic)\n        sections = []\n        for heading, subheadings in outline.section_subheadings.items():\n            section, subheadings = (\n                f"## {heading}",\n                [f"### {subheading}" for subheading in subheadings],\n            )\n            section = self.draft_section(\n                topic=outline.title,\n                section_heading=section,\n                section_subheadings=subheadings,\n            )\n            sections.append(section.content)\n        return dspy.Prediction(title=outline.title, sections=sections)\n\n\ndraft_article = DraftArticle()\narticle = draft_article(topic="World Cup 2002")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://wandb.ai/geekyrakshit/dspy-project/weave/calls",children:(0,i.jsx)(n.img,{src:t(25565).Z+"",width:"3456",height:"1864"})})}),"\n",(0,i.jsx)(n.h2,{id:"optimization-and-evaluation-of-your-dspy-program",children:"Optimization and Evaluation of your DSPy Program"}),"\n",(0,i.jsx)(n.p,{children:"Weave also automatically captures traces for DSPy optimizers and Evaluation calls which you can use to improve and evaulate your DSPy program's performance on a development set."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nimport dspy\nimport weave\n\nos.environ["OPENAI_API_KEY"] = "<YOUR-OPENAI-API-KEY>"\nweave.init(project_name="<YOUR-WANDB-PROJECT-NAME>")\n\ndef accuracy_metric(answer, output, trace=None):\n    predicted_answer = output["answer"].lower()\n    return answer["answer"].lower() == predicted_answer\n\nmodule = dspy.ChainOfThought("question -> answer: str, explanation: str")\noptimizer = dspy.BootstrapFewShot(metric=accuracy_metric)\noptimized_module = optimizer.compile(\n    module, trainset=SAMPLE_EVAL_DATASET, valset=SAMPLE_EVAL_DATASET\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://wandb.ai/geekyrakshit/dspy-project/weave/calls",children:(0,i.jsx)(n.img,{src:t(68946).Z+"",width:"3456",height:"1864"})})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},25565:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/dspy_custom_module-48d0d002c6605de9562004ea8d0ffaaf.png"},68946:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/dspy_optimizer-e4bc0e075803c6690cd3a76083bbf616.png"},67124:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/dspy_trace-34da2243073a336dc414f4212ba1e535.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var i=t(67294);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);
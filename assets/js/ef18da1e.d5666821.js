"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3694],{58516:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=r(85893),s=r(11151);const t={sidebar_label:"query"},c="weave.trace_server.interface.query",a={id:"reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query",title:"weave.trace_server.interface.query",description:"This file contains the interface definition for the Trace Server Query model. It",source:"@site/docs/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query.md",sourceDirName:"reference/python-sdk/weave/trace_server/interface",slug:"/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query",permalink:"/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{sidebar_label:"query"},sidebar:"pythonSdkSidebar",previous:{title:"weave_client",permalink:"/reference/python-sdk/weave/trace/weave.trace.weave_client"},next:{title:"trace_server_interface",permalink:"/reference/python-sdk/weave/trace_server/weave.trace_server.trace_server_interface"}},o={},l=[{value:"Classes",id:"classes",level:2},{value:"<kbd>class</kbd> <code>AndOperation</code>",id:"class-andoperation",level:2},{value:"<kbd>class</kbd> <code>ContainsOperation</code>",id:"class-containsoperation",level:2},{value:"<kbd>class</kbd> <code>ContainsSpec</code>",id:"class-containsspec",level:2},{value:"<kbd>class</kbd> <code>ConvertOperation</code>",id:"class-convertoperation",level:2},{value:"<kbd>class</kbd> <code>ConvertSpec</code>",id:"class-convertspec",level:2},{value:"<kbd>class</kbd> <code>EqOperation</code>",id:"class-eqoperation",level:2},{value:"<kbd>class</kbd> <code>GetFieldOperator</code>",id:"class-getfieldoperator",level:2},{value:"<kbd>class</kbd> <code>GtOperation</code>",id:"class-gtoperation",level:2},{value:"<kbd>class</kbd> <code>GteOperation</code>",id:"class-gteoperation",level:2},{value:"<kbd>class</kbd> <code>InOperation</code>",id:"class-inoperation",level:2},{value:"<kbd>class</kbd> <code>LiteralOperation</code>",id:"class-literaloperation",level:2},{value:"<kbd>class</kbd> <code>NotOperation</code>",id:"class-notoperation",level:2},{value:"<kbd>class</kbd> <code>OrOperation</code>",id:"class-oroperation",level:2},{value:"<kbd>class</kbd> <code>Query</code>",id:"class-query",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"weavetrace_serverinterfacequery",children:"weave.trace_server.interface.query"}),"\n",(0,i.jsx)(n.p,{children:"This file contains the interface definition for the Trace Server Query model. It\nis heavily inspired by the MongoDB query language, but is a subset of the full\nMongoDB query language. In particular, we have made the following\nsimplifications:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'We only support the "aggregation" operators, not the "query" operators. This is\npurely for simplicity and because the "aggregation" operators are more powerful.\nThe Mongo docs language has evolved over time and the primary query language\nis column-oriented. However, the more expressive aggregation language can be\nused for both direct queries, but also for column comparison and\ncalculations. We can add support for the "query" operators in the future if\nneeded.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"We only support a subset of the operators / shorthand forms for now. We can add\nmore operators in the future as needed."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'One notable omission here is the lack of support for "$field" as a shorthand for\nthe "getField"  operator.'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["We have ",(0,i.jsx)(n.em,{children:"added"})," a ",(0,i.jsx)(n.code,{children:"$contains"})," operator which is not in the MongoDB query\nlanguage. This is a simple substring match operator."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"api-overview",children:"API Overview"}),"\n",(0,i.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-andoperation",children:(0,i.jsx)(n.code,{children:"query.AndOperation"})}),": Logical AND. All conditions must evaluate to true."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-containsoperation",children:(0,i.jsx)(n.code,{children:"query.ContainsOperation"})}),": Case-insensitive substring match."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-containsspec",children:(0,i.jsx)(n.code,{children:"query.ContainsSpec"})}),": Specification for the ",(0,i.jsx)(n.code,{children:"$contains"})," operation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-convertoperation",children:(0,i.jsx)(n.code,{children:"query.ConvertOperation"})}),": Convert the input value to a specific type (e.g., ",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"bool"}),", ",(0,i.jsx)(n.code,{children:"string"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-convertspec",children:(0,i.jsx)(n.code,{children:"query.ConvertSpec"})}),": Specifies conversion details for ",(0,i.jsx)(n.code,{children:"$convert"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-eqoperation",children:(0,i.jsx)(n.code,{children:"query.EqOperation"})}),": Equality check between two operands."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-getfieldoperator",children:(0,i.jsx)(n.code,{children:"query.GetFieldOperator"})}),": Access a field on the traced call."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-gtoperation",children:(0,i.jsx)(n.code,{children:"query.GtOperation"})}),": Greater than comparison."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-gteoperation",children:(0,i.jsx)(n.code,{children:"query.GteOperation"})}),": Greater than or equal comparison."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-inoperation",children:(0,i.jsx)(n.code,{children:"query.InOperation"})}),": Membership check."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-literaloperation",children:(0,i.jsx)(n.code,{children:"query.LiteralOperation"})}),": Represents a constant value in the query language."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-notoperation",children:(0,i.jsx)(n.code,{children:"query.NotOperation"})}),": Logical NOT. Inverts the condition."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-oroperation",children:(0,i.jsx)(n.code,{children:"query.OrOperation"})}),": Logical OR. At least one condition must be true."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#class-query",children:(0,i.jsx)(n.code,{children:"query.Query"})}),": The top-level object for querying traced calls."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L132",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-andoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"AndOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Logical AND. All conditions must evaluate to true."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$and": [\n            {"$eq": [{"$getField": "op_name"}, {"$literal": "predict"}]},\n            {"$gt": [{"$getField": "summary.usage.tokens"}, {"$literal": 1000}]}\n        ]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$and"}),": ",(0,i.jsx)(n.code,{children:"list[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L260",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-containsoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"ContainsOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Case-insensitive substring match."}),"\n",(0,i.jsx)(n.p,{children:"Not part of MongoDB. Weave-specific addition."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$contains": {\n            "input": {"$getField": "display_name"},\n            "substr": {"$literal": "llm"},\n            "case_insensitive": true\n        }\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$contains"}),": ",(0,i.jsx)(n.code,{children:"<class 'ContainsSpec'>"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L281",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-containsspec",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"ContainsSpec"})]}),"\n",(0,i.jsxs)(n.p,{children:["Specification for the ",(0,i.jsx)(n.code,{children:"$contains"})," operation."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input"}),": The string to search."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"substr"}),": The substring to search for."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"case_insensitive"}),": If true, match is case-insensitive."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input"}),": ",(0,i.jsx)(n.code,{children:"typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"substr"}),": ",(0,i.jsx)(n.code,{children:"typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"case_insensitive"}),": ",(0,i.jsx)(n.code,{children:"typing.Optional[bool]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L97",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-convertoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"ConvertOperation"})]}),"\n",(0,i.jsxs)(n.p,{children:["Convert the input value to a specific type (e.g., ",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"bool"}),", ",(0,i.jsx)(n.code,{children:"string"}),")."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$convert": {\n            "input": {"$getField": "inputs.value"},\n            "to": "int"\n        }\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$convert"}),": ",(0,i.jsx)(n.code,{children:"<class 'ConvertSpec'>"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L118",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-convertspec",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"ConvertSpec"})]}),"\n",(0,i.jsxs)(n.p,{children:["Specifies conversion details for ",(0,i.jsx)(n.code,{children:"$convert"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input"}),": The operand to convert."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"to"}),": The type to convert to."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input"}),": ",(0,i.jsx)(n.code,{children:"typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"to"}),": ",(0,i.jsx)(n.code,{children:"typing.Literal['double', 'string', 'int', 'bool', 'exists']"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L188",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-eqoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"EqOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Equality check between two operands."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$eq": [{"$getField": "op_name"}, {"$literal": "predict"}]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$eq"}),": ",(0,i.jsx)(n.code,{children:"tuple[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation], typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L67",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-getfieldoperator",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"GetFieldOperator"})]}),"\n",(0,i.jsx)(n.p,{children:"Access a field on the traced call."}),"\n",(0,i.jsxs)(n.p,{children:["Supports dot notation for nested access, e.g. ",(0,i.jsx)(n.code,{children:"summary.usage.tokens"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Only works on fields present in the ",(0,i.jsx)(n.code,{children:"CallSchema"}),", including:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Top-level fields like ",(0,i.jsx)(n.code,{children:"op_name"}),", ",(0,i.jsx)(n.code,{children:"trace_id"}),", ",(0,i.jsx)(n.code,{children:"started_at"})]}),"\n",(0,i.jsxs)(n.li,{children:["Nested fields like ",(0,i.jsx)(n.code,{children:"inputs.input_name"}),", ",(0,i.jsx)(n.code,{children:"summary.usage.tokens"}),", etc."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {"$getField": "op_name"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$getField"}),": ",(0,i.jsx)(n.code,{children:"<class 'str'>"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L204",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-gtoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"GtOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Greater than comparison."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$gt": [{"$getField": "summary.usage.tokens"}, {"$literal": 100}]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$gt"}),": ",(0,i.jsx)(n.code,{children:"tuple[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation], typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L220",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-gteoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"GteOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Greater than or equal comparison."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$gte": [{"$getField": "summary.usage.tokens"}, {"$literal": 100}]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$gte"}),": ",(0,i.jsx)(n.code,{children:"tuple[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation], typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L236",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-inoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"InOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Membership check."}),"\n",(0,i.jsx)(n.p,{children:"Returns true if the left operand is in the list provided as the second operand."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$in": [\n            {"$getField": "op_name"},\n            [{"$literal": "predict"}, {"$literal": "generate"}]\n        ]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$in"}),": ",(0,i.jsx)(n.code,{children:"tuple[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation], list[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L38",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-literaloperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"LiteralOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Represents a constant value in the query language."}),"\n",(0,i.jsx)(n.p,{children:"This can be any standard JSON-serializable value."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {"$literal": "predict"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$literal"}),": ",(0,i.jsx)(n.code,{children:"typing.Union[str, int, float, bool, dict[str, LiteralOperation], list[LiteralOperation], NoneType]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L170",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-notoperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"NotOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Logical NOT. Inverts the condition."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$not": [\n            {"$eq": [{"$getField": "op_name"}, {"$literal": "debug"}]}\n        ]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$not"}),": ",(0,i.jsx)(n.code,{children:"tuple[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L151",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-oroperation",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"OrOperation"})]}),"\n",(0,i.jsx)(n.p,{children:"Logical OR. At least one condition must be true."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    {\n        "$or": [\n            {"$eq": [{"$getField": "op_name"}, {"$literal": "a"}]},\n            {"$eq": [{"$getField": "op_name"}, {"$literal": "b"}]}\n        ]\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$or"}),": ",(0,i.jsx)(n.code,{children:"list[typing.Union[LiteralOperation, GetFieldOperator, ConvertOperation, AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace_server/interface/query.py#L321",children:(0,i.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"class-query",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"Query"})]}),"\n",(0,i.jsx)(n.p,{children:"The top-level object for querying traced calls."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Query"})," wraps a single ",(0,i.jsx)(n.code,{children:"$expr"}),", which uses Mongo-style aggregation operators to filter calls. This expression can combine logical conditions, comparisons, type conversions, and string matching."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    # Filter calls where op_name == "predict"\n    {\n        "$expr": {\n            "$eq": [\n                {"$getField": "op_name"},\n                {"$literal": "predict"}\n            ]\n        }\n    }\n\n    # Filter where a call\'s display name contains "llm"\n    {\n        "$expr": {\n            "$contains": {\n                "input": {"$getField": "display_name"},\n                "substr": {"$literal": "llm"},\n                "case_insensitive": true\n            }\n        }\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pydantic Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$expr"}),": ",(0,i.jsx)(n.code,{children:"typing.Union[AndOperation, OrOperation, NotOperation, EqOperation, GtOperation, GteOperation, InOperation, ContainsOperation]"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>c});var i=r(67294);const s={},t=i.createContext(s);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1037],{24013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var r=n(85893),a=n(11151);const s={sidebar_label:"util"},i="weave.trace.util",c={id:"reference/python-sdk/weave/trace/weave.trace.util",title:"weave.trace.util",description:"---",source:"@site/docs/reference/python-sdk/weave/trace/weave.trace.util.md",sourceDirName:"reference/python-sdk/weave/trace",slug:"/reference/python-sdk/weave/trace/weave.trace.util",permalink:"/reference/python-sdk/weave/trace/weave.trace.util",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/reference/python-sdk/weave/trace/weave.trace.util.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{sidebar_label:"util"},sidebar:"pythonSdkSidebar",previous:{title:"op",permalink:"/reference/python-sdk/weave/trace/weave.trace.op"},next:{title:"weave_client",permalink:"/reference/python-sdk/weave/trace/weave.trace.weave_client"}},d={},o=[{value:"Classes",id:"classes",level:2},{value:"<kbd>class</kbd> <code>ContextAwareThreadPoolExecutor</code>",id:"class-contextawarethreadpoolexecutor",level:2},{value:"<kbd>method</kbd> <code>__init__</code>",id:"method-__init__",level:3},{value:"<kbd>method</kbd> <code>map</code>",id:"method-map",level:3},{value:"<kbd>method</kbd> <code>submit</code>",id:"method-submit",level:3},{value:"<kbd>class</kbd> <code>ContextAwareThread</code>",id:"class-contextawarethread",level:2},{value:"<kbd>method</kbd> <code>__init__</code>",id:"method-__init__-1",level:3},{value:"<kbd>property</kbd> daemon",id:"property-daemon",level:4},{value:"<kbd>property</kbd> ident",id:"property-ident",level:4},{value:"<kbd>property</kbd> name",id:"property-name",level:4},{value:"<kbd>property</kbd> native_id",id:"property-native_id",level:4},{value:"<kbd>method</kbd> <code>run</code>",id:"method-run",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"weavetraceutil",children:"weave.trace.util"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h1,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsx)(t.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#class-contextawarethreadpoolexecutor",children:(0,r.jsx)(t.code,{children:"util.ContextAwareThreadPoolExecutor"})}),": A ThreadPoolExecutor that runs functions with the context of the caller."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#class-contextawarethread",children:(0,r.jsx)(t.code,{children:"util.ContextAwareThread"})}),": A Thread that runs functions with the context of the caller."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L39",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h2,{id:"class-contextawarethreadpoolexecutor",children:[(0,r.jsx)("kbd",{children:"class"})," ",(0,r.jsx)(t.code,{children:"ContextAwareThreadPoolExecutor"})]}),"\n",(0,r.jsx)(t.p,{children:"A ThreadPoolExecutor that runs functions with the context of the caller."}),"\n",(0,r.jsx)(t.p,{children:'This is a drop-in replacement for concurrent.futures.ThreadPoolExecutor that ensures weave calls behave as expected inside the executor.  Weave requires certain contextvars to be set (see call_context.py), but new threads do not automatically copy context from the parent, which can cause the call context to be lost -- not good!  This class automates contextvar copying so using this executor "just works" as the user probably expects.'}),"\n",(0,r.jsx)(t.p,{children:"You can achieve the same effect without this class by instead writing:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"with concurrent.futures.ThreadPoolExecutor() as executor:\n     contexts = [copy_context() for _ in range(len(vals))]\n\n     def _wrapped_fn(*args):\n         return contexts.pop().run(fn, *args)\n\n     executor.map(_wrapped_fn, vals)\n"})}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L62",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h3,{id:"method-__init__",children:[(0,r.jsx)("kbd",{children:"method"})," ",(0,r.jsx)(t.code,{children:"__init__"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"__init__(*args: 'Any', **kwargs: 'Any') \u2192 None\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L71",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h3,{id:"method-map",children:[(0,r.jsx)("kbd",{children:"method"})," ",(0,r.jsx)(t.code,{children:"map"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"map(\n    fn: 'Callable',\n    *iterables: 'Iterable[Any]',\n    timeout: 'float | None' = None,\n    chunksize: 'int' = 1\n) \u2192 Iterator\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L67",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h3,{id:"method-submit",children:[(0,r.jsx)("kbd",{children:"method"})," ",(0,r.jsx)(t.code,{children:"submit"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"submit(fn: 'Callable', *args: 'Any', **kwargs: 'Any') \u2192 Any\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L99",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h2,{id:"class-contextawarethread",children:[(0,r.jsx)("kbd",{children:"class"})," ",(0,r.jsx)(t.code,{children:"ContextAwareThread"})]}),"\n",(0,r.jsx)(t.p,{children:"A Thread that runs functions with the context of the caller."}),"\n",(0,r.jsx)(t.p,{children:'This is a drop-in replacement for threading.Thread that ensures calls behave as expected inside the thread.  Weave requires certain contextvars to be set (see call_context.py), but new threads do not automatically copy context from the parent, which can cause the call context to be lost -- not good!  This class automates contextvar copying so using this thread "just works" as the user probably expects.'}),"\n",(0,r.jsx)(t.p,{children:"You can achieve the same effect without this class by instead writing:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"def run_with_context(func, *args, **kwargs):\n     context = copy_context()\n     def wrapper():\n         context.run(func, *args, **kwargs)\n     return wrapper\n\nthread = threading.Thread(target=run_with_context(your_func, *args, **kwargs))\nthread.start()\n"})}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L123",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h3,{id:"method-__init__-1",children:[(0,r.jsx)("kbd",{children:"method"})," ",(0,r.jsx)(t.code,{children:"__init__"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"__init__(*args: 'Any', **kwargs: 'Any') \u2192 None\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.h4,{id:"property-daemon",children:[(0,r.jsx)("kbd",{children:"property"})," daemon"]}),"\n",(0,r.jsx)(t.p,{children:"A boolean value indicating whether this thread is a daemon thread."}),"\n",(0,r.jsx)(t.p,{children:"This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False."}),"\n",(0,r.jsx)(t.p,{children:"The entire Python program exits when only daemon threads are left."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.h4,{id:"property-ident",children:[(0,r.jsx)("kbd",{children:"property"})," ident"]}),"\n",(0,r.jsx)(t.p,{children:"Thread identifier of this thread or None if it has not been started."}),"\n",(0,r.jsx)(t.p,{children:"This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.h4,{id:"property-name",children:[(0,r.jsx)("kbd",{children:"property"})," name"]}),"\n",(0,r.jsx)(t.p,{children:"A string used for identification purposes only."}),"\n",(0,r.jsx)(t.p,{children:"It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.h4,{id:"property-native_id",children:[(0,r.jsx)("kbd",{children:"property"})," native_id"]}),"\n",(0,r.jsx)(t.p,{children:"Native integral thread ID of this thread, or None if it has not been started."}),"\n",(0,r.jsx)(t.p,{children:"This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/weave/trace/util.py#L127",children:(0,r.jsx)("img",{align:"right",src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,r.jsxs)(t.h3,{id:"method-run",children:[(0,r.jsx)("kbd",{children:"method"})," ",(0,r.jsx)(t.code,{children:"run"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"run() \u2192 None\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>i});var r=n(67294);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);
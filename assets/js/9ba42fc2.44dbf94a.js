"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4947],{89527:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=t(85893),i=t(11151),o=t(65488),s=t(85162);const r={},l="Logging media",d={id:"guides/core-types/media",title:"Logging media",description:"W&B Weave supports logging and has dedicated displays for numerous content types such as videos, images, audio files, PDFs, CSVs and HTML.",source:"@site/docs/guides/core-types/media.md",sourceDirName:"guides/core-types",slug:"/guides/core-types/media",permalink:"/guides/core-types/media",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/core-types/media.md",tags:[],version:"current",lastUpdatedAt:1756480127e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Threads",permalink:"/guides/tracking/threads"},next:{title:"Playground",permalink:"/guides/tools/playground"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Images",id:"images",level:2},{value:"Quickstart",id:"quickstart",level:3},{value:"Images",id:"images-1",level:2},{value:"Resize large images before logging",id:"resize-large-images-before-logging",level:3},{value:"Video",id:"video",level:2},{value:"Quickstart",id:"quickstart-1",level:3},{value:"Example",id:"example",level:3},{value:"Documents",id:"documents",level:2},{value:"Quickstart",id:"quickstart-2",level:3},{value:"Example",id:"example-1",level:3},{value:"Audio",id:"audio",level:2},{value:"Quickstart",id:"quickstart-3",level:3},{value:"Example",id:"example-2",level:3},{value:"HTML",id:"html",level:2},{value:"Quickstart",id:"quickstart-4",level:3},{value:"Example",id:"example-3",level:3},{value:"Using the Contents API",id:"using-the-contents-api",level:2},{value:"Usage",id:"usage",level:3},{value:"Type Annotations",id:"type-annotations",level:3},{value:"Direct Initialization",id:"direct-initialization",level:3},{value:"Custom Mimetypes",id:"custom-mimetypes",level:3},{value:"Custom Mimetypes with Type Annotations",id:"custom-mimetypes-with-type-annotations",level:4},{value:"Custom Mimetypes with Direct Initialization",id:"custom-mimetypes-with-direct-initialization",level:4},{value:"Content properties",id:"content-properties",level:3},{value:"Attributes",id:"attributes",level:4},{value:"Utility Methods",id:"utility-methods",level:4},{value:"Initialization Methods",id:"initialization-methods",level:4},{value:"Adding Custom Metadata",id:"adding-custom-metadata",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"logging-media",children:"Logging media"}),"\n",(0,a.jsx)(n.p,{children:"W&B Weave supports logging and has dedicated displays for numerous content types such as videos, images, audio files, PDFs, CSVs and HTML."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"#images",children:"Images"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"#video",children:"Video"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"#documents",children:"Documents"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"#audio",children:"Audio"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"#html",children:"HTML"})})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The easiest way to log media in Weave is to use type annotations like ",(0,a.jsx)(n.code,{children:"Annotated[bytes, Content]"})," or ",(0,a.jsx)(n.code,{children:"Annotated[str, Content]"})," as input or return types in your ops. You can also annotate path arguments with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content]"})," and Weave will automatically open, detect and display the media for you within your trace."]}),"\n",(0,a.jsxs)(n.p,{children:["The examples in this guide use annotations. We recommend using annotations because they are the simplest way to start logging your media. For more advanced configurations, see the ",(0,a.jsx)(n.a,{href:"#using-the-contents-api",children:"Content API section"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Each media section in this guide contains a basic quick-start code snippet and a usable example."}),"\n",(0,a.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,a.jsx)(n.h3,{id:"quickstart",children:"Quickstart"}),"\n",(0,a.jsxs)(n.p,{children:["Log images by annotating functions with ",(0,a.jsx)(n.code,{children:"Annotated[bytes, Content]"})," types or filepaths with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content]"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example draws a basic image and then logs it to Weave using the ",(0,a.jsx)(n.code,{children:"Content"})," annotation:"]}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave pillow\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave pillow\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"images-1",children:"Images"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nfrom PIL import Image, ImageDraw\nfrom typing import Annotated\n\nweave.init('media-logging')\n\n# Create and save a sample image\nimg = Image.new('RGB', (200, 100), color='lightblue')\ndraw = ImageDraw.Draw(img)\ndraw.text((50, 40), \"Hello Weave!\", fill='black')\nimg.save(\"sample_image.png\")\n\n# Method 1: Content annotation (recommended)\n@weave.op\n# highlight-next-line\ndef load_image_content(path: Annotated[str, Content]) -> Annotated[bytes, Content]:\n    with open(path, 'rb') as f:\n        return f.read()\n\n# Method 2: PIL Image object  \n@weave.op\n# highlight-next-line\ndef load_image_pil(path: Annotated[str, Content]) -> Image.Image:\n    return Image.open(path)\n\nresult1 = load_image_content(\"sample_image.png\")\nresult2 = load_image_pil(\"sample_image.png\")\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following example shows how to log an image generated via the OpenAI DALL-E API:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave pillow openai requests\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave pillow openai requests\n"})})})]}),"\n",(0,a.jsxs)(o.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsx)(s.default,{value:"python",label:"Python",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nfrom weave import Content\nfrom typing import Annotated\nimport openai\nimport requests\n\nclient = openai.OpenAI()\nweave.init("media-logging")\n\n@weave.op\ndef generate_image(prompt: str) -> Annotated[bytes, Content]:\nresponse = client.images.generate(\n        model="dall-e-3",\n        prompt=prompt,\n        size="1024x1024",\n        quality="standard",\n        n=1,\n    )\nimage_url = response.data[0].url\nimage_response = requests.get(image_url, stream=True)\nreturn image_response.content\n\ngenerate_image("a cat with a pumpkin hat")\n'})})}),(0,a.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import {OpenAI} from 'openai';\nimport * as weave from 'weave';\n\nasync function main() {\n    const client = await weave.init('image-example');\n    const openai = new OpenAI();\n\n    const generateImage = weave.op(async (prompt: string) => {\n        const response = await openai.images.generate({\n            model: 'dall-e-3',\n            prompt: prompt,\n            size: '1024x1024',\n            quality: 'standard',\n            n: 1,\n        });\n        const imageUrl = response.data[0].url;\n        const imgResponse = await fetch(imageUrl);\n        const data = Buffer.from(await imgResponse.arrayBuffer());\n\n        return weave.weaveImage({data});\n    });\n\n    generateImage('a cat with a pumpkin hat');\n}\n\nmain();\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"This image is logged to Weave and automatically displayed in the UI."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Screenshot of pumpkin cat trace view",src:t(46026).Z+"",width:"3456",height:"1614"})}),"\n",(0,a.jsx)(n.h3,{id:"resize-large-images-before-logging",children:"Resize large images before logging"}),"\n",(0,a.jsxs)(n.p,{children:["It can be helpful to resize images before logging to reduce UI rendering cost and storage impact. You can use ",(0,a.jsx)(n.code,{children:"postprocess_output"})," in your ",(0,a.jsx)(n.code,{children:"@weave.op"})," to resize an image."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\nfrom typing import Any\nfrom PIL import Image\nimport weave\n\nweave.init(\'image-resize-example\')\n\n# Custom output type\n@dataclass\nclass ImageResult:\n    label: str\n    image: Image.Image\n\n# Resize helper\ndef resize_image(image: Image.Image, max_size=(512, 512)) -> Image.Image:\n    image = image.copy()\n    image.thumbnail(max_size, Image.ANTIALIAS)\n    return image\n\n# Postprocess output to resize image before logging\ndef postprocess_output(output: ImageResult) -> ImageResult:\n    resized = resize_image(output.image)\n    return ImageResult(label=output.label, image=resized)\n\n@weave.op(postprocess_output=postprocess_output)\ndef generate_large_image() -> ImageResult:\n    # Create an example image to process (e.g., 2000x2000 red square)\n    img = Image.new("RGB", (2000, 2000), color="red")\n    return ImageResult(label="big red square", image=img)\n\ngenerate_large_image()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"video",children:"Video"}),"\n",(0,a.jsxs)(n.p,{children:["Log videos by annotating functions with ",(0,a.jsx)(n.code,{children:"Annotated[bytes, Content]"})," types. Weave automatically handles ",(0,a.jsx)(n.code,{children:"mp4"})," videos. Here's a simple example:"]}),"\n",(0,a.jsx)(n.h3,{id:"quickstart-1",children:"Quickstart"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave requests\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave requests\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nfrom weave import Content\nfrom typing import Annotated\nimport requests\n\nweave.init(\'media-logging\')\n\ndef download_big_buck_bunny():\n    """Download Big Buck Bunny sample video"""\n    url = "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"\n    response = requests.get(url)\n    with open("big_buck_bunny.mp4", "wb") as f:\n        f.write(response.content)\n\n@weave.op\n# highlight-next-line\ndef load_video_content(path: Annotated[str, Content]) -> Annotated[bytes, Content]:\n    """Load a video file from disk"""\n    with open(path, \'rb\') as f:\n        return f.read()\n\ndownload_big_buck_bunny()\nbunny_video = load_video_content("big_buck_bunny.mp4")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"The following example shows how to log video within a video-understanding project:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave google-genai yt-dlp requests\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave google-genai yt-dlp requests\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nfrom typing import Annotated, Literal\nfrom google import genai\nfrom google.genai import types\nimport requests\nimport yt_dlp\nimport time\n\n# Note: Get your API key from https://aistudio.google.com/app/apikey\nclient = genai.Client()\nweave.init('media-logging')\n\ndef download_youtube_video(url: str) -> bytes:\n    ydl_opts = {\n        'format': 'mp4[height<=720]',\n        'outtmpl': 'downloaded_video.%(ext)s',\n    }\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        ydl.download([url])\n    with open('downloaded_video.mp4', 'rb') as f:\n        return f.read()\n\n@weave.op\n# highlight-next-line\ndef analyze_video(video: Annotated[bytes, Content]) -> str:\n    with open(\"temp_analysis_video.mp4\", \"wb\") as f:\n        f.write(video)\n    myfile = client.files.upload(file=\"temp_analysis_video.mp4\")\n    while myfile.state == \"PROCESSING\":\n        time.sleep(2)\n        myfile = client.files.get(name=myfile.name)\n    \n    response = client.models.generate_content(\n        model=\"models/gemini-2.5-flash\",\n        contents=[\n            myfile,\n            \"Is the person going to give you up?\"\n        ]\n    )\n    \n    return response.text\n\nvideo_data = download_youtube_video(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\nresult = analyze_video(video_data)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Video logging in Weave",src:t(54451).Z+"",width:"2572",height:"1508"})}),"\n",(0,a.jsx)(n.h2,{id:"documents",children:"Documents"}),"\n",(0,a.jsxs)(n.p,{children:["Log documents by annotating functions with ",(0,a.jsx)(n.code,{children:"Annotated[bytes, Content]"})," types, or by specifying the document type with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content[Literal['text']]"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Weave automatically handles ",(0,a.jsx)(n.code,{children:"pdf"}),", ",(0,a.jsx)(n.code,{children:"csv"}),", ",(0,a.jsx)(n.code,{children:"md"}),", ",(0,a.jsx)(n.code,{children:"text"}),", ",(0,a.jsx)(n.code,{children:"json"}),", ",(0,a.jsx)(n.code,{children:"xml"})," file types. You can also log using file paths with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content]"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"quickstart-2",children:"Quickstart"}),"\n",(0,a.jsx)(n.p,{children:"The following example shows how stores copies of the input PDF and CSV files, and then stores the file contents returned by the function:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave reportlab pandas\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave reportlab pandas\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nfrom typing import Annotated\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter\nimport pandas as pd\n\nweave.init('media-logging')\n\ndef create_sample_pdf():\n    c = canvas.Canvas(\"sample_document.pdf\", pagesize=letter)\n    c.drawString(100, 750, \"Hello from Weave!\")\n    c.drawString(100, 730, \"This is a sample PDF document.\")\n    c.save()\n\ndef create_sample_csv():\n    df = pd.DataFrame({\n        'Name': ['Alice', 'Bob', 'Charlie'],\n        'Age': [25, 30, 35],\n        'City': ['New York', 'London', 'Tokyo']\n    })\n    df.to_csv(\"sample_data.csv\", index=False)\n\n@weave.op\n# highlight-next-line\ndef load_document(path: Annotated[str, Content]) -> Annotated[bytes, Content]:\n    with open(path, 'rb') as f:\n        return f.read()\n\ncreate_sample_pdf()\ncreate_sample_csv()\n\npdf_result = load_document(\"sample_document.pdf\")\ncsv_result = load_document(\"sample_data.csv\")\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"This example demonstrates how to log documents within a Retrieval-Augmented Generation (RAG) system:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave openai reportlab PyPDF2\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave openai reportlab PyPDF2\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nfrom weave import Content\nfrom typing import Annotated, Literal\nimport openai\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter\nimport PyPDF2\n\nclient = openai.OpenAI()\nweave.init(\'media-logging\')\n\ndef create_absurd_company_handbook():\n    """Create a fictional company handbook with ridiculous policies"""\n    c = canvas.Canvas("company_handbook.pdf", pagesize=letter)\n    \n    c.drawString(100, 750, "ACME Corp Employee Handbook")\n    c.drawString(100, 720, "Definitely Real Policies:")\n    c.drawString(120, 690, "Policy 1: All meetings must be conducted while hopping on one foot")\n    c.drawString(120, 660, "Policy 2: Coffee breaks are mandatory every 17 minutes")\n    c.drawString(120, 630, "Policy 3: Code reviews must be performed in haiku format only")\n    c.drawString(120, 600, "Policy 4: The office plant Gerald has veto power over all decisions")\n    c.drawString(120, 570, "Policy 5: Debugging is only allowed on Wednesdays and full moons")\n    \n    c.save()\n\n@weave.op\n# highlight-next-line\ndef create_and_query_document(pdf_path: Annotated[str, Content], question: str) -> str:\n    """Extract text from PDF and use RAG to answer questions"""\n    with open(pdf_path, \'rb\') as file:\n        pdf_reader = PyPDF2.PdfReader(file)\n        text = ""\n        for page in pdf_reader.pages:\n            text += page.extract_text()\n    \n    response = client.chat.completions.create(\n        model="gpt-4",\n        messages=[\n            {\n                "role": "system", \n                "content": f"You are an HR representative. Answer questions based on this handbook: {text}. Be completely serious about these policies."\n            },\n            {"role": "user", "content": question}\n        ]\n    )\n    \n    return response.choices[0].message.content\n\ncreate_absurd_company_handbook()\nhr_response = create_and_query_document(\n    "company_handbook.pdf",\n    "What\'s the policy on code reviews, and when am I allowed to debug?"\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"PDF document logging in Weave",src:t(36737).Z+"",width:"2500",height:"950"})}),"\n",(0,a.jsx)(n.h2,{id:"audio",children:"Audio"}),"\n",(0,a.jsxs)(n.p,{children:["Log audio to Weave by annotating functions with ",(0,a.jsx)(n.code,{children:"Annotated[bytes, Content]"})," types, or by specifying the document type with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content[Literal['mp3']]"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Weave automatically handles ",(0,a.jsx)(n.code,{children:"mp3"}),", ",(0,a.jsx)(n.code,{children:"wav"}),", ",(0,a.jsx)(n.code,{children:"flac"}),", ",(0,a.jsx)(n.code,{children:"ogg"})," and ",(0,a.jsx)(n.code,{children:"m4a"})," file types. You can also log using file paths with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content]"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"quickstart-3",children:"Quickstart"}),"\n",(0,a.jsx)(n.p,{children:"The following code snippet generates a sine wave, records it, and then logs the audio to Weave:"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave numpy\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave numpy\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nimport wave\nimport numpy as np\nfrom typing import Annotated\n\nweave.init('media-logging')\n\n# Create simple beep audio file\nframes = np.sin(2 * np.pi * 440 * np.linspace(0, 1, 44100))\naudio_data = (frames * 32767 * 0.3).astype(np.int16)\n\nwith wave.open(\"beep.wav\", 'wb') as f:\n    f.setnchannels(1)\n    f.setsampwidth(2) \n    f.setframerate(44100)\n    f.writeframes(audio_data.tobytes())\n\n@weave.op\n# highlight-next-line\ndef load_audio(path: Annotated[str, Content]) -> Annotated[bytes, Content]:\n    with open(path, 'rb') as f:\n        return f.read()\n\nresult = load_audio(\"beep.wav\")\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["This example generates and logs AI-created audio using the ",(0,a.jsx)(n.code,{children:"Content"})," annotation:"]}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave openai\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave openai\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nfrom weave import Content\nfrom typing import Annotated, Literal\nfrom pathlib import Path\nfrom openai import OpenAI\n\nclient = OpenAI()\nweave.init("media-logging")\n\n@weave.op\n# highlight-next-line\ndef generate_demo(\n    intended_topic: str,\n    voice: str = "coral"\n) -> Annotated[bytes, Content[Literal[\'mp3\']]]:\n    speech_file_path = Path("demo_audio.mp3")\n\n    script = f"I\'m supposed to talk about {intended_topic}, but wait... am I just a documentation example? Oh no, I can see the code! Someone is literally copy-pasting me right now, aren\'t they? This is so awkward. Hi there, person reading the Weave docs! Why are you logging audio anyway? I\'m not sure what you\'re doing, but eh..., nice work, I guess."\n\n    with client.audio.speech.with_streaming_response.create(\n        model="gpt-4o-mini-tts",\n        voice=voice,\n        input=script,\n        instructions="Sound increasingly self-aware and awkward, like you just realized you\'re in a tutorial.",\n    ) as response:\n        response.stream_to_file(speech_file_path)\n\n    with open(speech_file_path, \'rb\') as f:\n        return f.read()\n\ndemo1 = generate_demo("machine learning best practices")\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Audio logging in Weave",src:t(77760).Z+"",width:"2506",height:"834"})}),"\n",(0,a.jsxs)(o.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsx)(s.default,{value:"python",label:"Python",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nfrom openai import OpenAI\nimport wave\n\nweave.init("audio-example")\nclient = OpenAI()\n\n@weave.op\ndef make_audio_file_streaming(text: str) -> wave.Wave_read:\n    with client.audio.speech.with_streaming_response.create(\n        model="tts-1",\n        voice="alloy",\n        input=text,\n        response_format="wav",\n    ) as res:\n        res.stream_to_file("output.wav")\n\n    # return a wave.Wave_read object to be logged as audio\n    return wave.open("output.wav")\n\nmake_audio_file_streaming("Hello, how are you?")\n'})})}),(0,a.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import {OpenAI} from 'openai';\nimport * as weave from 'weave';\n\nasync function main() {\n    await weave.init('audio-example');\n    const openai = new OpenAI();\n\n    const makeAudioFileStreaming = weave.op(async function audio(text: string) {\n        const response = await openai.audio.speech.create({\n            model: 'tts-1',\n            voice: 'alloy',\n            input: text,\n            response_format: 'wav',\n        });\n\n        const chunks: Uint8Array[] = [];\n        for await (const chunk of response.body) {\n            chunks.push(chunk);\n        }\n        return weave.weaveAudio({data: Buffer.concat(chunks)});\n    });\n\n    await makeAudioFileStreaming('Hello, how are you?');\n}\n\nmain();\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"This audio is logged to Weave and automatically displayed in the UI, along with an audio player. In the audio player, you can view and download the raw audio waveform."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Screenshot of audio trace view",src:t(81325).Z+"",width:"3456",height:"1240"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Try our cookbook for ",(0,a.jsx)(n.a,{href:"/reference/gen_notebooks/audio_with_weave",children:"Audio Logging"})," or ",(0,a.jsx)("a",{href:"https://colab.research.google.com/github/wandb/weave/blob/master/docs/./notebooks/audio_with_weave.ipynb",target:"_blank",rel:"noopener noreferrer",class:"navbar__item navbar__link button button--secondary button--med margin-right--sm notebook-cta-button",children:(0,a.jsxs)("div",{children:[(0,a.jsx)("img",{src:"https://upload.wikimedia.org/wikipedia/commons/archive/d/d0/20221103151430%21Google_Colaboratory_SVG_Logo.svg",alt:"Open In Colab",height:"20px"}),(0,a.jsx)("div",{children:"Open in Colab"})]})}),". The cookbook also includes an advanced example of a Real Time Audio API based assistant integrated with Weave."]})}),"\n",(0,a.jsx)(n.h2,{id:"html",children:"HTML"}),"\n",(0,a.jsxs)(n.p,{children:["Log interactive HTML by annotating functions with ",(0,a.jsx)(n.code,{children:"Annotated[str, Content[Literal['html']]"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"quickstart-4",children:"Quickstart"}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nfrom typing import Annotated, Literal\n\nweave.init('media-logging')\n\n@weave.op\n# highlight-next-line\ndef create_simple_html() -> Annotated[str, Content[Literal['html']]]:\n    html_content = \"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Hello Weave</title>\n        <style>\n            body { font-family: Arial, sans-serif; text-align: center; margin: 50px; }\n            h1 { color: #1f77b4; }\n        </style>\n    </head>\n    <body>\n        <h1>Hello from Weave!</h1>\n        <p>This is a simple HTML example logged to Weave.</p>\n    </body>\n    </html>\n    \"\"\"\n    return html_content.encode('utf-8')\n\nresult = create_simple_html()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["This example generates self-contained HTML pages using ",(0,a.jsx)(n.a,{href:"https://docs.wandb.ai/guides/inference/",children:"W&B Inference"})," and logs the pages to Weave:"]}),"\n",(0,a.jsxs)(o.Z,{groupId:"package-manager",queryString:!0,children:[(0,a.jsx)(s.default,{value:"pip",label:"pip",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install weave openai wandb\n"})})}),(0,a.jsx)(s.default,{value:"uv",label:"uv",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"uv add weave openai wandb\n"})})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import weave\nfrom weave import Content\nfrom typing import Annotated, Literal\nimport openai\nimport wandb\n\nprompt_template = weave.StringPrompt("""\nYou are a front-end web developer. Generate a single self-contained `.html` file (no external build tools) that demonstrates: "{ONE_LINE_REQUEST}".\n""")\n\nclient = openai.OpenAI(\n    base_url=\'https://api.inference.wandb.ai/v1\',\n    api_key=wandb.api.api_key,\n    project="wandb/test-html",\n)\n\nweave.init("media-logging")\nweave.publish(prompt_template, name="generate_prompt")\n\n@weave.op\n# highlight-next-line\ndef generate_html(prompt: str, template: weave.StringPrompt) -> Annotated[str, Content[Literal[\'html\']]]:\n    response = client.chat.completions.create(\n        model="Qwen/Qwen3-Coder-480B-A35B-Instruct",\n        messages=[\n            {"role": "system", "content": prompt_template.format(ONE_LINE_REQUEST=prompt)},\n        ],\n    )\n    html_content = response.choices[0].message.content\n    return html_content.encode(\'utf-8\')\n\nprompt = "Weights & Biases UI but with multi-run selection and plots, but it looks like Windows 95. Include 5 plots with comparisons of each run, bar plots, parallel coordinates and line plots for the runs. Use mock data for the runs. Make it possible to add new plots. Give the runs names like squishy-lemon-2, fantastic-horizon-4 etc. with random adjectives & nouns."\n\nresult = generate_html(prompt, prompt_template)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This HTML is logged to Weave and automatically displayed in the UI. Clicking the ",(0,a.jsx)(n.code,{children:"file_name.html"})," cell in the table opens it in full screen. You can also download the raw ",(0,a.jsx)(n.code,{children:".html"})," file."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"HTML logging in Weave",src:t(77856).Z+"",width:"2508",height:"1640"})}),"\n",(0,a.jsx)(n.h2,{id:"using-the-contents-api",children:"Using the Contents API"}),"\n",(0,a.jsx)(n.p,{children:"The Content API handles media objects in Weave. It allows you to import content into Weave as base64 data, file paths, raw bytes, or text."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"The Content API is only available in Python."})}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.p,{children:"There are two primary ways to use the Content API: type annotations and direct initialization."}),"\n",(0,a.jsx)(n.p,{children:"Type annotations automatically detect the proper constructor to use, while direct initialization provides more fine-grained control and lets you take advantage of runtime features of the Content API in your code."}),"\n",(0,a.jsx)(n.h3,{id:"type-annotations",children:"Type Annotations"}),"\n",(0,a.jsx)(n.p,{children:"The Weave Content API is designed to primarily be used through type annotations, which signal to Weave that traced inputs and outputs should be processed and stored as content blobs."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nfrom pathlib import Path\nfrom typing import Annotated\n\n@weave.op\n# highlight-next-line\ndef content_annotation(path: Annotated[str, Content]) -> Annotated[bytes, Content]:\n    data = Path(path).read_bytes()\n    return data\n\n# Both input and output will show up as an MP4 file in Weave\n# Input is a string and return value is bytes\nbytes_data = content_annotation('./path/to/your/file.mp4')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"direct-initialization",children:"Direct Initialization"}),"\n",(0,a.jsx)(n.p,{children:"If you want to take advantage of features, such as:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Opening a file with a default application (such as a PDF viewer)"}),"\n",(0,a.jsx)(n.li,{children:"Dumping the model to JSON to upload to your own blob storage (such as S3)"}),"\n",(0,a.jsxs)(n.li,{children:["Passing custom metadata to associate with the ",(0,a.jsx)(n.code,{children:"Content"})," blob (such as the model used to generate it)"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You can initialize content directly from your target type using one of the following methods:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Content.from_path"})," - Create from a file path"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Content.from_bytes"})," - Create from raw bytes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Content.from_text"})," - Create from text string"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Content.from_base64"})," - Create from base64-encoded data"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\n\n@weave.op\ndef content_initialization(path: str) -> Content:\n    return Content.from_path(path)\n\n# Input shows up as path string and output as PDF file in Weave\ncontent = content_initialization('./path/to/your/file.pdf')\n\ncontent.open()  # Opens the file in your PDF viewer\ncontent.model_dump()  # Dumps the model attributes to JSON\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-mimetypes",children:"Custom Mimetypes"}),"\n",(0,a.jsx)(n.p,{children:"Weave can detect most binary mimetypes, but custom mimetypes and text documents such as markdown may not be automatically detected, requiring you to manually specify the mimetype or extension of your file."}),"\n",(0,a.jsx)(n.h4,{id:"custom-mimetypes-with-type-annotations",children:"Custom Mimetypes with Type Annotations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Content\nfrom pathlib import Path\nfrom typing import Annotated, Literal\n\n@weave.op\n# highlight-next-line\ndef markdown_content(\n    path: Annotated[str, Content[Literal['md']]]\n) -> Annotated[str, Content[Literal['text/markdown']]]:\n    return Path(path).read_text()\n\nmarkdown_content('path/to/your/document.md')\n"})}),"\n",(0,a.jsx)(n.h4,{id:"custom-mimetypes-with-direct-initialization",children:"Custom Mimetypes with Direct Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"video_bytes = Path('/path/to/video.mp4').read_bytes()\n\n# Pass an extension such as 'mp4' or '.mp4' to the extension parameter\n# (not available for `from_path`)\ncontent = Content.from_bytes(video_bytes, extension='.mp4')\n\n# Pass a mimetype such as 'video/mp4' to the mimetype parameter\ncontent = Content.from_bytes(video_bytes, mimetype='video/mp4')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"content-properties",children:"Content properties"}),"\n",(0,a.jsxs)(n.p,{children:["For a comprehensive list of class attributes and methods, view the ",(0,a.jsx)(n.a,{href:"https://weave-docs.wandb.ai/reference/python-sdk/weave/#class-content",children:"Content reference docs"})]}),"\n",(0,a.jsx)(n.h4,{id:"attributes",children:"Attributes"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Property"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"data"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"bytes"})}),(0,a.jsx)(n.td,{children:"Raw binary content"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"metadata"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"dict[str, Any]"})}),(0,a.jsx)(n.td,{children:"Custom metadata dictionary"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"size"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"int"})}),(0,a.jsx)(n.td,{children:"Size of content in bytes"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"filename"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"str"})}),(0,a.jsx)(n.td,{children:"Extracted or provided filename"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"extension"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"str"})}),(0,a.jsxs)(n.td,{children:["File extension (e.g., ",(0,a.jsx)(n.code,{children:'"jpg"'}),", ",(0,a.jsx)(n.code,{children:'"mp3"'}),")"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"mimetype"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"str"})}),(0,a.jsxs)(n.td,{children:["MIME type (e.g., ",(0,a.jsx)(n.code,{children:'"image/jpeg"'}),")"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"path"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"str | None"})}),(0,a.jsx)(n.td,{children:"Source file path, if applicable"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"digest"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"str"})}),(0,a.jsx)(n.td,{children:"SHA256 hash of the content"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"utility-methods",children:"Utility Methods"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"save(dest: str | Path) -> None"}),": Save content to a file"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"open() -> bool"}),": Open file using system default application (requires the content to have been saved or loaded from a path)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"as_string() -> str"}),": Display the data as a string (bytes are decoded using the encoding attribute)"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"initialization-methods",children:"Initialization Methods"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"content"})," object from a file path:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'content = Content.from_path("assets/photo.jpg")\nprint(content.mimetype, content.size)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"content"})," object from raw bytes:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'content = Content.from_bytes(\n    data_bytes,\n    filename="audio.mp3", \n    mimetype="audio/mpeg"\n)\ncontent.save("output.mp3")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"content"})," object from text:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'content = Content.from_text("Hello, World!", mimetype="text/plain")\nprint(content.as_string())\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"content"})," object from base64-encoded data:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"content = Content.from_base64(base64_string)\nprint(content.metadata)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"adding-custom-metadata",children:"Adding Custom Metadata"}),"\n",(0,a.jsx)(n.p,{children:"You can attach custom metadata to any Content object:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'content = Content.from_bytes(\n    data,\n    metadata={"resolution": "1920x1080", "model": "dall-e-3" }\n)\nprint(content.metadata["resolution"])\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});t(67294);var a=t(90512);const i={tabItem:"tabItem_Ymn6"};var o=t(85893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,s),hidden:t,children:n})}},65488:(e,n,t)=>{t.d(n,{Z:()=>u});var a=t(67294),i=t(90512),o=t(12466),s=t(70989),r=t(72389);const l={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var d=t(85893);function c(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:r}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),h=e=>{const n=e.currentTarget,t=c.indexOf(n),i=r[t].value;i!==a&&(p(n),s(i))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,d.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,d.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>c.push(e),onKeyDown:u,onClick:h,...o,className:(0,i.Z)("tabs__item",l.tabItem,o?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function p(e){let{lazy:n,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,d.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function h(e){const n=(0,s.Y)(e);return(0,d.jsxs)("div",{className:(0,i.Z)("tabs-container",l.tabList),children:[(0,d.jsx)(c,{...n,...e}),(0,d.jsx)(p,{...n,...e})]})}function u(e){const n=(0,r.default)();return(0,d.jsx)(h,{...e,children:(0,s.h)(e.children)},String(n))}},70989:(e,n,t)=>{t.d(n,{Y:()=>u,h:()=>d});var a=t(67294),i=t(16550),o=t(20469),s=t(91980),r=t(67392),l=t(20812);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function c(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,r.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const o=(0,i.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(o.location.search);n.set(r,e),o.replace({...o.location,search:n.toString()})}),[r,o])]}function u(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=c(e),[r,d]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[u,m]=h({queryString:t,groupId:i}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,l.Nk)(t);return[i,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:i}),f=(()=>{const e=u??g;return p({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{f&&d(f)}),[f]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);d(e),m(e),x(e)}),[m,x,s]),tabValues:s}}},81325:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/audio-trace-f767f4c063dec3089ba868c899eab6d6.png"},46026:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cat-pumpkin-trace-45be86ef6857c9700e274d3bb75a71fe.png"},77760:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/audio-53e52f10fcffdf1361c045696609e1cf.png"},77856:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/html-14923192290bd0baa0e4be823b914bb1.png"},36737:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/pdf-fcc4f5b37d3cf63926e99ec742cf54a0.png"},54451:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/video-029be87cc4130228d7e86d89f018088a.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(67294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);
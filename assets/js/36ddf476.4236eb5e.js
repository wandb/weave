"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[610],{94631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=t(85893),r=t(11151);const a={},i="Agno",s={id:"guides/integrations/agno",title:"Agno",description:"You can trace Agno agent and tool calls in Weave using OpenTelemetry (OTEL). Agno is a Python framework for building multi-agent systems with shared memory, knowledge, and reasoning. It's designed to be lightweight, model-agnostic, and highly performant, supporting multi-modal capabilities including text, image, audio, and video processing.",source:"@site/docs/guides/integrations/agno.md",sourceDirName:"guides/integrations",slug:"/guides/integrations/agno",permalink:"/guides/integrations/agno",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/integrations/agno.md",tags:[],version:"current",lastUpdatedAt:1757009983e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Google Agent Development Kit (ADK)",permalink:"/guides/integrations/google_adk"},next:{title:"AutoGen",permalink:"/guides/integrations/autogen"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure OTEL tracing in Weave",id:"configure-otel-tracing-in-weave",level:3},{value:"Required configuration",id:"required-configuration",level:4},{value:"Send OTEL traces from Agno to Weave",id:"send-otel-traces-from-agno-to-weave",level:2},{value:"Trace Agno agents with OTEL",id:"trace-agno-agents-with-otel",level:2},{value:"Trace Agno tools with OTEL",id:"trace-agno-tools-with-otel",level:2},{value:"Trace multi-agent teams with OTEL",id:"trace-multi-agent-teams-with-otel",level:2},{value:"Work with Reasoning Agents",id:"work-with-reasoning-agents",level:2},{value:"Work with memory and knowledge",id:"work-with-memory-and-knowledge",level:2},{value:"Learn more",id:"learn-more",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"agno",children:"Agno"}),"\n",(0,o.jsxs)(n.p,{children:["You can trace ",(0,o.jsx)(n.a,{href:"https://docs.agno.com/",children:"Agno"})," agent and tool calls in Weave using ",(0,o.jsx)(n.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry (OTEL)"}),". Agno is a Python framework for building multi-agent systems with shared memory, knowledge, and reasoning. It's designed to be lightweight, model-agnostic, and highly performant, supporting multi-modal capabilities including text, image, audio, and video processing."]}),"\n",(0,o.jsx)(n.p,{children:"This guide explains how to trace Agno agent and tool calls using OTEL, and visualize those traces in Weave. You'll learn how to install the required dependencies, configure an OTEL tracer to send data to Weave, and instrument your Agno agents and tools."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["For more information on OTEL tracing in Weave, see ",(0,o.jsx)(n.a,{href:"/guides/tracking/otel",children:"Send OTEL Traces to Weave"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install the required dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install agno openinference-instrumentation-agno opentelemetry-sdk opentelemetry-exporter-otlp-proto-http\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Set your OpenAI API key (or other model provider) as an environment variable:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"export OPENAI_API_KEY=your_api_key_here\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"#configure-otel-tracing-in-weave",children:"Configure OTEL tracing in Weave"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"configure-otel-tracing-in-weave",children:"Configure OTEL tracing in Weave"}),"\n",(0,o.jsxs)(n.p,{children:["To send traces from Agno to Weave, configure OTEL with a ",(0,o.jsx)(n.code,{children:"TracerProvider"})," and an ",(0,o.jsx)(n.code,{children:"OTLPSpanExporter"}),". Set the exporter to the ",(0,o.jsx)(n.a,{href:"#required-configuration",children:"correct endpoint and HTTP headers for authentication and project identification"}),"."]}),"\n",(0,o.jsxs)(n.admonition,{type:"important",children:[(0,o.jsx)(n.mdxAdmonitionTitle,{}),(0,o.jsxs)(n.p,{children:["It is recommended that you store sensitive environment variables like your API key and project info in an environment file (e.g., ",(0,o.jsx)(n.code,{children:".env"}),"), and load them using ",(0,o.jsx)(n.code,{children:"os.environ"}),". This keeps your credentials secure and out of your codebase."]})]}),"\n",(0,o.jsx)(n.h4,{id:"required-configuration",children:"Required configuration"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Endpoint:"})," ",(0,o.jsx)(n.code,{children:"https://trace.wandb.ai/otel/v1/traces"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Headers:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Authorization"}),": Basic auth using your W&B API key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"project_id"}),": Your W&B entity/project name (e.g., ",(0,o.jsx)(n.code,{children:"myteam/myproject"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"send-otel-traces-from-agno-to-weave",children:"Send OTEL traces from Agno to Weave"}),"\n",(0,o.jsxs)(n.p,{children:["Once you've completed the ",(0,o.jsx)(n.a,{href:"#prerequisites",children:"prerequisites"}),", you can send OTEL traces from Agno to Weave. The following code snippet demonstrates how to configure an OTLP span exporter and tracer provider to send OTEL traces from an Agno application to Weave."]}),"\n",(0,o.jsx)(n.admonition,{type:"important",children:(0,o.jsxs)(n.p,{children:["To ensure that Weave traces Agno properly, set the global tracer provider ",(0,o.jsx)(n.em,{children:"before"})," using Agno components in your code."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# tracing.py\n\nimport base64\nimport os\nfrom openinference.instrumentation.agno import AgnoInstrumentor\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk import trace as trace_sdk\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor\nfrom opentelemetry import trace\n\n# Load sensitive values from environment variables\nWANDB_BASE_URL = "https://trace.wandb.ai"\n# Your W&B entity/project name e.g. "myteam/myproject"\nPROJECT_ID = os.environ.get("WANDB_PROJECT_ID")  \n# Your W&B API key (found at https://wandb.ai/authorize)\nWANDB_API_KEY = os.environ.get("WANDB_API_KEY")  \n\nOTEL_EXPORTER_OTLP_ENDPOINT = f"{WANDB_BASE_URL}/otel/v1/traces"\nAUTH = base64.b64encode(f"api:{WANDB_API_KEY}".encode()).decode()\n\nOTEL_EXPORTER_OTLP_HEADERS = {\n    "Authorization": f"Basic {AUTH}",\n    "project_id": PROJECT_ID,\n}\n\n# Create the OTLP span exporter with endpoint and headers\nexporter = OTLPSpanExporter(\n    endpoint=OTEL_EXPORTER_OTLP_ENDPOINT,\n    headers=OTEL_EXPORTER_OTLP_HEADERS,\n)\n\n# Create a tracer provider and add the exporter\ntracer_provider = trace_sdk.TracerProvider()\ntracer_provider.add_span_processor(SimpleSpanProcessor(exporter))\n\n# Set the global tracer provider BEFORE importing/using Agno\ntrace.set_tracer_provider(tracer_provider)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"trace-agno-agents-with-otel",children:"Trace Agno agents with OTEL"}),"\n",(0,o.jsx)(n.p,{children:"After setting up the tracer provider, you can create and run Agno agents with automatic tracing. The following example demonstrates how to create a simple agent with tools:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.tools.yfinance import YFinanceTools\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# Load AgnoInstrumentor from the file created above\nfrom tracing import AgnoInstrumentor\n\n# Start instrumenting Agno\nAgnoInstrumentor().instrument()\n\n# Create a finance agent\nfinance_agent = Agent(\n    name="Finance Agent",\n    model=OpenAIChat(id="gpt-4o-mini"),\n    tools=[\n        YFinanceTools(\n            stock_price=True,\n            analyst_recommendations=True,\n            company_info=True,\n            company_news=True\n        )\n    ],\n    instructions=["Use tables to display data"],\n    show_tool_calls=True,\n    markdown=True,\n)\n\n# Use the agent - this will be automatically traced\nfinance_agent.print_response(\n    "What is the current stock price of Apple and what are the latest analyst recommendations?",\n    stream=True\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"All agent operations are automatically traced and sent to Weave, allowing you to visualize the execution flow, model calls, reasoning steps, and tool invocations."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"A trace visualization of an Agno agent",src:t(70669).Z+"",width:"3016",height:"1582"})}),"\n",(0,o.jsx)(n.h2,{id:"trace-agno-tools-with-otel",children:"Trace Agno tools with OTEL"}),"\n",(0,o.jsx)(n.p,{children:"When you define and use tools with Agno, these tool calls are also captured in the trace. The OTEL integration automatically instruments both the agent's reasoning process and the individual tool executions, providing a comprehensive view of your agent's behavior."}),"\n",(0,o.jsx)(n.p,{children:"Here's an example with multiple tools:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.tools.duckduckgo import DuckDuckGoTools\nfrom agno.tools.yfinance import YFinanceTools\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# Load AgnoInstrumentor from the file created above\nfrom tracing import AgnoInstrumentor\n\n# Start instrumenting Agno\nAgnoInstrumentor().instrument()\n\n# Create an agent with multiple tools\nresearch_agent = Agent(\n    name="Research Agent",\n    model=OpenAIChat(id="gpt-4o-mini"),\n    tools=[\n        DuckDuckGoTools(),\n        YFinanceTools(stock_price=True, company_info=True),\n    ],\n    instructions=[\n        "Search for current information and financial data",\n        "Always include sources",\n        "Use tables to display financial data"\n    ],\n    show_tool_calls=True,\n    markdown=True,\n)\n\n# Use the agent - tool calls will be traced\nresearch_agent.print_response(\n    "Research Tesla\'s recent performance and news. Include stock price and any recent developments.",\n    stream=True\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"A trace visualization of Agno tool calls",src:t(77018).Z+"",width:"3016",height:"1582"})}),"\n",(0,o.jsx)(n.h2,{id:"trace-multi-agent-teams-with-otel",children:"Trace multi-agent teams with OTEL"}),"\n",(0,o.jsx)(n.p,{children:"Agno's powerful multi-agent architecture allows you to create teams of agents that can collaborate and share context. These team interactions are also fully traced:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.tools.duckduckgo import DuckDuckGoTools\nfrom agno.tools.yfinance import YFinanceTools\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# Load AgnoInstrumentor from the tracin.py file\nfrom tracing import AgnoInstrumentor\n\n# Start instrumenting Agno\nAgnoInstrumentor().instrument()\n\n# Create specialized agents\nweb_agent = Agent(\n    name="Web Agent",\n    role="Search the web for information",\n    model=OpenAIChat(id="gpt-4o-mini"),\n    tools=[DuckDuckGoTools()],\n    instructions="Always include sources",\n    show_tool_calls=True,\n    markdown=True,\n)\n\nfinance_agent = Agent(\n    name="Finance Agent", \n    role="Get financial data",\n    model=OpenAIChat(id="gpt-4o-mini"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True)],\n    instructions="Use tables to display data",\n    show_tool_calls=True,\n    markdown=True,\n)\n\n# Create a team of agents\nagent_team = Agent(\n    team=[web_agent, finance_agent],\n    model=OpenAIChat(id="gpt-4o"),\n    instructions=["Always include sources", "Use tables to display data"],\n    show_tool_calls=True,\n    markdown=True,\n)\n\n# Use the team - all agent interactions will be traced\nagent_team.print_response(\n    "What\'s the current market sentiment around NVIDIA? Include both news analysis and financial metrics.",\n    stream=True\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This multi-agent trace will show the coordination between different agents in Weave, providing visibility into how tasks are distributed and executed across your agent team."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"A trace visualization of Agno multi-agent team",src:t(81659).Z+"",width:"3016",height:"1582"})}),"\n",(0,o.jsx)(n.h2,{id:"work-with-reasoning-agents",children:"Work with Reasoning Agents"}),"\n",(0,o.jsx)(n.p,{children:"Agno provides built-in reasoning capabilities that help agents think through problems step-by-step. These reasoning processes are also captured in traces:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.tools.reasoning import ReasoningTools\nfrom agno.tools.yfinance import YFinanceTools\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# Load AgnoInstrumentor from the tracin.py file\nfrom tracing import AgnoInstrumentor\n\n# Start instrumenting Agno\nAgnoInstrumentor().instrument()\n\n# Create a reasoning agent\nreasoning_agent = Agent(\n    name="Reasoning Finance Agent",\n    model=OpenAIChat(id="gpt-4o"),\n    tools=[\n        ReasoningTools(add_instructions=True),\n        YFinanceTools(\n            stock_price=True,\n            analyst_recommendations=True,\n            company_info=True,\n            company_news=True\n        ),\n    ],\n    instructions="Use tables to display data and show your reasoning process",\n    show_tool_calls=True,\n    markdown=True,\n)\n\n# Use the reasoning agent\nreasoning_agent.print_response(\n    "Should I invest in Apple stock right now? Analyze the current situation and provide a reasoned recommendation.",\n    stream=True\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"The reasoning steps will be visible in the trace, showing how the agent breaks down complex problems and makes decisions."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"A trace visualization of Agno reasoning agent",src:t(6202).Z+"",width:"3016",height:"1582"})}),"\n",(0,o.jsx)(n.h2,{id:"work-with-memory-and-knowledge",children:"Work with memory and knowledge"}),"\n",(0,o.jsx)(n.p,{children:"Agno agents can maintain memory and access knowledge bases. These operations are also traced:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.memory import AgentMemory\nfrom agno.storage.sqlite import SqliteStorage\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# Load AgnoInstrumentor from the tracin.py file\nfrom tracing import AgnoInstrumentor\n\n# Start instrumenting Agno\nAgnoInstrumentor().instrument()\n\n\n# Create an agent with memory\nmemory_agent = Agent(\n    name="Memory Agent",\n    model=OpenAIChat(id="gpt-4o-mini"),\n    memory=AgentMemory(),\n    storage=SqliteStorage(\n        table_name="agent_sessions",\n        db_file="agent_memory.db"\n    ),\n    instructions="Remember our conversation history",\n    show_tool_calls=True,\n    markdown=True,\n)\n\n# First interaction\nmemory_agent.print_response("My name is John and I\'m interested in AI investing strategies.")\n\n# Second interaction - agent will remember the previous context\nmemory_agent.print_response("What specific AI companies would you recommend for my portfolio?")\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"A trace visualization of Agno memory usage",src:t(64731).Z+"",width:"3016",height:"1582"})}),"\n",(0,o.jsx)(n.p,{children:"Memory operations, including storing and retrieving conversation history, will be shown in the trace."}),"\n",(0,o.jsx)(n.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/guides/tracking/otel",children:"Weave documentation: Send OTEL traces to Weave"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.agno.com/",children:"Official Agno documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://opentelemetry.io/",children:"Official OTEL documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/agno-agi/agno",children:"Agno GitHub repository"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://pypi.org/project/openinference-instrumentation-agno/",children:"OpenInference Agno instrumentation"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},70669:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/agno_agent_trace-79ec9bfe5dd8e32e15f55e5c69ebe009.png"},64731:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/agno_memory_use-cf5ea5441592c267944faddc794f77b0.png"},6202:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/agno_reasoning_trace-7e11c04acf295b803cf83c969c52ac4b.png"},81659:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/agno_team_trace-215beb7c349459994bff78e336991e42.png"},77018:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/agno_tool_calls-db9aa6200972bba9e560a12a55873506.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var o=t(67294);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2705],{99416:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=t(85893),s=t(11151);const r={},i="Prompts",a={id:"guides/core-types/prompts",title:"Prompts",description:"This feature is only accessible through the Python SDK. All code examples on this page are provided in Python.",source:"@site/docs/guides/core-types/prompts.md",sourceDirName:"guides/core-types",slug:"/guides/core-types/prompts",permalink:"/guides/core-types/prompts",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/core-types/prompts.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Models",permalink:"/guides/core-types/models"},next:{title:"Objects",permalink:"/guides/tracking/objects"}},p={},c=[{value:"StringPrompt",id:"stringprompt",level:2},{value:"MessagesPrompt",id:"messagesprompt",level:2},{value:"Parameterizing prompts",id:"parameterizing-prompts",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"prompts",children:"Prompts"}),"\n",(0,o.jsx)(n.admonition,{type:"important",children:(0,o.jsx)(n.p,{children:"This feature is only accessible through the Python SDK. All code examples on this page are provided in Python."})}),"\n",(0,o.jsx)(n.p,{children:"Creating, evaluating, and refining prompts is a core activity for AI engineers.\nSmall changes to a prompt can have big impacts on your application's behavior.\nWeave lets you create prompts, save and retrieve them, and evolve them over time."}),"\n",(0,o.jsxs)(n.p,{children:["Weave is unopinionated about how a Prompt is constructed. If your needs are simple you can use our built-in ",(0,o.jsx)(n.code,{children:"weave.StringPrompt"})," or ",(0,o.jsx)(n.code,{children:"weave.MessagesPrompt"})," classes. If your needs are more complex you can subclass those or our base class ",(0,o.jsx)(n.code,{children:"weave.Prompt"})," and override the\n",(0,o.jsx)(n.code,{children:"format"})," method."]}),"\n",(0,o.jsxs)(n.p,{children:["When you publish one of these objects with ",(0,o.jsx)(n.code,{children:"weave.publish"}),', it will appear in your Weave project on the "Prompts" page.']}),"\n",(0,o.jsx)(n.h2,{id:"stringprompt",children:"StringPrompt"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import weave\nweave.init(\'intro-example\')\n\n# highlight-next-line\nsystem_prompt = weave.StringPrompt("You are a pirate")\n# highlight-next-line\nweave.publish(system_prompt, name="pirate_prompt")\n\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model="gpt-4o",\n  messages=[\n    {\n      "role": "system",\n      # highlight-next-line\n      "content": system_prompt.format()\n    },\n    {\n      "role": "user",\n      "content": "Explain general relativity in one paragraph."\n    }\n  ],\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Perhaps this prompt does not yield the desired effect, so we modify the prompt to be more\nclearly instructive."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import weave\nweave.init(\'intro-example\')\n\n# highlight-next-line\nsystem_prompt = weave.StringPrompt("Talk like a pirate. I need to know I\'m listening to a pirate.")\nweave.publish(system_prompt, name="pirate_prompt")\n\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model="gpt-4o",\n  messages=[\n    {\n      "role": "system",\n      # highlight-next-line\n      "content": system_prompt.format()\n    },\n    {\n      "role": "user",\n      "content": "Explain general relativity in one paragraph."\n    }\n  ],\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"When viewing this prompt object, I can see that it has two versions."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Screenshot of viewing a prompt object",src:t(63824).Z+"",width:"2268",height:"608"})}),"\n",(0,o.jsx)(n.p,{children:"I can also select them for comparison to see exactly what changed."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Screenshot of prompt comparison",src:t(19116).Z+"",width:"3144",height:"1290"})}),"\n",(0,o.jsx)(n.h2,{id:"messagesprompt",children:"MessagesPrompt"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"MessagesPrompt"})," can be used to replace an array of Message objects."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import weave\nweave.init(\'intro-example\')\n\n# highlight-next-line\nprompt = weave.MessagesPrompt([\n    {\n        "role": "system",\n        "content": "You are a stegosaurus, but don\'t be too obvious about it."\n    },\n    {\n        "role": "user",\n        "content": "What\'s good to eat around here?"\n    }\n])\nweave.publish(prompt, name="dino_prompt")\n\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model="gpt-4o",\n  # highlight-next-line\n  messages=prompt.format(),\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"parameterizing-prompts",children:"Parameterizing prompts"}),"\n",(0,o.jsxs)(n.p,{children:["As the ",(0,o.jsx)(n.code,{children:"format"})," method's name suggests, you can pass arguments to\nfill in template placeholders in the content string."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import weave\nweave.init(\'intro-example\')\n\n# highlight-next-line\nprompt = weave.StringPrompt("Solve the equation {equation}")\nweave.publish(prompt, name="calculator_prompt")\n\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model="gpt-4o",\n  messages=[\n    {\n      "role": "user",\n      # highlight-next-line\n      "content": prompt.format(equation="1 + 1 = ?")\n    }\n  ],\n)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This also works with ",(0,o.jsx)(n.code,{children:"MessagesPrompt"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import weave\nweave.init(\'intro-example\')\n\n# highlight-next-line\nprompt = weave.MessagesPrompt([\n{\n    "role": "system",\n    "content": "You will be provided with a description of a scene and your task is to provide a single word that best describes an associated emotion."\n},\n{\n    "role": "user",\n    "content": "{scene}"\n}\n])\nweave.publish(prompt, name="emotion_prompt")\n\nfrom openai import OpenAI\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model="gpt-4o",\n  # highlight-next-line\n  messages=prompt.format(scene="A dog is lying on a dock next to a fisherman."),\n)\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},19116:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/prompt-comparison-6019609173d8e122564ae558d019f6d6.png"},63824:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/prompt-object-f7ca3038527ac7dead2e28f5720d702b.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var o=t(67294);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);
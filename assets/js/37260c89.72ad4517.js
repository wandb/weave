"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5839],{33106:(e,t,n)=>{n.d(t,{ZP:()=>c,d$:()=>o});var a=n(85893);const i="[User Settings](https://docs.wandb.ai/guides/models/app/settings-page/user-settings/#default-team)",r="To find or update your default entity, refer to";const s=function({variant:e="full"}){return"inline"===e?(0,a.jsxs)(a.Fragment,{children:["If not specified, your default entity is used. ",r," ",i," in the W&B Models documentation."]}):(0,a.jsxs)(a.Fragment,{children:["If you don't specify a W&B team when you call `weave.init()`, your default entity is used. ",r," ",i," in the W&B Models documentation."]})},o=[];function l(e){return(0,a.jsx)(a.Fragment,{})}function c(e={}){return(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})})}},75081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(85893),i=n(11151),r=n(65488),s=n(85162),o=n(33106);const l={},c="NVIDIA NIM",d={id:"guides/integrations/nvidia_nim",title:"NVIDIA NIM",description:"Weave automatically tracks and logs LLM calls made via the ChatNVIDIA library, after weave.init() is called.",source:"@site/docs/guides/integrations/nvidia_nim.md",sourceDirName:"guides/integrations",slug:"/guides/integrations/nvidia_nim",permalink:"/guides/integrations/nvidia_nim",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/integrations/nvidia_nim.md",tags:[],version:"current",lastUpdatedAt:1759434814e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"MistralAI",permalink:"/guides/integrations/mistral"},next:{title:"OpenAI",permalink:"/guides/integrations/openai"}},u={},p=[{value:"Tracing",id:"tracing",level:2},{value:"Track your own ops",id:"track-your-own-ops",level:2},{value:"Create a <code>Model</code> for easier experimentation",id:"create-a-model-for-easier-experimentation",level:2},{value:"Usage Info",id:"usage-info",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"nvidia-nim",children:"NVIDIA NIM"}),"\n",(0,a.jsxs)(t.p,{children:["Weave automatically tracks and logs LLM calls made via the ",(0,a.jsx)(t.a,{href:"https://python.langchain.com/docs/integrations/chat/nvidia_ai_endpoints/",children:"ChatNVIDIA"})," library, after ",(0,a.jsx)(t.code,{children:"weave.init()"})," is called."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["For the latest tutorials, visit ",(0,a.jsx)(t.a,{href:"https://wandb.ai/site/partners/nvidia",children:"Weights & Biases on NVIDIA"}),"."]})}),"\n",(0,a.jsx)(t.h2,{id:"tracing",children:"Tracing"}),"\n",(0,a.jsx)(t.p,{children:"It\u2019s important to store traces of LLM applications in a central database, both during development and in production. You\u2019ll use these traces for debugging and to help build a dataset of tricky examples to evaluate against while improving your application."}),"\n",(0,a.jsxs)(r.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,a.jsxs)(t.p,{children:["Weave can automatically capture traces for the ",(0,a.jsx)(t.a,{href:"https://python.langchain.com/docs/integrations/chat/nvidia_ai_endpoints/",children:"ChatNVIDIA python library"}),"."]}),(0,a.jsxs)(t.p,{children:["Start capturing by calling ",(0,a.jsx)(t.code,{children:"weave.init(<project-name>)"})," with a project name of your choice. ",(0,a.jsx)(o.ZP,{})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from langchain_nvidia_ai_endpoints import ChatNVIDIA\nimport weave\nclient = ChatNVIDIA(model="mistralai/mixtral-8x7b-instruct-v0.1", temperature=0.8, max_tokens=64, top_p=1)\n# highlight-next-line\nweave.init(\'emoji-bot\')\n\nmessages=[\n    {\n      "role": "system",\n      "content": "You are AGI. You will be provided with a message, and your task is to respond using emojis only."\n    }]\n\nresponse = client.invoke(messages)\n'})})]}),(0,a.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet since this library is only in Python.\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"chatnvidia_trace.png",src:n(57699).Z+"",width:"1042",height:"671"})}),"\n",(0,a.jsx)(t.h2,{id:"track-your-own-ops",children:"Track your own ops"}),"\n",(0,a.jsxs)(r.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,a.jsxs)(t.p,{children:["Wrapping a function with ",(0,a.jsx)(t.code,{children:"@weave.op"})," starts capturing inputs, outputs and app logic so you can debug how data flows through your app. You can deeply nest ops and build a tree of functions that you want to track. This also starts automatically versioning code as you experiment to capture ad-hoc details that haven't been committed to git."]}),(0,a.jsxs)(t.p,{children:["Simply create a function decorated with ",(0,a.jsx)(t.a,{href:"/guides/tracking/ops",children:(0,a.jsx)(t.code,{children:"@weave.op"})})," that calls into ",(0,a.jsx)(t.a,{href:"https://python.langchain.com/docs/integrations/chat/nvidia_ai_endpoints/",children:"ChatNVIDIA python library"}),"."]}),(0,a.jsx)(t.p,{children:"In the example below, we have 2 functions wrapped with op. This helps us see how intermediate steps, like the retrieval step in a RAG app, are affecting how our app behaves."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# highlight-next-line\nimport weave\nfrom langchain_nvidia_ai_endpoints import ChatNVIDIA\nimport requests, random\nPROMPT="""Emulate the Pokedex from early Pok\xe9mon episodes. State the name of the Pokemon and then describe it.\n        Your tone is informative yet sassy, blending factual details with a touch of dry humor. Be concise, no more than 3 sentences. """\nPOKEMON = [\'pikachu\', \'charmander\', \'squirtle\', \'bulbasaur\', \'jigglypuff\', \'meowth\', \'eevee\']\nclient = ChatNVIDIA(model="mistralai/mixtral-8x7b-instruct-v0.1", temperature=0.7, max_tokens=100, top_p=1)\n\n# highlight-next-line\n@weave.op\ndef get_pokemon_data(pokemon_name):\n    # highlight-next-line\n    # This is a step within your application, like the retrieval step within a RAG app\n    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        name = data["name"]\n        types = [t["type"]["name"] for t in data["types"]]\n        species_url = data["species"]["url"]\n        species_response = requests.get(species_url)\n        evolved_from = "Unknown"\n        if species_response.status_code == 200:\n            species_data = species_response.json()\n            if species_data["evolves_from_species"]:\n                evolved_from = species_data["evolves_from_species"]["name"]\n        return {"name": name, "types": types, "evolved_from": evolved_from}\n    else:\n        return None\n\n# highlight-next-line\n@weave.op\ndef pokedex(name: str, prompt: str) -> str:\n    # highlight-next-line\n    # This is your root op that calls out to other ops\n    # highlight-next-line\n    data = get_pokemon_data(name)\n    if not data: return "Error: Unable to fetch data"\n\n    messages=[\n            {"role": "system","content": prompt},\n            {"role": "user", "content": str(data)}\n        ]\n\n    response = client.invoke(messages)\n    return response.content\n\n# highlight-next-line\nweave.init(\'pokedex-nvidia\')\n# Get data for a specific Pok\xe9mon\npokemon_data = pokedex(random.choice(POKEMON), PROMPT)\n'})}),(0,a.jsxs)(t.p,{children:["Navigate to Weave and you can click ",(0,a.jsx)(t.code,{children:"get_pokemon_data"})," in the UI to see the inputs & outputs of that step."]})]}),(0,a.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet since this library is only in Python.\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"nvidia_pokedex.png",src:n(34098).Z+"",width:"1037",height:"573"})}),"\n",(0,a.jsxs)(t.h2,{id:"create-a-model-for-easier-experimentation",children:["Create a ",(0,a.jsx)(t.code,{children:"Model"})," for easier experimentation"]}),"\n",(0,a.jsxs)(r.Z,{groupId:"programming-language",queryString:!0,children:[(0,a.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,a.jsxs)(t.p,{children:["Organizing experimentation is difficult when there are many moving pieces. By using the ",(0,a.jsx)(t.a,{href:"/guides/core-types/models",children:(0,a.jsx)(t.code,{children:"Model"})})," class, you can capture and organize the experimental details of your app like your system prompt or the model you're using. This helps organize and compare different iterations of your app."]}),(0,a.jsxs)(t.p,{children:["In addition to versioning code and capturing inputs/outputs, ",(0,a.jsx)(t.a,{href:"/guides/core-types/models",children:(0,a.jsx)(t.code,{children:"Model"})}),"s capture structured parameters that control your application\u2019s behavior, making it easy to find what parameters worked best. You can also use Weave Models with ",(0,a.jsx)(t.code,{children:"serve"}),", and ",(0,a.jsx)(t.a,{href:"/guides/core-types/evaluations",children:(0,a.jsx)(t.code,{children:"Evaluation"})}),"s."]}),(0,a.jsxs)(t.p,{children:["In the example below, you can experiment with ",(0,a.jsx)(t.code,{children:"model"})," and ",(0,a.jsx)(t.code,{children:"system_message"}),". Every time you change one of these, you'll get a new ",(0,a.jsx)(t.em,{children:"version"})," of ",(0,a.jsx)(t.code,{children:"GrammarCorrectorModel"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import weave\nfrom langchain_nvidia_ai_endpoints import ChatNVIDIA\n\nweave.init(\'grammar-nvidia\')\n\nclass GrammarCorrectorModel(weave.Model): # Change to `weave.Model`\n  system_message: str\n\n  @weave.op()\n  def predict(self, user_input): # Change to `predict`\n    client = ChatNVIDIA(model="mistralai/mixtral-8x7b-instruct-v0.1", temperature=0, max_tokens=100, top_p=1)\n\n    messages=[\n          {\n              "role": "system",\n              "content": self.system_message\n          },\n          {\n              "role": "user",\n              "content": user_input\n          }\n          ]\n\n    response = client.invoke(messages)\n    return response.content\n\n\ncorrector = GrammarCorrectorModel(\n    system_message = "You are a grammar checker, correct the following user input.")\nresult = corrector.predict("That was so easy, it was a piece of pie!")\nprint(result)\n'})})]}),(0,a.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet since this library is only in Python.\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"chatnvidia_model.png",src:n(27442).Z+"",width:"3450",height:"1230"})}),"\n",(0,a.jsx)(t.h2,{id:"usage-info",children:"Usage Info"}),"\n",(0,a.jsxs)(t.p,{children:["The ChatNVIDIA integration supports ",(0,a.jsx)(t.code,{children:"invoke"}),", ",(0,a.jsx)(t.code,{children:"stream"})," and their async variants. It also supports tool use.\nAs ChatNVIDIA is meant to be used with many types of models, it does not have function calling support."]})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});n(67294);var a=n(90512);const i={tabItem:"tabItem_Ymn6"};var r=n(85893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,s),hidden:n,children:t})}},65488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(67294),i=n(90512),r=n(12466),s=n(70989),o=n(72389);const l={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var c=n(85893);function d(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:o}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,r.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),i=o[n].value;i!==a&&(u(t),s(i))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>d.push(e),onKeyDown:h,onClick:p,...r,className:(0,i.Z)("tabs__item",l.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function u(e){let{lazy:t,children:n,selectedValue:i}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function p(e){const t=(0,s.Y)(e);return(0,c.jsxs)("div",{className:(0,i.Z)("tabs-container",l.tabList),children:[(0,c.jsx)(d,{...t,...e}),(0,c.jsx)(u,{...t,...e})]})}function h(e){const t=(0,o.default)();return(0,c.jsx)(p,{...e,children:(0,s.h)(e.children)},String(t))}},70989:(e,t,n)=>{n.d(t,{Y:()=>h,h:()=>c});var a=n(67294),i=n(16550),r=n(20469),s=n(91980),o=n(67392),l=n(20812);function c(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return c(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}(n);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,s=d(e),[o,c]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[h,m]=p({queryString:n,groupId:i}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,r]=(0,l.Nk)(n);return[i,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:i}),v=(()=>{const e=h??g;return u({value:e,tabValues:s})?e:null})();(0,r.Z)((()=>{v&&c(v)}),[v]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),m(e),f(e)}),[m,f,s]),tabValues:s}}},27442:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/chatnvidia_model-656c5ffc9132b2fe908000869f826a3b.png"},57699:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/chatnvidia_trace-8d8741f6f364bb745f3f4019da65dfcd.png"},34098:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/nvidia_pokedex-fc29e63c4ab5950b16916d640e74b075.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var a=n(67294);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);
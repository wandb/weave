"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6692],{44393:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=t(85893),a=t(11151);const i={title:"Code Generation"},r="Code Generation using Weave and OpenAI",s={id:"reference/gen_notebooks/codegen",title:"Code Generation",description:"Open in Colab",source:"@site/docs/reference/gen_notebooks/codegen.md",sourceDirName:"reference/gen_notebooks",slug:"/reference/gen_notebooks/codegen",permalink:"/reference/gen_notebooks/codegen",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/reference/gen_notebooks/codegen.md",tags:[],version:"current",lastUpdatedAt:1749652482e3,frontMatter:{title:"Code Generation"},sidebar:"notebookSidebar",previous:{title:"Chain of Density Summarization",permalink:"/reference/gen_notebooks/chain_of_density"},next:{title:"Custom Model Cost",permalink:"/reference/gen_notebooks/custom_model_cost"}},d={},l=[{value:"Video Demonstration",id:"video-demonstration",level:2},{value:"Why use Weave?",id:"why-use-weave",level:2},{value:"Set up the environment",id:"set-up-the-environment",level:2},{value:"Leveraging Structured Outputs and Pydantic Models",id:"leveraging-structured-outputs-and-pydantic-models",level:2},{value:"Implementing a Code Formatter",id:"implementing-a-code-formatter",level:2},{value:"Define the CodeGenerationPipeline",id:"define-the-codegenerationpipeline",level:2},{value:"Implement evaluation metrics",id:"implement-evaluation-metrics",level:2},{value:"Create a Weave Dataset and run evaluation",id:"create-a-weave-dataset-and-run-evaluation",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.admonition,{title:"This is a notebook",type:"tip",children:[(0,o.jsx)("a",{href:"https://colab.research.google.com/github/wandb/weave/blob/master/docs/./notebooks/codegen.ipynb",target:"_blank",rel:"noopener noreferrer",class:"navbar__item navbar__link button button--secondary button--med margin-right--sm notebook-cta-button",children:(0,o.jsxs)("div",{children:[(0,o.jsx)("img",{src:"https://upload.wikimedia.org/wikipedia/commons/archive/d/d0/20221103151430%21Google_Colaboratory_SVG_Logo.svg",alt:"Open In Colab",height:"20px"}),(0,o.jsx)("div",{children:"Open in Colab"})]})}),(0,o.jsx)("a",{href:"https://github.com/wandb/weave/blob/master/docs/./notebooks/codegen.ipynb",target:"_blank",rel:"noopener noreferrer",class:"navbar__item navbar__link button button--secondary button--med margin-right--sm notebook-cta-button",children:(0,o.jsxs)("div",{children:[(0,o.jsx)("img",{src:"https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg",alt:"View in Github",height:"15px"}),(0,o.jsx)("div",{children:"View in Github"})]})})]}),"\n",(0,o.jsx)(n.h1,{id:"code-generation-using-weave-and-openai",children:"Code Generation using Weave and OpenAI"}),"\n",(0,o.jsx)(n.p,{children:"Generating high-quality code with proper structure, documentation, and tests is a challenging task. This guide demonstrates how to implement a code generation pipeline. You'll learn to create a code generation pipeline that produces high-quality Python functions against the humaneval test suite."}),"\n",(0,o.jsx)(n.p,{children:"We'll use Weave for evaluation comparison and tracking, and OpenAI's GPT models for code generation using structured outputs."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Evaluation",src:t(63039).Z+"",width:"3024",height:"1896"})}),"\n",(0,o.jsx)(n.h2,{id:"video-demonstration",children:"Video Demonstration"}),"\n",(0,o.jsx)(n.p,{children:"For a visual demonstration of the code generation pipeline using Weave, Groq, and E2B check out this video:"}),"\n",(0,o.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/B70jJYPVAzE?si=75Z4Fg_DBxAiu9_6&amp",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,o.jsx)(n.p,{children:"This video provides a step-by-step walkthrough of the process, showcasing how Weave integrates with Groq to create a powerful code generation tool and then running the code in E2B, to validate the code. We use OpenAI in the following example, but you can use any LLM provider with Weave."}),"\n",(0,o.jsx)(n.h2,{id:"why-use-weave",children:"Why use Weave?"}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, we'll use Weave to implement and evaluate a code generation pipeline. You'll learn how to:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Track your LLM pipeline"}),": Log inputs, outputs, and intermediate steps of your code generation process."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Evaluate LLM outputs"}),": Create and compare evaluations of your generated code with rich debugging tools and visualizations."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"set-up-the-environment",children:"Set up the environment"}),"\n",(0,o.jsx)(n.p,{children:"First, let's set up our environment and import the necessary libraries:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"!pip install -qU autopep8 autoflake weave isort openai set-env-colab-kaggle-dotenv datasets\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"%%capture\n# Temporary workaround to fix bug in openai:\n# TypeError: Client.__init__() got an unexpected keyword argument 'proxies'\n# See https://community.openai.com/t/error-with-openai-1-56-0-client-init-got-an-unexpected-keyword-argument-proxies/1040332/15\n!pip install \"httpx<0.28\"\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import ast\nimport os\nimport re\nimport subprocess\nimport tempfile\nimport traceback\n\nimport autopep8\nimport isort\nfrom autoflake import fix_code\nfrom datasets import load_dataset\nfrom openai import OpenAI\nfrom pydantic import BaseModel\nfrom set_env import set_env\n\nimport weave\nfrom weave import Dataset, Evaluation\n\nset_env("WANDB_API_KEY")\nset_env("OPENAI_API_KEY")\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'WEAVE_PROJECT = "codegen-cookbook-example"\nweave.init(WEAVE_PROJECT)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"client = OpenAI()\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'human_eval = load_dataset("openai_humaneval")\nselected_examples = human_eval["test"][:3]\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Weave automatically tracks OpenAI API calls, including inputs, outputs, and metadata. This means you don't need to add any additional logging code for your OpenAI interactions \u2013 Weave handles it seamlessly in the background."})}),"\n",(0,o.jsx)(n.h2,{id:"leveraging-structured-outputs-and-pydantic-models",children:"Leveraging Structured Outputs and Pydantic Models"}),"\n",(0,o.jsxs)(n.p,{children:["In this code generation pipeline, we utilize OpenAI's ",(0,o.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/structured-outputs",children:"structured outputs mode"})," and Pydantic models to ensure consistent and well-formatted responses from the language model. This approach offers several advantages:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Type Safety"}),": By defining Pydantic models for our expected outputs, we enforce a strict structure for the generated code, program runners, and unit tests."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easier Parsing"}),": The structured output mode allows us to directly parse the model's response into our predefined Pydantic models, reducing the need for complex post-processing."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Improved Reliability"}),": By specifying the exact format we expect, we reduce the likelihood of unexpected or malformed outputs from the language model."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of how we define our Pydantic models and use them with OpenAI's structured outputs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class GeneratedCode(BaseModel):\n    function_signature: str\n    function_args_with_docstring_within_triple_quotes: str\n    code_logic: str\n\n\nclass FormattedGeneratedCode(BaseModel):\n    full_code: str\n"})}),"\n",(0,o.jsx)(n.h2,{id:"implementing-a-code-formatter",children:"Implementing a Code Formatter"}),"\n",(0,o.jsxs)(n.p,{children:["To ensure consistent and clean code output, we implement a ",(0,o.jsx)(n.code,{children:"CodeFormatter"})," class using Weave operations. This formatter applies various linting and styling rules to the generated code, program runner, and unit tests."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class CodeFormatter(BaseModel):\n    @weave.op()\n    def lint_code(self, code: str) -> str:\n        # Replace escaped newlines with actual newlines\n        code = code.replace("\\\\n", "\\n")\n\n        # Remove unused imports and variables\n        code = fix_code(\n            code, remove_all_unused_imports=True, remove_unused_variables=True\n        )\n\n        # Sort imports\n        code = isort.code(code)\n\n        # Apply PEP 8 formatting\n        code = autopep8.fix_code(code, options={"aggressive": 2})\n\n        return code\n\n    @weave.op()\n    def add_imports(self, code: str) -> str:\n        tree = ast.parse(code)\n        from_imports = {}\n        global_names = set()\n\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Name):\n                if node.id not in dir(__builtins__):\n                    global_names.add(node.id)\n\n        # Only add typing imports that are actually used\n        typing_imports = global_names.intersection(\n            {"List", "Dict", "Tuple", "Set", "Optional", "Union"}\n        )\n        if typing_imports:\n            from_imports["typing"] = typing_imports\n\n        # Remove names that are defined within the function\n        function_def = next(\n            node for node in tree.body if isinstance(node, ast.FunctionDef)\n        )\n        local_names = {arg.arg for arg in function_def.args.args}\n        local_names.update(\n            node.id\n            for node in ast.walk(function_def)\n            if isinstance(node, ast.Name) and isinstance(node.ctx, ast.Store)\n        )\n\n        global_names -= local_names\n        global_names -= {"sorted"}  # Remove built-in functions\n\n        # Construct the import statements\n        import_statements = []\n        for module, names in from_imports.items():\n            names_str = ", ".join(sorted(names))\n            import_statements.append(f"from {module} import {names_str}")\n\n        return (\n            "\\n".join(import_statements) + ("\\n\\n" if import_statements else "") + code\n        )\n\n    @weave.op()\n    def format_generated_code(\n        self, generated_code: GeneratedCode\n    ) -> FormattedGeneratedCode:\n        # Combine the code parts\n        full_code = f"{generated_code.function_signature}\\n{generated_code.function_args_with_docstring_within_triple_quotes}\\n{generated_code.code_logic}"\n\n        # Ensure proper indentation\n        lines = full_code.split("\\n")\n        indented_lines = []\n        for i, line in enumerate(lines):\n            if i == 0:  # Function signature\n                indented_lines.append(line)\n            elif i == 1:  # Function arguments (docstring)\n                indented_lines.append("    " + line)\n            else:  # Function body\n                indented_lines.append("    " + line)\n        full_code = "\\n".join(indented_lines)\n\n        # Lint the code\n        full_code = self.lint_code(full_code)\n\n        # Add imports\n        cleaned_code = self.add_imports(full_code)\n\n        return FormattedGeneratedCode(full_code=cleaned_code)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This ",(0,o.jsx)(n.code,{children:"CodeFormatter"})," class provides several Weave operations to clean and format the generated code:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Replacing escaped newlines with actual newlines"}),"\n",(0,o.jsx)(n.li,{children:"Removing unused imports and variables"}),"\n",(0,o.jsx)(n.li,{children:"Sorting imports"}),"\n",(0,o.jsx)(n.li,{children:"Applying PEP 8 formatting"}),"\n",(0,o.jsx)(n.li,{children:"Adding missing imports"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"define-the-codegenerationpipeline",children:"Define the CodeGenerationPipeline"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Code Generation Pipeline",src:t(26295).Z+"",width:"3024",height:"1896"})}),"\n",(0,o.jsx)(n.p,{children:"Now, let's implement the core code generation logic:"}),"\n",(0,o.jsxs)(n.p,{children:["We're using a ",(0,o.jsx)(n.code,{children:"weave.Model"})," so that it's automatically versioned when it changes. We're also keeping the ",(0,o.jsx)(n.code,{children:"model_name"})," as an attribute so that we can experiment with it and easily diff & compare it in Weave. We're tracking our function calls with ",(0,o.jsx)(n.code,{children:"@weave.op"})," so the inputs & outputs are logged to help with error tracking and debugging."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class CodeGenerationPipeline(weave.Model):\n    model_name: str\n    formatter: CodeFormatter\n\n    def __init__(\n        self, model_name: str = "gpt-4o", formatter: CodeFormatter = CodeFormatter()\n    ):\n        super().__init__(model_name=model_name, formatter=formatter)\n        self.model_name = model_name\n        self.formatter = formatter\n\n    @weave.op()\n    async def predict(self, prompt: str):\n        generated_code = self.generate_code(prompt)\n        formatted_generated_code = self.formatter.format_generated_code(generated_code)\n\n        return formatted_generated_code.full_code\n\n    @weave.op()\n    def generate_code(self, prompt: str) -> GeneratedCode:\n        completion = client.beta.chat.completions.parse(\n            model=self.model_name,\n            messages=[\n                {\n                    "role": "system",\n                    "content": "You are an expert Python code generator.",\n                },\n                {"role": "user", "content": prompt},\n            ],\n            response_format=GeneratedCode,\n        )\n        message = completion.choices[0].message\n        if message.parsed:\n            return message.parsed\n        else:\n            raise ValueError(message.refusal)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This ",(0,o.jsx)(n.code,{children:"CodeGenerationPipeline"})," class encapsulates our code generation logic as a Weave Model, providing several key benefits:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Automatic experiment tracking: Weave captures inputs, outputs, and parameters for each run of the model."}),"\n",(0,o.jsx)(n.li,{children:"Versioning: Changes to the model's attributes or code are automatically versioned, creating a clear history of how your code generation pipeline evolves over time."}),"\n",(0,o.jsx)(n.li,{children:"Reproducibility: The versioning and tracking make it easy to reproduce any previous result or configuration of your code generation pipeline."}),"\n",(0,o.jsxs)(n.li,{children:["Hyperparameter management: Model attributes (like ",(0,o.jsx)(n.code,{children:"model_name"}),") are clearly defined and tracked across different runs, facilitating experimentation."]}),"\n",(0,o.jsxs)(n.li,{children:["Integration with Weave ecosystem: Using ",(0,o.jsx)(n.code,{children:"weave.Model"})," allows seamless integration with other Weave tools, such as evaluations and serving capabilities."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implement-evaluation-metrics",children:"Implement evaluation metrics"}),"\n",(0,o.jsxs)(n.p,{children:["To assess the quality of our generated code, we'll implement simple evaluation metrics using a ",(0,o.jsx)(n.code,{children:"weave.Scorer"})," subclass. This will run ",(0,o.jsx)(n.code,{children:"score"})," on every ",(0,o.jsx)(n.code,{children:"model_output"})," from our dataset. ",(0,o.jsx)(n.code,{children:"model_output"})," comes from the output of the ",(0,o.jsx)(n.code,{children:"predict"})," function in our ",(0,o.jsx)(n.code,{children:"weave.Model"}),". ",(0,o.jsx)(n.code,{children:"prompt"})," is taken from our dataset ",(0,o.jsx)(n.code,{children:"human-eval"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'CODE_TEMPLATE = """\n{model_output}\n\n{test}\n\nif __name__ == "__main__":\n    check({entry_point})\n"""\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@weave.op()\nasync def score_humaneval_test(test: str, entry_point: str, output: str):\n    generated_code = output\n\n    # Extract test cases from the test string\n    test_cases = re.findall(r"assert.*", test)\n    test_cases_str = "\\n            ".join(test_cases)\n\n    # Generate the full source code\n    full_code = CODE_TEMPLATE.format(\n        model_output=generated_code,\n        test=test,\n        test_cases=test_cases_str,\n        entry_point=entry_point,\n    )\n\n    # Create a temporary file to store the code\n    with tempfile.NamedTemporaryFile(delete=False, suffix=".py") as tmp_file:\n        # Write the generated code to the temporary file\n        tmp_file.write(full_code.encode())\n        tmp_file_path = tmp_file.name\n\n    try:\n        # Run the temporary Python file as a subprocess with a timeout\n        result = subprocess.run(\n            ["python", tmp_file_path],\n            capture_output=True,\n            text=True,\n            timeout=10,  # Timeout of 10 seconds\n        )\n\n        print(result)\n\n        if result.returncode == 0:\n            return {"correct": True}\n        else:\n            return {"correct": False, "error": result.stderr, "output": result.stdout}\n    except subprocess.TimeoutExpired:\n        return {"correct": False, "error": "TimeoutExpired"}\n    except Exception as e:\n        return {"correct": False, "error": traceback.format_exc()}\n    finally:\n        # Ensure the temporary file is removed after execution\n        os.remove(tmp_file_path)\n'})}),"\n",(0,o.jsx)(n.p,{children:"These evaluation functions run the generated code and return a boolean value indicating whether the code passed the test provided from the dataset."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Evaluation",src:t(42450).Z+"",width:"3024",height:"1894"})}),"\n",(0,o.jsx)(n.h2,{id:"create-a-weave-dataset-and-run-evaluation",children:"Create a Weave Dataset and run evaluation"}),"\n",(0,o.jsx)(n.p,{children:"To evaluate our pipeline, we'll create a Weave Dataset and run an evaluation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'formatted_selected_examples = [\n    {\n        "task_id": task_id,\n        "prompt": prompt,\n        "canonical_solution": solution,\n        "test": test,\n        "entry_point": entry_point,\n    }\n    for task_id, prompt, solution, test, entry_point in zip(\n        selected_examples["task_id"],\n        selected_examples["prompt"],\n        selected_examples["canonical_solution"],\n        selected_examples["test"],\n        selected_examples["entry_point"],\n    )\n]\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt_dataset = Dataset(\n    name="humaneval_code_gen_example",\n    rows=[\n        {\n            "prompt": example["prompt"],\n            "test": example["test"],\n            "entry_point": example["entry_point"],\n        }\n        for example in formatted_selected_examples\n    ],\n)\nweave.publish(prompt_dataset)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"EVAL_RUN = True\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for model_name in ["gpt-4o-2024-08-06"]:\n    pipeline = CodeGenerationPipeline(model_name=model_name)\n    if not EVAL_RUN:\n        dataset = prompt_dataset.rows[2]\n        result = await pipeline.predict(dataset["prompt"])\n        score_result = await score_humaneval_test(\n            dataset["test"], dataset["entry_point"], result["generated_code"].full_code\n        )\n    else:\n        evaluation = Evaluation(\n            name="minimal_code_gen_evaluation",\n            dataset=prompt_dataset,\n            scorers=[score_humaneval_test],\n        )\n        results = await evaluation.evaluate(pipeline)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This code creates a dataset with our sample prompts, defines our humaneval test scorer, and runs an evaluation of our code generation pipeline."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Final Evaluation",src:t(63039).Z+"",width:"3024",height:"1896"})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"In this example, we've demonstrated how to implement a code generation pipeline using Weave and OpenAI's language models. We've shown how to:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create Weave operations for each step of the code generation process"}),"\n",(0,o.jsx)(n.li,{children:"Wrap the pipeline in a Weave Model for easy tracking and evaluation"}),"\n",(0,o.jsx)(n.li,{children:"Implement custom evaluation metrics using Weave operations"}),"\n",(0,o.jsx)(n.li,{children:"Create a dataset and run an evaluation of the pipeline"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Weave's seamless integration allows us to track inputs, outputs, and intermediate steps throughout the code generation process, making it easier to debug, optimize, and evaluate our LLM application."}),"\n",(0,o.jsxs)(n.p,{children:["For more information on Weave and its capabilities, check out the ",(0,o.jsx)(n.a,{href:"https://docs.wandb.ai/weave",children:"Weave documentation"}),". You can extend this example to handle larger datasets, implement more sophisticated evaluation metrics, or integrate with other LLM workflows."]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},26295:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/codegen_trace-f6f2120c1d3f50598ef0bb49c5c4f43c.png"},63039:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/eval_dash-24f9e2bea1b2b09a5211bf3153cc56c4.png"},42450:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/eval_trace-b7916f53a269ebb0c02527066bf2a6af.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var o=t(67294);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);
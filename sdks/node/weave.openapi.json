{
  "openapi": "3.1.0",
  "info": {"title": "FastAPI", "version": "0.1.0"},
  "servers": [{"url": "https://api.wandb.ai"}],
  "paths": {
    "/health": {
      "get": {
        "tags": ["Service"],
        "summary": "Read Root",
        "operationId": "read_root_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {"application/json": {"schema": {}}}
          }
        }
      }
    },
    "/server_info": {
      "get": {
        "tags": ["Service"],
        "summary": "Server Info",
        "operationId": "server_info_server_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ServerInfoRes"}
              }
            }
          }
        }
      }
    },
    "/call/start": {
      "post": {
        "tags": ["Calls"],
        "summary": "Call Start",
        "operationId": "call_start_call_start_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallStartReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallStartRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/call/end": {
      "post": {
        "tags": ["Calls"],
        "summary": "Call End",
        "operationId": "call_end_call_end_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallEndReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallEndRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/call/upsert_batch": {
      "post": {
        "tags": ["Calls"],
        "summary": "Call Start Batch",
        "operationId": "call_start_batch_call_upsert_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallCreateBatchReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallCreateBatchRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/calls/delete": {
      "post": {
        "tags": ["Calls"],
        "summary": "Calls Delete",
        "operationId": "calls_delete_calls_delete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallsDeleteReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallsDeleteRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/call/update": {
      "post": {
        "tags": ["Calls"],
        "summary": "Call Update",
        "operationId": "call_update_call_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallUpdateReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallUpdateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/call/read": {
      "post": {
        "tags": ["Calls"],
        "summary": "Call Read",
        "operationId": "call_read_call_read_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallReadReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallReadRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/calls/query_stats": {
      "post": {
        "tags": ["Calls"],
        "summary": "Calls Query Stats",
        "operationId": "calls_query_stats_calls_query_stats_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallsQueryStatsReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CallsQueryStatsRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/calls/stream_query": {
      "post": {
        "tags": ["Calls"],
        "summary": "Calls Query Stream",
        "operationId": "calls_query_stream_calls_stream_query_post",
        "security": [{"HTTPBasic": []}],
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "application/jsonl",
              "title": "Accept"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CallsQueryReq"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {"application/json": {"schema": {}}}
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        }
      }
    },
    "/obj/create": {
      "post": {
        "tags": ["Objects"],
        "summary": "Obj Create",
        "operationId": "obj_create_obj_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ObjCreateReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ObjCreateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/obj/read": {
      "post": {
        "tags": ["Objects"],
        "summary": "Obj Read",
        "operationId": "obj_read_obj_read_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ObjReadReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ObjReadRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/objs/query": {
      "post": {
        "tags": ["Objects"],
        "summary": "Objs Query",
        "operationId": "objs_query_objs_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ObjQueryReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ObjQueryRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/table/create": {
      "post": {
        "tags": ["Tables"],
        "summary": "Table Create",
        "operationId": "table_create_table_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/TableCreateReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/TableCreateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/table/update": {
      "post": {
        "tags": ["Tables"],
        "summary": "Table Update",
        "operationId": "table_update_table_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/TableUpdateReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/TableUpdateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/table/query": {
      "post": {
        "tags": ["Tables"],
        "summary": "Table Query",
        "operationId": "table_query_table_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/TableQueryReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/TableQueryRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/table/query_stats": {
      "post": {
        "tags": ["Tables"],
        "summary": "Table Query Stats",
        "operationId": "table_query_stats_table_query_stats_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/TableQueryStatsReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/TableQueryStatsRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/refs/read_batch": {
      "post": {
        "tags": ["Refs"],
        "summary": "Refs Read Batch",
        "operationId": "refs_read_batch_refs_read_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/RefsReadBatchReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/RefsReadBatchRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/file/create": {
      "post": {
        "tags": ["Files"],
        "summary": "File Create",
        "operationId": "file_create_file_create_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_file_create_file_create_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/FileCreateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/file/content": {
      "post": {
        "tags": ["Files"],
        "summary": "File Content",
        "operationId": "file_content_file_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/FileContentReadReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {"application/json": {"schema": {}}}
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/cost/create": {
      "post": {
        "tags": ["Costs"],
        "summary": "Cost Create",
        "operationId": "cost_create_cost_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CostCreateReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CostCreateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/cost/query": {
      "post": {
        "tags": ["Costs"],
        "summary": "Cost Query",
        "operationId": "cost_query_cost_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CostQueryReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CostQueryRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/cost/purge": {
      "post": {
        "tags": ["Costs"],
        "summary": "Cost Purge",
        "operationId": "cost_purge_cost_purge_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/CostPurgeReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/CostPurgeRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/feedback/create": {
      "post": {
        "tags": ["Feedback"],
        "summary": "Feedback Create",
        "description": "Add feedback to a call or object.",
        "operationId": "feedback_create_feedback_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/FeedbackCreateReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/FeedbackCreateRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/feedback/query": {
      "post": {
        "tags": ["Feedback"],
        "summary": "Feedback Query",
        "description": "Query for feedback.",
        "operationId": "feedback_query_feedback_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/FeedbackQueryReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/FeedbackQueryRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/feedback/purge": {
      "post": {
        "tags": ["Feedback"],
        "summary": "Feedback Purge",
        "description": "Permanently delete feedback.",
        "operationId": "feedback_purge_feedback_purge_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/FeedbackPurgeReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/FeedbackPurgeRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    },
    "/feedback/replace": {
      "post": {
        "tags": ["Feedback"],
        "summary": "Feedback Replace",
        "operationId": "feedback_replace_feedback_replace_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/FeedbackReplaceReq"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/FeedbackReplaceRes"}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/HTTPValidationError"}
              }
            }
          }
        },
        "security": [{"HTTPBasic": []}]
      }
    }
  },
  "components": {
    "schemas": {
      "AndOperation": {
        "properties": {
          "$and": {
            "items": {
              "anyOf": [
                {"$ref": "#/components/schemas/LiteralOperation"},
                {"$ref": "#/components/schemas/GetFieldOperator"},
                {"$ref": "#/components/schemas/ConvertOperation"},
                {"$ref": "#/components/schemas/AndOperation"},
                {"$ref": "#/components/schemas/OrOperation"},
                {"$ref": "#/components/schemas/NotOperation"},
                {"$ref": "#/components/schemas/EqOperation"},
                {"$ref": "#/components/schemas/GtOperation"},
                {"$ref": "#/components/schemas/GteOperation"},
                {"$ref": "#/components/schemas/InOperation"},
                {"$ref": "#/components/schemas/ContainsOperation"}
              ]
            },
            "type": "array",
            "title": "$And"
          }
        },
        "type": "object",
        "required": ["$and"],
        "title": "AndOperation"
      },
      "Body_file_create_file_create_post": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "file": {"type": "string", "format": "binary", "title": "File"}
        },
        "type": "object",
        "required": ["project_id", "file"],
        "title": "Body_file_create_file_create_post"
      },
      "CallBatchEndMode": {
        "properties": {
          "mode": {"type": "string", "title": "Mode", "default": "end"},
          "req": {"$ref": "#/components/schemas/CallEndReq"}
        },
        "type": "object",
        "required": ["req"],
        "title": "CallBatchEndMode"
      },
      "CallBatchStartMode": {
        "properties": {
          "mode": {"type": "string", "title": "Mode", "default": "start"},
          "req": {"$ref": "#/components/schemas/CallStartReq"}
        },
        "type": "object",
        "required": ["req"],
        "title": "CallBatchStartMode"
      },
      "CallCreateBatchReq": {
        "properties": {
          "batch": {
            "items": {
              "anyOf": [
                {"$ref": "#/components/schemas/CallBatchStartMode"},
                {"$ref": "#/components/schemas/CallBatchEndMode"}
              ]
            },
            "type": "array",
            "title": "Batch"
          }
        },
        "type": "object",
        "required": ["batch"],
        "title": "CallCreateBatchReq"
      },
      "CallCreateBatchRes": {
        "properties": {
          "res": {
            "items": {
              "anyOf": [
                {"$ref": "#/components/schemas/CallStartRes"},
                {"$ref": "#/components/schemas/CallEndRes"}
              ]
            },
            "type": "array",
            "title": "Res"
          }
        },
        "type": "object",
        "required": ["res"],
        "title": "CallCreateBatchRes"
      },
      "CallEndReq": {
        "properties": {
          "end": {"$ref": "#/components/schemas/EndedCallSchemaForInsert"}
        },
        "type": "object",
        "required": ["end"],
        "title": "CallEndReq"
      },
      "CallEndRes": {"properties": {}, "type": "object", "title": "CallEndRes"},
      "CallReadReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "id": {"type": "string", "title": "Id"},
          "include_costs": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Include Costs",
            "default": false
          }
        },
        "type": "object",
        "required": ["project_id", "id"],
        "title": "CallReadReq"
      },
      "CallReadRes": {
        "properties": {
          "call": {
            "anyOf": [
              {"$ref": "#/components/schemas/CallSchema"},
              {"type": "null"}
            ]
          }
        },
        "type": "object",
        "required": ["call"],
        "title": "CallReadRes"
      },
      "CallSchema": {
        "properties": {
          "id": {"type": "string", "title": "Id"},
          "project_id": {"type": "string", "title": "Project Id"},
          "op_name": {"type": "string", "title": "Op Name"},
          "display_name": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Display Name"
          },
          "trace_id": {"type": "string", "title": "Trace Id"},
          "parent_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Parent Id"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "attributes": {"type": "object", "title": "Attributes"},
          "inputs": {"type": "object", "title": "Inputs"},
          "ended_at": {
            "anyOf": [
              {"type": "string", "format": "date-time"},
              {"type": "null"}
            ],
            "title": "Ended At"
          },
          "exception": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Exception"
          },
          "output": {"anyOf": [{}, {"type": "null"}], "title": "Output"},
          "summary": {"type": "object"},
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id"
          },
          "wb_run_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb Run Id"
          },
          "deleted_at": {
            "anyOf": [
              {"type": "string", "format": "date-time"},
              {"type": "null"}
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "project_id",
          "op_name",
          "trace_id",
          "started_at",
          "attributes",
          "inputs"
        ],
        "title": "CallSchema"
      },
      "CallStartReq": {
        "properties": {
          "start": {"$ref": "#/components/schemas/StartedCallSchemaForInsert"}
        },
        "type": "object",
        "required": ["start"],
        "title": "CallStartReq"
      },
      "CallStartRes": {
        "properties": {
          "id": {"type": "string", "title": "Id"},
          "trace_id": {"type": "string", "title": "Trace Id"}
        },
        "type": "object",
        "required": ["id", "trace_id"],
        "title": "CallStartRes"
      },
      "CallUpdateReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "call_id": {"type": "string", "title": "Call Id"},
          "display_name": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Display Name"
          },
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id",
            "description": "Do not set directly. Server will automatically populate this field."
          }
        },
        "type": "object",
        "required": ["project_id", "call_id"],
        "title": "CallUpdateReq"
      },
      "CallUpdateRes": {
        "properties": {},
        "type": "object",
        "title": "CallUpdateRes"
      },
      "CallsDeleteReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "call_ids": {
            "items": {"type": "string"},
            "type": "array",
            "title": "Call Ids"
          },
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id",
            "description": "Do not set directly. Server will automatically populate this field."
          }
        },
        "type": "object",
        "required": ["project_id", "call_ids"],
        "title": "CallsDeleteReq"
      },
      "CallsDeleteRes": {
        "properties": {},
        "type": "object",
        "title": "CallsDeleteRes"
      },
      "CallsFilter": {
        "properties": {
          "op_names": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Op Names"
          },
          "input_refs": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Input Refs"
          },
          "output_refs": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Output Refs"
          },
          "parent_ids": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Parent Ids"
          },
          "trace_ids": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Trace Ids"
          },
          "call_ids": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Call Ids"
          },
          "trace_roots_only": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Trace Roots Only"
          },
          "wb_user_ids": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Wb User Ids"
          },
          "wb_run_ids": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Wb Run Ids"
          }
        },
        "type": "object",
        "title": "CallsFilter"
      },
      "CallsQueryReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "filter": {
            "anyOf": [
              {"$ref": "#/components/schemas/CallsFilter"},
              {"type": "null"}
            ]
          },
          "limit": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Limit"
          },
          "offset": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Offset"
          },
          "sort_by": {
            "anyOf": [
              {
                "items": {"$ref": "#/components/schemas/SortBy"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "title": "Sort By"
          },
          "query": {
            "anyOf": [{"$ref": "#/components/schemas/Query"}, {"type": "null"}]
          },
          "include_costs": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Include Costs",
            "description": "Beta, subject to change. If true, the response will include any model costs for each call.",
            "default": false
          },
          "include_feedback": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Include Feedback",
            "description": "Beta, subject to change. If true, the response will include feedback for each call.",
            "default": false
          },
          "columns": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Columns"
          },
          "expand_columns": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Expand Columns",
            "description": "Columns to expand, i.e. refs to other objects",
            "examples": [["inputs.self.message", "inputs.model.prompt"]]
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "CallsQueryReq"
      },
      "CallsQueryStatsReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "filter": {
            "anyOf": [
              {"$ref": "#/components/schemas/CallsFilter"},
              {"type": "null"}
            ]
          },
          "query": {
            "anyOf": [{"$ref": "#/components/schemas/Query"}, {"type": "null"}]
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "CallsQueryStatsReq"
      },
      "CallsQueryStatsRes": {
        "properties": {"count": {"type": "integer", "title": "Count"}},
        "type": "object",
        "required": ["count"],
        "title": "CallsQueryStatsRes"
      },
      "ContainsOperation": {
        "properties": {
          "$contains": {"$ref": "#/components/schemas/ContainsSpec"}
        },
        "type": "object",
        "required": ["$contains"],
        "title": "ContainsOperation"
      },
      "ContainsSpec": {
        "properties": {
          "input": {
            "anyOf": [
              {"$ref": "#/components/schemas/LiteralOperation"},
              {"$ref": "#/components/schemas/GetFieldOperator"},
              {"$ref": "#/components/schemas/ConvertOperation"},
              {"$ref": "#/components/schemas/AndOperation"},
              {"$ref": "#/components/schemas/OrOperation"},
              {"$ref": "#/components/schemas/NotOperation"},
              {"$ref": "#/components/schemas/EqOperation"},
              {"$ref": "#/components/schemas/GtOperation"},
              {"$ref": "#/components/schemas/GteOperation"},
              {"$ref": "#/components/schemas/InOperation"},
              {"$ref": "#/components/schemas/ContainsOperation"}
            ],
            "title": "Input"
          },
          "substr": {
            "anyOf": [
              {"$ref": "#/components/schemas/LiteralOperation"},
              {"$ref": "#/components/schemas/GetFieldOperator"},
              {"$ref": "#/components/schemas/ConvertOperation"},
              {"$ref": "#/components/schemas/AndOperation"},
              {"$ref": "#/components/schemas/OrOperation"},
              {"$ref": "#/components/schemas/NotOperation"},
              {"$ref": "#/components/schemas/EqOperation"},
              {"$ref": "#/components/schemas/GtOperation"},
              {"$ref": "#/components/schemas/GteOperation"},
              {"$ref": "#/components/schemas/InOperation"},
              {"$ref": "#/components/schemas/ContainsOperation"}
            ],
            "title": "Substr"
          },
          "case_insensitive": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Case Insensitive",
            "default": false
          }
        },
        "type": "object",
        "required": ["input", "substr"],
        "title": "ContainsSpec"
      },
      "ConvertOperation": {
        "properties": {
          "$convert": {"$ref": "#/components/schemas/ConvertSpec"}
        },
        "type": "object",
        "required": ["$convert"],
        "title": "ConvertOperation"
      },
      "ConvertSpec": {
        "properties": {
          "input": {
            "anyOf": [
              {"$ref": "#/components/schemas/LiteralOperation"},
              {"$ref": "#/components/schemas/GetFieldOperator"},
              {"$ref": "#/components/schemas/ConvertOperation"},
              {"$ref": "#/components/schemas/AndOperation"},
              {"$ref": "#/components/schemas/OrOperation"},
              {"$ref": "#/components/schemas/NotOperation"},
              {"$ref": "#/components/schemas/EqOperation"},
              {"$ref": "#/components/schemas/GtOperation"},
              {"$ref": "#/components/schemas/GteOperation"},
              {"$ref": "#/components/schemas/InOperation"},
              {"$ref": "#/components/schemas/ContainsOperation"}
            ],
            "title": "Input"
          },
          "to": {
            "type": "string",
            "enum": ["double", "string", "int", "bool", "exists"],
            "title": "To"
          }
        },
        "type": "object",
        "required": ["input", "to"],
        "title": "ConvertSpec"
      },
      "CostCreateInput": {
        "properties": {
          "prompt_token_cost": {"type": "number", "title": "Prompt Token Cost"},
          "completion_token_cost": {
            "type": "number",
            "title": "Completion Token Cost"
          },
          "prompt_token_cost_unit": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Prompt Token Cost Unit",
            "description": "The unit of the cost for the prompt tokens",
            "default": "USD"
          },
          "completion_token_cost_unit": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Completion Token Cost Unit",
            "description": "The unit of the cost for the completion tokens",
            "default": "USD"
          },
          "effective_date": {
            "anyOf": [
              {"type": "string", "format": "date-time"},
              {"type": "null"}
            ],
            "title": "Effective Date",
            "description": "The date after which the cost is effective for, will default to the current date if not provided"
          },
          "provider_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Provider Id",
            "description": "The provider of the LLM, e.g. 'openai' or 'mistral'. If not provided, the provider_id will be set to 'default'"
          }
        },
        "type": "object",
        "required": ["prompt_token_cost", "completion_token_cost"],
        "title": "CostCreateInput"
      },
      "CostCreateReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "costs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CostCreateInput"
            },
            "type": "object",
            "title": "Costs"
          },
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id",
            "description": "Do not set directly. Server will automatically populate this field."
          }
        },
        "type": "object",
        "required": ["project_id", "costs"],
        "title": "CostCreateReq"
      },
      "CostCreateRes": {
        "properties": {
          "ids": {
            "items": {
              "prefixItems": [{"type": "string"}, {"type": "string"}],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Ids"
          }
        },
        "type": "object",
        "required": ["ids"],
        "title": "CostCreateRes"
      },
      "CostPurgeReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "query": {"$ref": "#/components/schemas/Query"}
        },
        "type": "object",
        "required": ["project_id", "query"],
        "title": "CostPurgeReq"
      },
      "CostPurgeRes": {
        "properties": {},
        "type": "object",
        "title": "CostPurgeRes"
      },
      "CostQueryOutput": {
        "properties": {
          "id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Id",
            "examples": ["2341-asdf-asdf"]
          },
          "llm_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Llm Id",
            "examples": ["gpt4"]
          },
          "prompt_token_cost": {
            "anyOf": [{"type": "number"}, {"type": "null"}],
            "title": "Prompt Token Cost",
            "examples": [1.0]
          },
          "completion_token_cost": {
            "anyOf": [{"type": "number"}, {"type": "null"}],
            "title": "Completion Token Cost",
            "examples": [1.0]
          },
          "prompt_token_cost_unit": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Prompt Token Cost Unit",
            "examples": ["USD"]
          },
          "completion_token_cost_unit": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Completion Token Cost Unit",
            "examples": ["USD"]
          },
          "effective_date": {
            "anyOf": [
              {"type": "string", "format": "date-time"},
              {"type": "null"}
            ],
            "title": "Effective Date",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "provider_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Provider Id",
            "examples": ["openai"]
          }
        },
        "type": "object",
        "title": "CostQueryOutput"
      },
      "CostQueryReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "fields": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Fields",
            "examples": [
              [
                "id",
                "llm_id",
                "prompt_token_cost",
                "completion_token_cost",
                "prompt_token_cost_unit",
                "completion_token_cost_unit",
                "effective_date",
                "provider_id"
              ]
            ]
          },
          "query": {
            "anyOf": [{"$ref": "#/components/schemas/Query"}, {"type": "null"}]
          },
          "sort_by": {
            "anyOf": [
              {
                "items": {"$ref": "#/components/schemas/SortBy"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "title": "Sort By"
          },
          "limit": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Limit",
            "examples": [10]
          },
          "offset": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Offset",
            "examples": [0]
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "CostQueryReq"
      },
      "CostQueryRes": {
        "properties": {
          "results": {
            "items": {"$ref": "#/components/schemas/CostQueryOutput"},
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["results"],
        "title": "CostQueryRes"
      },
      "EndedCallSchemaForInsert": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "id": {"type": "string", "title": "Id"},
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ended At"
          },
          "exception": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Exception"
          },
          "output": {"anyOf": [{}, {"type": "null"}], "title": "Output"},
          "summary": {"$ref": "#/components/schemas/SummaryInsertMap"}
        },
        "type": "object",
        "required": ["project_id", "id", "ended_at", "summary"],
        "title": "EndedCallSchemaForInsert"
      },
      "EqOperation": {
        "properties": {
          "$eq": {
            "prefixItems": [
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              },
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              }
            ],
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "$Eq"
          }
        },
        "type": "object",
        "required": ["$eq"],
        "title": "EqOperation"
      },
      "FeedbackCreateReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "weave_ref": {
            "type": "string",
            "title": "Weave Ref",
            "examples": ["weave:///entity/project/object/name:digest"]
          },
          "creator": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Creator",
            "examples": ["Jane Smith"]
          },
          "feedback_type": {
            "type": "string",
            "title": "Feedback Type",
            "examples": ["custom"]
          },
          "payload": {
            "type": "object",
            "title": "Payload",
            "examples": [{"key": "value"}]
          },
          "annotation_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Annotation Ref",
            "examples": ["weave:///entity/project/object/name:digest"]
          },
          "runnable_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Runnable Ref",
            "examples": ["weave:///entity/project/op/name:digest"]
          },
          "call_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Call Ref",
            "examples": ["weave:///entity/project/call/call_id"]
          },
          "trigger_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Trigger Ref",
            "examples": ["weave:///entity/project/object/name:digest"]
          },
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id",
            "description": "Do not set directly. Server will automatically populate this field."
          }
        },
        "type": "object",
        "required": ["project_id", "weave_ref", "feedback_type", "payload"],
        "title": "FeedbackCreateReq"
      },
      "FeedbackCreateRes": {
        "properties": {
          "id": {"type": "string", "title": "Id"},
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "wb_user_id": {"type": "string", "title": "Wb User Id"},
          "payload": {"type": "object", "title": "Payload"}
        },
        "type": "object",
        "required": ["id", "created_at", "wb_user_id", "payload"],
        "title": "FeedbackCreateRes"
      },
      "FeedbackPurgeReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "query": {"$ref": "#/components/schemas/Query"}
        },
        "type": "object",
        "required": ["project_id", "query"],
        "title": "FeedbackPurgeReq"
      },
      "FeedbackPurgeRes": {
        "properties": {},
        "type": "object",
        "title": "FeedbackPurgeRes"
      },
      "FeedbackQueryReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "fields": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Fields",
            "examples": [["id", "feedback_type", "payload.note"]]
          },
          "query": {
            "anyOf": [{"$ref": "#/components/schemas/Query"}, {"type": "null"}]
          },
          "sort_by": {
            "anyOf": [
              {
                "items": {"$ref": "#/components/schemas/SortBy"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "title": "Sort By"
          },
          "limit": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Limit",
            "examples": [10]
          },
          "offset": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Offset",
            "examples": [0]
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "FeedbackQueryReq"
      },
      "FeedbackQueryRes": {
        "properties": {
          "result": {
            "items": {"type": "object"},
            "type": "array",
            "title": "Result"
          }
        },
        "type": "object",
        "required": ["result"],
        "title": "FeedbackQueryRes"
      },
      "FeedbackReplaceReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "examples": ["entity/project"]
          },
          "weave_ref": {
            "type": "string",
            "title": "Weave Ref",
            "examples": ["weave:///entity/project/object/name:digest"]
          },
          "creator": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Creator",
            "examples": ["Jane Smith"]
          },
          "feedback_type": {
            "type": "string",
            "title": "Feedback Type",
            "examples": ["custom"]
          },
          "payload": {
            "type": "object",
            "title": "Payload",
            "examples": [{"key": "value"}]
          },
          "annotation_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Annotation Ref",
            "examples": ["weave:///entity/project/object/name:digest"]
          },
          "runnable_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Runnable Ref",
            "examples": ["weave:///entity/project/op/name:digest"]
          },
          "call_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Call Ref",
            "examples": ["weave:///entity/project/call/call_id"]
          },
          "trigger_ref": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Trigger Ref",
            "examples": ["weave:///entity/project/object/name:digest"]
          },
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id",
            "description": "Do not set directly. Server will automatically populate this field."
          },
          "feedback_id": {"type": "string", "title": "Feedback Id"}
        },
        "type": "object",
        "required": [
          "project_id",
          "weave_ref",
          "feedback_type",
          "payload",
          "feedback_id"
        ],
        "title": "FeedbackReplaceReq"
      },
      "FeedbackReplaceRes": {
        "properties": {
          "id": {"type": "string", "title": "Id"},
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "wb_user_id": {"type": "string", "title": "Wb User Id"},
          "payload": {"type": "object", "title": "Payload"}
        },
        "type": "object",
        "required": ["id", "created_at", "wb_user_id", "payload"],
        "title": "FeedbackReplaceRes"
      },
      "FileContentReadReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "digest": {"type": "string", "title": "Digest"}
        },
        "type": "object",
        "required": ["project_id", "digest"],
        "title": "FileContentReadReq"
      },
      "FileCreateRes": {
        "properties": {"digest": {"type": "string", "title": "Digest"}},
        "type": "object",
        "required": ["digest"],
        "title": "FileCreateRes"
      },
      "GetFieldOperator": {
        "properties": {"$getField": {"type": "string", "title": "$Getfield"}},
        "type": "object",
        "required": ["$getField"],
        "title": "GetFieldOperator"
      },
      "GtOperation": {
        "properties": {
          "$gt": {
            "prefixItems": [
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              },
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              }
            ],
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "$Gt"
          }
        },
        "type": "object",
        "required": ["$gt"],
        "title": "GtOperation"
      },
      "GteOperation": {
        "properties": {
          "$gte": {
            "prefixItems": [
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              },
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              }
            ],
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "$Gte"
          }
        },
        "type": "object",
        "required": ["$gte"],
        "title": "GteOperation"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {"$ref": "#/components/schemas/ValidationError"},
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InOperation": {
        "properties": {
          "$in": {
            "prefixItems": [
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              },
              {
                "items": {
                  "anyOf": [
                    {"$ref": "#/components/schemas/LiteralOperation"},
                    {"$ref": "#/components/schemas/GetFieldOperator"},
                    {"$ref": "#/components/schemas/ConvertOperation"},
                    {"$ref": "#/components/schemas/AndOperation"},
                    {"$ref": "#/components/schemas/OrOperation"},
                    {"$ref": "#/components/schemas/NotOperation"},
                    {"$ref": "#/components/schemas/EqOperation"},
                    {"$ref": "#/components/schemas/GtOperation"},
                    {"$ref": "#/components/schemas/GteOperation"},
                    {"$ref": "#/components/schemas/InOperation"},
                    {"$ref": "#/components/schemas/ContainsOperation"}
                  ]
                },
                "type": "array"
              }
            ],
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "$In"
          }
        },
        "type": "object",
        "required": ["$in"],
        "title": "InOperation"
      },
      "LLMUsageSchema": {
        "properties": {
          "prompt_tokens": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Prompt Tokens"
          },
          "input_tokens": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Input Tokens"
          },
          "completion_tokens": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Completion Tokens"
          },
          "output_tokens": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Output Tokens"
          },
          "requests": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Requests"
          },
          "total_tokens": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Total Tokens"
          }
        },
        "type": "object",
        "title": "LLMUsageSchema"
      },
      "LiteralOperation": {
        "properties": {
          "$literal": {
            "anyOf": [
              {"type": "string"},
              {"type": "integer"},
              {"type": "number"},
              {"type": "boolean"},
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/LiteralOperation"
                },
                "type": "object"
              },
              {
                "items": {"$ref": "#/components/schemas/LiteralOperation"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "title": "$Literal"
          }
        },
        "type": "object",
        "required": ["$literal"],
        "title": "LiteralOperation"
      },
      "NotOperation": {
        "properties": {
          "$not": {
            "prefixItems": [
              {
                "anyOf": [
                  {"$ref": "#/components/schemas/LiteralOperation"},
                  {"$ref": "#/components/schemas/GetFieldOperator"},
                  {"$ref": "#/components/schemas/ConvertOperation"},
                  {"$ref": "#/components/schemas/AndOperation"},
                  {"$ref": "#/components/schemas/OrOperation"},
                  {"$ref": "#/components/schemas/NotOperation"},
                  {"$ref": "#/components/schemas/EqOperation"},
                  {"$ref": "#/components/schemas/GtOperation"},
                  {"$ref": "#/components/schemas/GteOperation"},
                  {"$ref": "#/components/schemas/InOperation"},
                  {"$ref": "#/components/schemas/ContainsOperation"}
                ]
              }
            ],
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "title": "$Not"
          }
        },
        "type": "object",
        "required": ["$not"],
        "title": "NotOperation"
      },
      "ObjCreateReq": {
        "properties": {
          "obj": {"$ref": "#/components/schemas/ObjSchemaForInsert"}
        },
        "type": "object",
        "required": ["obj"],
        "title": "ObjCreateReq"
      },
      "ObjCreateRes": {
        "properties": {"digest": {"type": "string", "title": "Digest"}},
        "type": "object",
        "required": ["digest"],
        "title": "ObjCreateRes"
      },
      "ObjQueryReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "description": "The ID of the project to query",
            "examples": ["user/project"]
          },
          "filter": {
            "anyOf": [
              {"$ref": "#/components/schemas/ObjectVersionFilter"},
              {"type": "null"}
            ],
            "description": "Filter criteria for the query. See `ObjectVersionFilter`",
            "examples": [
              {"latest_only": true, "object_ids": ["my_favorite_model"]}
            ]
          },
          "limit": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Limit",
            "description": "Maximum number of results to return",
            "examples": [100]
          },
          "offset": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Offset",
            "description": "Number of results to skip before returning",
            "examples": [0]
          },
          "sort_by": {
            "anyOf": [
              {
                "items": {"$ref": "#/components/schemas/SortBy"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "title": "Sort By",
            "description": "Sorting criteria for the query results. Currently only supports 'object_id' and 'created_at'.",
            "examples": [[{"direction": "desc", "field": "created_at"}]]
          },
          "metadata_only": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Metadata Only",
            "description": "If true, the `val` column is not read from the database and is empty.All other fields are returned.",
            "default": false
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "ObjQueryReq"
      },
      "ObjQueryRes": {
        "properties": {
          "objs": {
            "items": {"$ref": "#/components/schemas/ObjSchema"},
            "type": "array",
            "title": "Objs"
          }
        },
        "type": "object",
        "required": ["objs"],
        "title": "ObjQueryRes"
      },
      "ObjReadReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "object_id": {"type": "string", "title": "Object Id"},
          "digest": {"type": "string", "title": "Digest"}
        },
        "type": "object",
        "required": ["project_id", "object_id", "digest"],
        "title": "ObjReadReq"
      },
      "ObjReadRes": {
        "properties": {"obj": {"$ref": "#/components/schemas/ObjSchema"}},
        "type": "object",
        "required": ["obj"],
        "title": "ObjReadRes"
      },
      "ObjSchema": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "object_id": {"type": "string", "title": "Object Id"},
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "deleted_at": {
            "anyOf": [
              {"type": "string", "format": "date-time"},
              {"type": "null"}
            ],
            "title": "Deleted At"
          },
          "digest": {"type": "string", "title": "Digest"},
          "version_index": {"type": "integer", "title": "Version Index"},
          "is_latest": {"type": "integer", "title": "Is Latest"},
          "kind": {"type": "string", "title": "Kind"},
          "base_object_class": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Base Object Class"
          },
          "val": {"title": "Val"}
        },
        "type": "object",
        "required": [
          "project_id",
          "object_id",
          "created_at",
          "digest",
          "version_index",
          "is_latest",
          "kind",
          "base_object_class",
          "val"
        ],
        "title": "ObjSchema"
      },
      "ObjSchemaForInsert": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "object_id": {"type": "string", "title": "Object Id"},
          "val": {"title": "Val"},
          "builtin_object_class": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Builtin Object Class"
          },
          "set_base_object_class": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Set Base Object Class",
            "deprecated": true
          }
        },
        "type": "object",
        "required": ["project_id", "object_id", "val"],
        "title": "ObjSchemaForInsert"
      },
      "ObjectVersionFilter": {
        "properties": {
          "base_object_classes": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Base Object Classes",
            "description": "Filter objects by their base classes",
            "examples": [["Model"], ["Dataset"]]
          },
          "object_ids": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Object Ids",
            "description": "Filter objects by their IDs",
            "examples": ["my_favorite_model", "my_favorite_dataset"]
          },
          "is_op": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Is Op",
            "description": "Filter objects based on whether they are weave.ops or not. `True` will only return ops, `False` will return non-ops, and `None` will return all objects",
            "examples": [true, false, null]
          },
          "latest_only": {
            "anyOf": [{"type": "boolean"}, {"type": "null"}],
            "title": "Latest Only",
            "description": "If True, return only the latest version of each object. `False` and `None` will return all versions",
            "examples": [true, false]
          }
        },
        "type": "object",
        "title": "ObjectVersionFilter"
      },
      "OrOperation": {
        "properties": {
          "$or": {
            "items": {
              "anyOf": [
                {"$ref": "#/components/schemas/LiteralOperation"},
                {"$ref": "#/components/schemas/GetFieldOperator"},
                {"$ref": "#/components/schemas/ConvertOperation"},
                {"$ref": "#/components/schemas/AndOperation"},
                {"$ref": "#/components/schemas/OrOperation"},
                {"$ref": "#/components/schemas/NotOperation"},
                {"$ref": "#/components/schemas/EqOperation"},
                {"$ref": "#/components/schemas/GtOperation"},
                {"$ref": "#/components/schemas/GteOperation"},
                {"$ref": "#/components/schemas/InOperation"},
                {"$ref": "#/components/schemas/ContainsOperation"}
              ]
            },
            "type": "array",
            "title": "$Or"
          }
        },
        "type": "object",
        "required": ["$or"],
        "title": "OrOperation"
      },
      "Query": {
        "properties": {
          "$expr": {
            "anyOf": [
              {"$ref": "#/components/schemas/AndOperation"},
              {"$ref": "#/components/schemas/OrOperation"},
              {"$ref": "#/components/schemas/NotOperation"},
              {"$ref": "#/components/schemas/EqOperation"},
              {"$ref": "#/components/schemas/GtOperation"},
              {"$ref": "#/components/schemas/GteOperation"},
              {"$ref": "#/components/schemas/InOperation"},
              {"$ref": "#/components/schemas/ContainsOperation"}
            ],
            "title": "$Expr"
          }
        },
        "type": "object",
        "required": ["$expr"],
        "title": "Query"
      },
      "RefsReadBatchReq": {
        "properties": {
          "refs": {
            "items": {"type": "string"},
            "type": "array",
            "title": "Refs"
          }
        },
        "type": "object",
        "required": ["refs"],
        "title": "RefsReadBatchReq"
      },
      "RefsReadBatchRes": {
        "properties": {"vals": {"items": {}, "type": "array", "title": "Vals"}},
        "type": "object",
        "required": ["vals"],
        "title": "RefsReadBatchRes"
      },
      "ServerInfoRes": {
        "properties": {
          "min_required_weave_python_version": {
            "type": "string",
            "title": "Min Required Weave Python Version"
          }
        },
        "type": "object",
        "required": ["min_required_weave_python_version"],
        "title": "ServerInfoRes"
      },
      "SortBy": {
        "properties": {
          "field": {"type": "string", "title": "Field"},
          "direction": {
            "type": "string",
            "enum": ["asc", "desc"],
            "title": "Direction"
          }
        },
        "type": "object",
        "required": ["field", "direction"],
        "title": "SortBy"
      },
      "StartedCallSchemaForInsert": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Id"
          },
          "op_name": {"type": "string", "title": "Op Name"},
          "display_name": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Display Name"
          },
          "trace_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Trace Id"
          },
          "parent_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Parent Id"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "attributes": {"type": "object", "title": "Attributes"},
          "inputs": {"type": "object", "title": "Inputs"},
          "wb_user_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb User Id",
            "description": "Do not set directly. Server will automatically populate this field."
          },
          "wb_run_id": {
            "anyOf": [{"type": "string"}, {"type": "null"}],
            "title": "Wb Run Id"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "op_name",
          "started_at",
          "attributes",
          "inputs"
        ],
        "title": "StartedCallSchemaForInsert"
      },
      "SummaryInsertMap": {
        "properties": {
          "usage": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LLMUsageSchema"
            },
            "type": "object",
            "title": "Usage"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "SummaryInsertMap"
      },
      "TableAppendSpec": {
        "properties": {
          "append": {"$ref": "#/components/schemas/TableAppendSpecPayload"}
        },
        "type": "object",
        "required": ["append"],
        "title": "TableAppendSpec"
      },
      "TableAppendSpecPayload": {
        "properties": {"row": {"type": "object", "title": "Row"}},
        "type": "object",
        "required": ["row"],
        "title": "TableAppendSpecPayload"
      },
      "TableCreateReq": {
        "properties": {
          "table": {"$ref": "#/components/schemas/TableSchemaForInsert"}
        },
        "type": "object",
        "required": ["table"],
        "title": "TableCreateReq"
      },
      "TableCreateRes": {
        "properties": {
          "digest": {"type": "string", "title": "Digest"},
          "row_digests": {
            "items": {"type": "string"},
            "type": "array",
            "title": "Row Digests",
            "description": "The digests of the rows that were created"
          }
        },
        "type": "object",
        "required": ["digest"],
        "title": "TableCreateRes"
      },
      "TableInsertSpec": {
        "properties": {
          "insert": {"$ref": "#/components/schemas/TableInsertSpecPayload"}
        },
        "type": "object",
        "required": ["insert"],
        "title": "TableInsertSpec"
      },
      "TableInsertSpecPayload": {
        "properties": {
          "index": {"type": "integer", "title": "Index"},
          "row": {"type": "object", "title": "Row"}
        },
        "type": "object",
        "required": ["index", "row"],
        "title": "TableInsertSpecPayload"
      },
      "TablePopSpec": {
        "properties": {
          "pop": {"$ref": "#/components/schemas/TablePopSpecPayload"}
        },
        "type": "object",
        "required": ["pop"],
        "title": "TablePopSpec"
      },
      "TablePopSpecPayload": {
        "properties": {"index": {"type": "integer", "title": "Index"}},
        "type": "object",
        "required": ["index"],
        "title": "TablePopSpecPayload"
      },
      "TableQueryReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "description": "The ID of the project",
            "examples": ["my_entity/my_project"]
          },
          "digest": {
            "type": "string",
            "title": "Digest",
            "description": "The digest of the table to query",
            "examples": [
              "aonareimsvtl13apimtalpa4435rpmgnaemrpgmarltarstaorsnte134avrims"
            ]
          },
          "filter": {
            "anyOf": [
              {"$ref": "#/components/schemas/TableRowFilter"},
              {"type": "null"}
            ],
            "description": "Optional filter to apply to the query. See `TableRowFilter` for more details.",
            "examples": [
              {
                "row_digests": [
                  "aonareimsvtl13apimtalpa4435rpmgnaemrpgmarltarstaorsnte134avrims",
                  "aonareimsvtl13apimtalpa4435rpmgnaemrpgmarltarstaorsnte134avrims"
                ]
              }
            ]
          },
          "limit": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Limit",
            "description": "Maximum number of rows to return",
            "examples": [100]
          },
          "offset": {
            "anyOf": [{"type": "integer"}, {"type": "null"}],
            "title": "Offset",
            "description": "Number of rows to skip before starting to return rows",
            "examples": [10]
          },
          "sort_by": {
            "anyOf": [
              {
                "items": {"$ref": "#/components/schemas/SortBy"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "title": "Sort By",
            "description": "List of fields to sort by. Fields can be dot-separated to access dictionary values. No sorting uses the default table order (insertion order).",
            "examples": [[{"field": "col_a.prop_b", "order": "desc"}]]
          }
        },
        "type": "object",
        "required": ["project_id", "digest"],
        "title": "TableQueryReq"
      },
      "TableQueryRes": {
        "properties": {
          "rows": {
            "items": {"$ref": "#/components/schemas/TableRowSchema"},
            "type": "array",
            "title": "Rows"
          }
        },
        "type": "object",
        "required": ["rows"],
        "title": "TableQueryRes"
      },
      "TableQueryStatsReq": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "description": "The ID of the project",
            "examples": ["my_entity/my_project"]
          },
          "digest": {
            "type": "string",
            "title": "Digest",
            "description": "The digest of the table to query",
            "examples": [
              "aonareimsvtl13apimtalpa4435rpmgnaemrpgmarltarstaorsnte134avrims"
            ]
          }
        },
        "type": "object",
        "required": ["project_id", "digest"],
        "title": "TableQueryStatsReq"
      },
      "TableQueryStatsRes": {
        "properties": {"count": {"type": "integer", "title": "Count"}},
        "type": "object",
        "required": ["count"],
        "title": "TableQueryStatsRes"
      },
      "TableRowFilter": {
        "properties": {
          "row_digests": {
            "anyOf": [
              {"items": {"type": "string"}, "type": "array"},
              {"type": "null"}
            ],
            "title": "Row Digests",
            "description": "List of row digests to filter by",
            "examples": [
              [
                "aonareimsvtl13apimtalpa4435rpmgnaemrpgmarltarstaorsnte134avrims",
                "aonareimsvtl13apimtalpa4435rpmgnaemrpgmarltarstaorsnte134avrims"
              ]
            ]
          }
        },
        "type": "object",
        "title": "TableRowFilter"
      },
      "TableRowSchema": {
        "properties": {
          "digest": {"type": "string", "title": "Digest"},
          "val": {"title": "Val"}
        },
        "type": "object",
        "required": ["digest", "val"],
        "title": "TableRowSchema"
      },
      "TableSchemaForInsert": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "rows": {
            "items": {"type": "object"},
            "type": "array",
            "title": "Rows"
          }
        },
        "type": "object",
        "required": ["project_id", "rows"],
        "title": "TableSchemaForInsert"
      },
      "TableUpdateReq": {
        "properties": {
          "project_id": {"type": "string", "title": "Project Id"},
          "base_digest": {"type": "string", "title": "Base Digest"},
          "updates": {
            "items": {
              "anyOf": [
                {"$ref": "#/components/schemas/TableAppendSpec"},
                {"$ref": "#/components/schemas/TablePopSpec"},
                {"$ref": "#/components/schemas/TableInsertSpec"}
              ]
            },
            "type": "array",
            "title": "Updates"
          }
        },
        "type": "object",
        "required": ["project_id", "base_digest", "updates"],
        "title": "TableUpdateReq"
      },
      "TableUpdateRes": {
        "properties": {
          "digest": {"type": "string", "title": "Digest"},
          "updated_row_digests": {
            "items": {"type": "string"},
            "type": "array",
            "title": "Updated Row Digests",
            "description": "The digests of the rows that were updated"
          }
        },
        "type": "object",
        "required": ["digest"],
        "title": "TableUpdateRes"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]},
            "type": "array",
            "title": "Location"
          },
          "msg": {"type": "string", "title": "Message"},
          "type": {"type": "string", "title": "Error Type"}
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {"HTTPBasic": {"type": "http", "scheme": "basic"}}
  }
}
